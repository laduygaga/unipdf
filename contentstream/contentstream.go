//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package contentstream provides functionality for parsing and creating content streams for PDF files.
//
// For processing and manipulating content streams, it allows parse the content stream into a list of
// operands that can then be processed further for rendering or extraction of information.
// The ContentStreamProcessor offers a basic engine for processing the content stream and can be used
// to render or modify the contents.
//
// For creating content streams, see NewContentCreator.  It allows adding multiple operands and then can
// be converted to a string for embedding in a PDF file.
//
// The contentstream package uses the core and model packages.
package contentstream ;import (_be "bufio";_bc "bytes";_dg "encoding/hex";_b "errors";_g "fmt";_eb "github.com/laduygaga/unipdf/v3/common";_ed "github.com/laduygaga/unipdf/v3/core";_f "github.com/laduygaga/unipdf/v3/internal/imageutil";_gc "github.com/laduygaga/unipdf/v3/internal/transform";
_ca "github.com/laduygaga/unipdf/v3/model";_c "image/color";_af "image/jpeg";_a "io";_cg "math";_bb "regexp";_e "strconv";);func (_ceed *ContentStreamParser )parseString ()(*_ed .PdfObjectString ,error ){_ceed ._aeg .ReadByte ();var _eeab []byte ;_gab :=1;
for {_dac ,_gffe :=_ceed ._aeg .Peek (1);if _gffe !=nil {return _ed .MakeString (string (_eeab )),_gffe ;};if _dac [0]=='\\'{_ceed ._aeg .ReadByte ();_cbbf ,_dabg :=_ceed ._aeg .ReadByte ();if _dabg !=nil {return _ed .MakeString (string (_eeab )),_dabg ;
};if _ed .IsOctalDigit (_cbbf ){_cgc ,_aeb :=_ceed ._aeg .Peek (2);if _aeb !=nil {return _ed .MakeString (string (_eeab )),_aeb ;};var _fcdc []byte ;_fcdc =append (_fcdc ,_cbbf );for _ ,_dccg :=range _cgc {if _ed .IsOctalDigit (_dccg ){_fcdc =append (_fcdc ,_dccg );
}else {break ;};};_ceed ._aeg .Discard (len (_fcdc )-1);_eb .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_fcdc );_decbc ,_aeb :=_e .ParseUint (string (_fcdc ),8,32);if _aeb !=nil {return _ed .MakeString (string (_eeab )),_aeb ;
};_eeab =append (_eeab ,byte (_decbc ));continue ;};switch _cbbf {case 'n':_eeab =append (_eeab ,'\n');case 'r':_eeab =append (_eeab ,'\r');case 't':_eeab =append (_eeab ,'\t');case 'b':_eeab =append (_eeab ,'\b');case 'f':_eeab =append (_eeab ,'\f');case '(':_eeab =append (_eeab ,'(');
case ')':_eeab =append (_eeab ,')');case '\\':_eeab =append (_eeab ,'\\');};continue ;}else if _dac [0]=='('{_gab ++;}else if _dac [0]==')'{_gab --;if _gab ==0{_ceed ._aeg .ReadByte ();break ;};};_fdcb ,_ :=_ceed ._aeg .ReadByte ();_eeab =append (_eeab ,_fdcb );
};return _ed .MakeString (string (_eeab )),nil ;};

// ToImage exports the inline image to Image which can be transformed or exported easily.
// Page resources are needed to look up colorspace information.
func (_agbd *ContentStreamInlineImage )ToImage (resources *_ca .PdfPageResources )(*_ca .Image ,error ){_ggbg ,_cdb :=_agbd .toImageBase (resources );if _cdb !=nil {return nil ,_cdb ;};_ded ,_cdb :=_cdc (_agbd );if _cdb !=nil {return nil ,_cdb ;};_ccac ,_fagf :=_ed .GetDict (_agbd .DecodeParms );
if _fagf {_ded .UpdateParams (_ccac );};_eb .Log .Trace ("\u0065n\u0063o\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076\u0020\u0025\u0054",_ded ,_ded );_eb .Log .Trace ("\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u002b\u0076",_agbd );
_feac ,_cdb :=_ded .DecodeBytes (_agbd ._dage );if _cdb !=nil {return nil ,_cdb ;};_affb :=&_ca .Image {Width :int64 (_ggbg .Width ),Height :int64 (_ggbg .Height ),BitsPerComponent :int64 (_ggbg .BitsPerComponent ),ColorComponents :_ggbg .ColorComponents ,Data :_feac };
if len (_ggbg .Decode )> 0{for _cae :=0;_cae < len (_ggbg .Decode );_cae ++{_ggbg .Decode [_cae ]*=float64 ((int (1)<<uint (_ggbg .BitsPerComponent ))-1);};_affb .SetDecode (_ggbg .Decode );};return _affb ,nil ;};

// String returns `ops.Bytes()` as a string.
func (_egd *ContentStreamOperations )String ()string {return string (_egd .Bytes ())};

// Add_n appends 'n' operand to the content stream:
// End the path without filling or stroking.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_abf *ContentCreator )Add_n ()*ContentCreator {_cec :=ContentStreamOperation {};_cec .Operand ="\u006e";_abf ._ce =append (_abf ._ce ,&_cec );return _abf ;};

// Add_W appends 'W' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (nonzero winding rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_ffg *ContentCreator )Add_W ()*ContentCreator {_gdf :=ContentStreamOperation {};_gdf .Operand ="\u0057";_ffg ._ce =append (_ffg ._ce ,&_gdf );return _ffg ;};

// Add_sh appends 'sh' operand to the content stream:
// Paints the shape and colour shading described by a shading dictionary specified by `name`,
// subject to the current clipping path
//
// See section 8.7.4 "Shading Patterns" and Table 77 (p. 190 PDF32000_2008).
func (_gbg *ContentCreator )Add_sh (name _ed .PdfObjectName )*ContentCreator {_gfbe :=ContentStreamOperation {};_gfbe .Operand ="\u0073\u0068";_gfbe .Params =_fgfc ([]_ed .PdfObjectName {name });_gbg ._ce =append (_gbg ._ce ,&_gfbe );return _gbg ;};

// NewContentStreamProcessor returns a new ContentStreamProcessor for operations `ops`.
func NewContentStreamProcessor (ops []*ContentStreamOperation )*ContentStreamProcessor {_bbeg :=ContentStreamProcessor {};_bbeg ._dgfef =GraphicStateStack {};_gfeg :=GraphicsState {};_bbeg ._aead =_gfeg ;_bbeg ._aade =[]handlerEntry {};_bbeg ._aadf =0;
_bbeg ._caac =ops ;return &_bbeg ;};func (_afec *ContentStreamProcessor )handleCommand_cm (_beg *ContentStreamOperation ,_gbb *_ca .PdfPageResources )error {if len (_beg .Params )!=6{_eb .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0063\u006d\u003a\u0020\u0025\u0064",len (_beg .Params ));
return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_egba ,_ddca :=_ed .GetNumbersAsFloat (_beg .Params );if _ddca !=nil {return _ddca ;
};_eeaf :=_gc .NewMatrix (_egba [0],_egba [1],_egba [2],_egba [3],_egba [4],_egba [5]);_afec ._aead .CTM .Concat (_eeaf );return nil ;};

// Add_gs adds 'gs' operand to the content stream: Set the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ge *ContentCreator )Add_gs (dictName _ed .PdfObjectName )*ContentCreator {_fbd :=ContentStreamOperation {};_fbd .Operand ="\u0067\u0073";_fbd .Params =_fgfc ([]_ed .PdfObjectName {dictName });_ge ._ce =append (_ge ._ce ,&_fbd );return _ge ;};

// Add_rg appends 'rg' operand to the content stream:
// Same as RG but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_adg *ContentCreator )Add_rg (r ,g ,b float64 )*ContentCreator {_eee :=ContentStreamOperation {};_eee .Operand ="\u0072\u0067";_eee .Params =_egda ([]float64 {r ,g ,b });_adg ._ce =append (_adg ._ce ,&_eee );return _adg ;};

// Add_Tm appends 'Tm' operand to the content stream:
// Set the text line matrix.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_befg *ContentCreator )Add_Tm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_cb :=ContentStreamOperation {};_cb .Operand ="\u0054\u006d";_cb .Params =_egda ([]float64 {a ,b ,c ,d ,e ,f });_befg ._ce =append (_befg ._ce ,&_cb );return _befg ;};

// GraphicStateStack represents a stack of GraphicsState.
type GraphicStateStack []GraphicsState ;

// Add_i adds 'i' operand to the content stream: Set the flatness tolerance in the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_gfg *ContentCreator )Add_i (flatness float64 )*ContentCreator {_bde :=ContentStreamOperation {};_bde .Operand ="\u0069";_bde .Params =_egda ([]float64 {flatness });_gfg ._ce =append (_gfg ._ce ,&_bde );return _gfg ;};

// Add_y appends 'y' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with (x1, y1) and (x3,y3) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_egb *ContentCreator )Add_y (x1 ,y1 ,x3 ,y3 float64 )*ContentCreator {_gg :=ContentStreamOperation {};_gg .Operand ="\u0079";_gg .Params =_egda ([]float64 {x1 ,y1 ,x3 ,y3 });_egb ._ce =append (_egb ._ce ,&_gg );return _egb ;};func _bga (_daga string )bool {_ ,_dfb :=_fdg [_daga ];
return _dfb };func (_gbaa *ContentStreamParser )parseOperand ()(*_ed .PdfObjectString ,error ){var _aaef []byte ;for {_abcf ,_fbdgd :=_gbaa ._aeg .Peek (1);if _fbdgd !=nil {return _ed .MakeString (string (_aaef )),_fbdgd ;};if _ed .IsDelimiter (_abcf [0]){break ;
};if _ed .IsWhiteSpace (_abcf [0]){break ;};_ggdc ,_ :=_gbaa ._aeg .ReadByte ();_aaef =append (_aaef ,_ggdc );};return _ed .MakeString (string (_aaef )),nil ;};

// Add_Tw appends 'Tw' operand to the content stream:
// Set word spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_cecg *ContentCreator )Add_Tw (wordSpace float64 )*ContentCreator {_ddgd :=ContentStreamOperation {};_ddgd .Operand ="\u0054\u0077";_ddgd .Params =_egda ([]float64 {wordSpace });_cecg ._ce =append (_cecg ._ce ,&_ddgd );return _cecg ;};

// Add_Ts appends 'Ts' operand to the content stream:
// Set text rise.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_dcf *ContentCreator )Add_Ts (rise float64 )*ContentCreator {_afcd :=ContentStreamOperation {};_afcd .Operand ="\u0054\u0073";_afcd .Params =_egda ([]float64 {rise });_dcf ._ce =append (_dcf ._ce ,&_afcd );return _dcf ;};

// ContentCreator is a builder for PDF content streams.
type ContentCreator struct{_ce ContentStreamOperations };

// Add_SCN appends 'SCN' operand to the content stream:
// Same as SC but supports more colorspaces.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bf *ContentCreator )Add_SCN (c ...float64 )*ContentCreator {_egg :=ContentStreamOperation {};_egg .Operand ="\u0053\u0043\u004e";_egg .Params =_egda (c );_bf ._ce =append (_bf ._ce ,&_egg );return _bf ;};func (_aebeg *ContentStreamProcessor )handleCommand_scn (_fagg *ContentStreamOperation ,_cace *_ca .PdfPageResources )error {_beaa :=_aebeg ._aead .ColorspaceNonStroking ;
if !_dfdb (_beaa ){if len (_fagg .Params )!=_beaa .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_fagg .Params ),_beaa );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_degf ,_ecec :=_beaa .ColorFromPdfObjects (_fagg .Params );if _ecec !=nil {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0046\u0061\u0069\u006c \u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0063o\u006co\u0072\u0020\u0066\u0072\u006f\u006d\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u003a\u0020\u0025\u002b\u0076 \u0028\u0043\u0053\u0020\u0069\u0073\u0020\u0025\u002b\u0076\u0029",_fagg .Params ,_beaa );
return _ecec ;};_aebeg ._aead .ColorNonStroking =_degf ;return nil ;};var _fdg =map[string ]struct{}{"\u0062":struct{}{},"\u0042":struct{}{},"\u0062\u002a":struct{}{},"\u0042\u002a":struct{}{},"\u0042\u0044\u0043":struct{}{},"\u0042\u0049":struct{}{},"\u0042\u004d\u0043":struct{}{},"\u0042\u0054":struct{}{},"\u0042\u0058":struct{}{},"\u0063":struct{}{},"\u0063\u006d":struct{}{},"\u0043\u0053":struct{}{},"\u0063\u0073":struct{}{},"\u0064":struct{}{},"\u0064\u0030":struct{}{},"\u0064\u0031":struct{}{},"\u0044\u006f":struct{}{},"\u0044\u0050":struct{}{},"\u0045\u0049":struct{}{},"\u0045\u004d\u0043":struct{}{},"\u0045\u0054":struct{}{},"\u0045\u0058":struct{}{},"\u0066":struct{}{},"\u0046":struct{}{},"\u0066\u002a":struct{}{},"\u0047":struct{}{},"\u0067":struct{}{},"\u0067\u0073":struct{}{},"\u0068":struct{}{},"\u0069":struct{}{},"\u0049\u0044":struct{}{},"\u006a":struct{}{},"\u004a":struct{}{},"\u004b":struct{}{},"\u006b":struct{}{},"\u006c":struct{}{},"\u006d":struct{}{},"\u004d":struct{}{},"\u004d\u0050":struct{}{},"\u006e":struct{}{},"\u0071":struct{}{},"\u0051":struct{}{},"\u0072\u0065":struct{}{},"\u0052\u0047":struct{}{},"\u0072\u0067":struct{}{},"\u0072\u0069":struct{}{},"\u0073":struct{}{},"\u0053":struct{}{},"\u0053\u0043":struct{}{},"\u0073\u0063":struct{}{},"\u0053\u0043\u004e":struct{}{},"\u0073\u0063\u006e":struct{}{},"\u0073\u0068":struct{}{},"\u0054\u002a":struct{}{},"\u0054\u0063":struct{}{},"\u0054\u0064":struct{}{},"\u0054\u0044":struct{}{},"\u0054\u0066":struct{}{},"\u0054\u006a":struct{}{},"\u0054\u004a":struct{}{},"\u0054\u004c":struct{}{},"\u0054\u006d":struct{}{},"\u0054\u0072":struct{}{},"\u0054\u0073":struct{}{},"\u0054\u0077":struct{}{},"\u0054\u007a":struct{}{},"\u0076":struct{}{},"\u0077":struct{}{},"\u0057":struct{}{},"\u0057\u002a":struct{}{},"\u0079":struct{}{},"\u0027":struct{}{},"\u0022":struct{}{}};


// Add_quotes appends `"` operand to the content stream:
// Move to next line and show a string, using `aw` and `ac` as word
// and character spacing respectively.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bg *ContentCreator )Add_quotes (textstr _ed .PdfObjectString ,aw ,ac float64 )*ContentCreator {_gff :=ContentStreamOperation {};_gff .Operand ="\u0022";_gff .Params =_egda ([]float64 {aw ,ac });_gff .Params =append (_gff .Params ,_fabe ([]_ed .PdfObjectString {textstr })...);
_bg ._ce =append (_bg ._ce ,&_gff );return _bg ;};

// IsMask checks if an image is a mask.
// The image mask entry in the image dictionary specifies that the image data shall be used as a stencil
// mask for painting in the current color. The mask data is 1bpc, grayscale.
func (_edd *ContentStreamInlineImage )IsMask ()(bool ,error ){if _edd .ImageMask !=nil {_ccae ,_dgbg :=_edd .ImageMask .(*_ed .PdfObjectBool );if !_dgbg {_eb .Log .Debug ("\u0049m\u0061\u0067\u0065\u0020\u006d\u0061\u0073\u006b\u0020\u006e\u006ft\u0020\u0061\u0020\u0062\u006f\u006f\u006c\u0065\u0061\u006e");
return false ,_b .New ("\u0069\u006e\u0076\u0061li\u0064\u0020\u006f\u0062\u006a\u0065\u0063\u0074\u0020\u0074\u0079\u0070\u0065");};return bool (*_ccae ),nil ;};return false ,nil ;};

// Add_k appends 'k' operand to the content stream:
// Same as K but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cgdb *ContentCreator )Add_k (c ,m ,y ,k float64 )*ContentCreator {_gae :=ContentStreamOperation {};_gae .Operand ="\u006b";_gae .Params =_egda ([]float64 {c ,m ,y ,k });_cgdb ._ce =append (_cgdb ._ce ,&_gae );return _cgdb ;};

// Add_h appends 'h' operand to the content stream:
// Close the current subpath by adding a line between the current position and the starting position.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ace *ContentCreator )Add_h ()*ContentCreator {_dgb :=ContentStreamOperation {};_dgb .Operand ="\u0068";_ace ._ce =append (_ace ._ce ,&_dgb );return _ace ;};

// Add_cm adds 'cm' operation to the content stream: Modifies the current transformation matrix (ctm)
// of the graphics state.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_bef *ContentCreator )Add_cm (a ,b ,c ,d ,e ,f float64 )*ContentCreator {_ffe :=ContentStreamOperation {};_ffe .Operand ="\u0063\u006d";_ffe .Params =_egda ([]float64 {a ,b ,c ,d ,e ,f });_bef ._ce =append (_bef ._ce ,&_ffe );return _bef ;};

// Add_quote appends "'" operand to the content stream:
// Move to next line and show a string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_dcfg *ContentCreator )Add_quote (textstr _ed .PdfObjectString )*ContentCreator {_bce :=ContentStreamOperation {};_bce .Operand ="\u0027";_bce .Params =_fabe ([]_ed .PdfObjectString {textstr });_dcfg ._ce =append (_dcfg ._ce ,&_bce );return _dcfg ;
};func (_gdbbe *ContentStreamProcessor )handleCommand_k (_gbddb *ContentStreamOperation ,_ccfce *_ca .PdfPageResources )error {_eeg :=_ca .NewPdfColorspaceDeviceCMYK ();if len (_gbddb .Params )!=_eeg .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gbddb .Params ),_eeg );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_ecf ,_abfgb :=_eeg .ColorFromPdfObjects (_gbddb .Params );if _abfgb !=nil {return _abfgb ;};_gdbbe ._aead .ColorspaceNonStroking =_eeg ;_gdbbe ._aead .ColorNonStroking =_ecf ;return nil ;};

// GetEncoder returns the encoder of the inline image.
func (_bafc *ContentStreamInlineImage )GetEncoder ()(_ed .StreamEncoder ,error ){return _cdc (_bafc )};

// Add_Do adds 'Do' operation to the content stream:
// Displays an XObject (image or form) specified by `name`.
//
// See section 8.8 "External Objects" and Table 87 (pp. 209-220 PDF32000_2008).
func (_aba *ContentCreator )Add_Do (name _ed .PdfObjectName )*ContentCreator {_gfb :=ContentStreamOperation {};_gfb .Operand ="\u0044\u006f";_gfb .Params =_fgfc ([]_ed .PdfObjectName {name });_aba ._ce =append (_aba ._ce ,&_gfb );return _aba ;};

// NewContentStreamParser creates a new instance of the content stream parser from an input content
// stream string.
func NewContentStreamParser (contentStr string )*ContentStreamParser {_bag :=ContentStreamParser {};contentStr =string (_faeb .ReplaceAll ([]byte (contentStr ),[]byte ("\u002f")));_gcc :=_bc .NewBufferString (contentStr +"\u000a");_bag ._aeg =_be .NewReader (_gcc );
return &_bag ;};func (_faed *ContentStreamParser )parseObject ()(_ffb _ed .PdfObject ,_fcde bool ,_aea error ){_faed .skipSpaces ();for {_ccfc ,_bfc :=_faed ._aeg .Peek (2);if _bfc !=nil {return nil ,false ,_bfc ;};_eb .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_ccfc ));
if _ccfc [0]=='%'{_faed .skipComments ();continue ;}else if _ccfc [0]=='/'{_cefe ,_facb :=_faed .parseName ();_eb .Log .Trace ("\u002d\u003e\u004ea\u006d\u0065\u003a\u0020\u0027\u0025\u0073\u0027",_cefe );return &_cefe ,false ,_facb ;}else if _ccfc [0]=='('{_eb .Log .Trace ("\u002d>\u0053\u0074\u0072\u0069\u006e\u0067!");
_dbg ,_bfaf :=_faed .parseString ();return _dbg ,false ,_bfaf ;}else if _ccfc [0]=='<'&&_ccfc [1]!='<'{_eb .Log .Trace ("\u002d\u003e\u0048\u0065\u0078\u0020\u0053\u0074\u0072\u0069\u006e\u0067\u0021");_agfg ,_afd :=_faed .parseHexString ();return _agfg ,false ,_afd ;
}else if _ccfc [0]=='['{_eb .Log .Trace ("\u002d\u003e\u0041\u0072\u0072\u0061\u0079\u0021");_cag ,_bcb :=_faed .parseArray ();return _cag ,false ,_bcb ;}else if _ed .IsFloatDigit (_ccfc [0])||(_ccfc [0]=='-'&&_ed .IsFloatDigit (_ccfc [1]))||(_ccfc [0]=='+'&&_ed .IsFloatDigit (_ccfc [1])){_eb .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");
_daaa ,_caa :=_faed .parseNumber ();return _daaa ,false ,_caa ;}else if _ccfc [0]=='<'&&_ccfc [1]=='<'{_aaec ,_feca :=_faed .parseDict ();return _aaec ,false ,_feca ;}else {_eb .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");
_ccfc ,_ =_faed ._aeg .Peek (5);_afef :=string (_ccfc );_eb .Log .Trace ("\u0063\u006f\u006e\u0074\u0020\u0050\u0065\u0065\u006b\u0020\u0073\u0074r\u003a\u0020\u0025\u0073",_afef );if (len (_afef )> 3)&&(_afef [:4]=="\u006e\u0075\u006c\u006c"){_cddd ,_gddc :=_faed .parseNull ();
return &_cddd ,false ,_gddc ;}else if (len (_afef )> 4)&&(_afef [:5]=="\u0066\u0061\u006cs\u0065"){_gagb ,_fgea :=_faed .parseBool ();return &_gagb ,false ,_fgea ;}else if (len (_afef )> 3)&&(_afef [:4]=="\u0074\u0072\u0075\u0065"){_eddg ,_gabf :=_faed .parseBool ();
return &_eddg ,false ,_gabf ;};_afefg ,_eedc :=_faed .parseOperand ();if _eedc !=nil {return _afefg ,false ,_eedc ;};if len (_afefg .String ())< 1{return _afefg ,false ,ErrInvalidOperand ;};return _afefg ,true ,nil ;};};};

// Add_w adds 'w' operand to the content stream, which sets the line width.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_eeb *ContentCreator )Add_w (lineWidth float64 )*ContentCreator {_cfc :=ContentStreamOperation {};_cfc .Operand ="\u0077";_cfc .Params =_egda ([]float64 {lineWidth });_eeb ._ce =append (_eeb ._ce ,&_cfc );return _eeb ;};

// Wrap ensures that the contentstream is wrapped within a balanced q ... Q expression.
func (_edf *ContentCreator )Wrap (){_edf ._ce .WrapIfNeeded ()};

// NewContentCreator returns a new initialized ContentCreator.
func NewContentCreator ()*ContentCreator {_fbg :=&ContentCreator {};_fbg ._ce =ContentStreamOperations {};return _fbg ;};

// Add_c adds 'c' operand to the content stream: Append a Bezier curve to the current path from
// the current point to (x3,y3) with (x1,x1) and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_ddg *ContentCreator )Add_c (x1 ,y1 ,x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_acf :=ContentStreamOperation {};_acf .Operand ="\u0063";_acf .Params =_egda ([]float64 {x1 ,y1 ,x2 ,y2 ,x3 ,y3 });_ddg ._ce =append (_ddg ._ce ,&_acf );return _ddg ;};


// Add_M adds 'M' operand to the content stream: Set the miter limit (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dgg *ContentCreator )Add_M (miterlimit float64 )*ContentCreator {_ea :=ContentStreamOperation {};_ea .Operand ="\u004d";_ea .Params =_egda ([]float64 {miterlimit });_dgg ._ce =append (_dgg ._ce ,&_ea );return _dgg ;};

// Process processes the entire list of operations. Maintains the graphics state that is passed to any
// handlers that are triggered during processing (either on specific operators or all).
func (_dedg *ContentStreamProcessor )Process (resources *_ca .PdfPageResources )error {_dedg ._aead .ColorspaceStroking =_ca .NewPdfColorspaceDeviceGray ();_dedg ._aead .ColorspaceNonStroking =_ca .NewPdfColorspaceDeviceGray ();_dedg ._aead .ColorStroking =_ca .NewPdfColorDeviceGray (0);
_dedg ._aead .ColorNonStroking =_ca .NewPdfColorDeviceGray (0);_dedg ._aead .CTM =_gc .IdentityMatrix ();for _ ,_dfee :=range _dedg ._caac {var _bfafb error ;switch _dfee .Operand {case "\u0071":_dedg ._dgfef .Push (_dedg ._aead );case "\u0051":if len (_dedg ._dgfef )==0{_eb .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0060\u0051\u0060\u0020\u006f\u0070e\u0072\u0061\u0074\u006f\u0072\u002e\u0020\u0047\u0072\u0061\u0070\u0068\u0069\u0063\u0073\u0020\u0073\u0074\u0061\u0074\u0065 \u0073\u0074\u0061\u0063\u006b\u0020\u0069\u0073\u0020\u0065\u006d\u0070\u0074\u0079.\u0020\u0053\u006bi\u0070\u0070\u0069\u006e\u0067\u002e");
continue ;};_dedg ._aead =_dedg ._dgfef .Pop ();case "\u0043\u0053":_bfafb =_dedg .handleCommand_CS (_dfee ,resources );case "\u0063\u0073":_bfafb =_dedg .handleCommand_cs (_dfee ,resources );case "\u0053\u0043":_bfafb =_dedg .handleCommand_SC (_dfee ,resources );
case "\u0053\u0043\u004e":_bfafb =_dedg .handleCommand_SCN (_dfee ,resources );case "\u0073\u0063":_bfafb =_dedg .handleCommand_sc (_dfee ,resources );case "\u0073\u0063\u006e":_bfafb =_dedg .handleCommand_scn (_dfee ,resources );case "\u0047":_bfafb =_dedg .handleCommand_G (_dfee ,resources );
case "\u0067":_bfafb =_dedg .handleCommand_g (_dfee ,resources );case "\u0052\u0047":_bfafb =_dedg .handleCommand_RG (_dfee ,resources );case "\u0072\u0067":_bfafb =_dedg .handleCommand_rg (_dfee ,resources );case "\u004b":_bfafb =_dedg .handleCommand_K (_dfee ,resources );
case "\u006b":_bfafb =_dedg .handleCommand_k (_dfee ,resources );case "\u0063\u006d":_bfafb =_dedg .handleCommand_cm (_dfee ,resources );};if _bfafb !=nil {_eb .Log .Debug ("\u0050\u0072\u006f\u0063\u0065\u0073s\u006f\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0069\u006e\u0067\u0020\u0065r\u0072\u006f\u0072\u0020\u0028\u0025\u0073)\u003a\u0020\u0025\u0076",_dfee .Operand ,_bfafb );
_eb .Log .Debug ("\u004f\u0070\u0065r\u0061\u006e\u0064\u003a\u0020\u0025\u0023\u0076",_dfee .Operand );return _bfafb ;};for _ ,_dgef :=range _dedg ._aade {var _caca error ;if _dgef .Condition .All (){_caca =_dgef .Handler (_dfee ,_dedg ._aead ,resources );
}else if _dgef .Condition .Operand ()&&_dfee .Operand ==_dgef .Operand {_caca =_dgef .Handler (_dfee ,_dedg ._aead ,resources );};if _caca !=nil {_eb .Log .Debug ("P\u0072\u006f\u0063\u0065\u0073\u0073o\u0072\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0072 \u0065\u0072\u0072o\u0072:\u0020\u0025\u0076",_caca );
return _caca ;};};};return nil ;};

// WrapIfNeeded wraps the entire contents within q ... Q.  If unbalanced, then adds extra Qs at the end.
// Only does if needed. Ensures that when adding new content, one start with all states
// in the default condition.
func (_ga *ContentStreamOperations )WrapIfNeeded ()*ContentStreamOperations {if len (*_ga )==0{return _ga ;};if _ga .isWrapped (){return _ga ;};*_ga =append ([]*ContentStreamOperation {{Operand :"\u0071"}},*_ga ...);_ff :=0;for _ ,_ee :=range *_ga {if _ee .Operand =="\u0071"{_ff ++;
}else if _ee .Operand =="\u0051"{_ff --;};};for _ff > 0{*_ga =append (*_ga ,&ContentStreamOperation {Operand :"\u0051"});_ff --;};return _ga ;};

// Add_EMC appends 'EMC' operand to the content stream:
// Ends a marked-content sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_bad *ContentCreator )Add_EMC ()*ContentCreator {_egff :=ContentStreamOperation {};_egff .Operand ="\u0045\u004d\u0043";_bad ._ce =append (_bad ._ce ,&_egff );return _bad ;};

// Add_ri adds 'ri' operand to the content stream, which sets the color rendering intent.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fba *ContentCreator )Add_ri (intent _ed .PdfObjectName )*ContentCreator {_eag :=ContentStreamOperation {};_eag .Operand ="\u0072\u0069";_eag .Params =_fgfc ([]_ed .PdfObjectName {intent });_fba ._ce =append (_fba ._ce ,&_eag );return _fba ;};

// Add_SC appends 'SC' operand to the content stream:
// Set color for stroking operations.  Input: c1, ..., cn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_afb *ContentCreator )Add_SC (c ...float64 )*ContentCreator {_daa :=ContentStreamOperation {};_daa .Operand ="\u0053\u0043";_daa .Params =_egda (c );_afb ._ce =append (_afb ._ce ,&_daa );return _afb ;};

// HandlerFunc is the function syntax that the ContentStreamProcessor handler must implement.
type HandlerFunc func (_cab *ContentStreamOperation ,_fbe GraphicsState ,_aaeab *_ca .PdfPageResources )error ;type handlerEntry struct{Condition HandlerConditionEnum ;Operand string ;Handler HandlerFunc ;};

// Add_Q adds 'Q' operand to the content stream: Pops the most recently stored state from the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_dba *ContentCreator )Add_Q ()*ContentCreator {_ada :=ContentStreamOperation {};_ada .Operand ="\u0051";_dba ._ce =append (_dba ._ce ,&_ada );return _dba ;};

// GetColorSpace returns the colorspace of the inline image.
func (_fdcg *ContentStreamInlineImage )GetColorSpace (resources *_ca .PdfPageResources )(_ca .PdfColorspace ,error ){if _fdcg .ColorSpace ==nil {_eb .Log .Debug ("\u0049\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u006e\u006f\u0074\u0020\u0068\u0061\u0076i\u006e\u0067\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u002c\u0020\u0061\u0073\u0073\u0075\u006di\u006e\u0067\u0020\u0047\u0072a\u0079");
return _ca .NewPdfColorspaceDeviceGray (),nil ;};if _bdef ,_fcf :=_fdcg .ColorSpace .(*_ed .PdfObjectArray );_fcf {return _gaf (_bdef );};_eaa ,_facf :=_fdcg .ColorSpace .(*_ed .PdfObjectName );if !_facf {_eb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020I\u006e\u0076\u0061\u006c\u0069\u0064 \u006f\u0062\u006a\u0065\u0063\u0074\u0020t\u0079\u0070\u0065\u0020\u0028\u0025\u0054\u003b\u0025\u002bv\u0029",_fdcg .ColorSpace ,_fdcg .ColorSpace );
return nil ,_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_eaa =="\u0047"||*_eaa =="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"{return _ca .NewPdfColorspaceDeviceGray (),nil ;
}else if *_eaa =="\u0052\u0047\u0042"||*_eaa =="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"{return _ca .NewPdfColorspaceDeviceRGB (),nil ;}else if *_eaa =="\u0043\u004d\u0059\u004b"||*_eaa =="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{return _ca .NewPdfColorspaceDeviceCMYK (),nil ;
}else if *_eaa =="\u0049"||*_eaa =="\u0049n\u0064\u0065\u0078\u0065\u0064"{return nil ,_b .New ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0049\u006e\u0064e\u0078 \u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063\u0065");}else {if resources .ColorSpace ==nil {_eb .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_eaa );
return nil ,_b .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};_cffg ,_dab :=resources .GetColorspaceByName (*_eaa );if !_dab {_eb .Log .Debug ("\u0045\u0072r\u006f\u0072\u002c\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065\u003a\u0020\u0025\u0073",*_eaa );
return nil ,_b .New ("\u0075n\u006bn\u006f\u0077\u006e\u0020\u0063o\u006c\u006fr\u0073\u0070\u0061\u0063\u0065");};return _cffg ,nil ;};};func (_dbae *ContentStreamProcessor )getColorspace (_aab string ,_cbca *_ca .PdfPageResources )(_ca .PdfColorspace ,error ){switch _aab {case "\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":return _ca .NewPdfColorspaceDeviceGray (),nil ;
case "\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":return _ca .NewPdfColorspaceDeviceRGB (),nil ;case "\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":return _ca .NewPdfColorspaceDeviceCMYK (),nil ;case "\u0050a\u0074\u0074\u0065\u0072\u006e":return _ca .NewPdfColorspaceSpecialPattern (),nil ;
};_faebd ,_fgaf :=_cbca .GetColorspaceByName (_ed .PdfObjectName (_aab ));if _fgaf {return _faebd ,nil ;};switch _aab {case "\u0043a\u006c\u0047\u0072\u0061\u0079":return _ca .NewPdfColorspaceCalGray (),nil ;case "\u0043\u0061\u006c\u0052\u0047\u0042":return _ca .NewPdfColorspaceCalRGB (),nil ;
case "\u004c\u0061\u0062":return _ca .NewPdfColorspaceLab (),nil ;};_eb .Log .Debug ("\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070a\u0063e\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0065\u0064\u003a\u0020\u0025\u0073",_aab );
return nil ,_g .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063\u0065:\u0020\u0025\u0073",_aab );};func (_cbg *ContentStreamParser )skipSpaces ()(int ,error ){_gea :=0;for {_dgc ,_fbac :=_cbg ._aeg .Peek (1);
if _fbac !=nil {return 0,_fbac ;};if _ed .IsWhiteSpace (_dgc [0]){_cbg ._aeg .ReadByte ();_gea ++;}else {break ;};};return _gea ,nil ;};func (_bfb *ContentStreamProcessor )handleCommand_CS (_dgdd *ContentStreamOperation ,_gadg *_ca .PdfPageResources )error {if len (_dgdd .Params )< 1{_eb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _b .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_dgdd .Params )> 1{_eb .Log .Debug ("\u0063\u0073\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _b .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_aaeac ,_bgeg :=_dgdd .Params [0].(*_ed .PdfObjectName );if !_bgeg {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020c\u0073\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_dcbc ,_gegfg :=_bfb .getColorspace (string (*_aaeac ),_gadg );if _gegfg !=nil {return _gegfg ;};_bfb ._aead .ColorspaceStroking =_dcbc ;_bace ,_gegfg :=_bfb .getInitialColor (_dcbc );
if _gegfg !=nil {return _gegfg ;};_bfb ._aead .ColorStroking =_bace ;return nil ;};func _edab (_bgeba []int64 )[]_ed .PdfObject {var _cefb []_ed .PdfObject ;for _ ,_fdgb :=range _bgeba {_cefb =append (_cefb ,_ed .MakeInteger (_fdgb ));};return _cefb ;};


// Add_d adds 'd' operand to the content stream: Set the line dash pattern.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_ac *ContentCreator )Add_d (dashArray []int64 ,dashPhase int64 )*ContentCreator {_dcd :=ContentStreamOperation {};_dcd .Operand ="\u0064";_dcd .Params =[]_ed .PdfObject {};_dcd .Params =append (_dcd .Params ,_ed .MakeArrayFromIntegers64 (dashArray ));
_dcd .Params =append (_dcd .Params ,_ed .MakeInteger (dashPhase ));_ac ._ce =append (_ac ._ce ,&_dcd );return _ac ;};func _afg (_gge *ContentStreamInlineImage )(*_ed .MultiEncoder ,error ){_aeca :=_ed .NewMultiEncoder ();var _gdda *_ed .PdfObjectDictionary ;
var _ggd []_ed .PdfObject ;if _efec :=_gge .DecodeParms ;_efec !=nil {_ecb ,_dbad :=_efec .(*_ed .PdfObjectDictionary );if _dbad {_gdda =_ecb ;};_adaf ,_ggb :=_efec .(*_ed .PdfObjectArray );if _ggb {for _ ,_fbda :=range _adaf .Elements (){if _bab ,_decb :=_fbda .(*_ed .PdfObjectDictionary );
_decb {_ggd =append (_ggd ,_bab );}else {_ggd =append (_ggd ,nil );};};};};_dfg :=_gge .Filter ;if _dfg ==nil {return nil ,_g .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u006d\u0069s\u0073\u0069\u006e\u0067");};_fbfc ,_cgg :=_dfg .(*_ed .PdfObjectArray );
if !_cgg {return nil ,_g .Errorf ("m\u0075\u006c\u0074\u0069\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0063\u0061\u006e\u0020\u006f\u006el\u0079\u0020\u0062\u0065\u0020\u006d\u0061\u0064\u0065\u0020fr\u006f\u006d\u0020a\u0072r\u0061\u0079");};for _bdee ,_gef :=range _fbfc .Elements (){_gad ,_aeef :=_gef .(*_ed .PdfObjectName );
if !_aeef {return nil ,_g .Errorf ("\u006d\u0075l\u0074\u0069\u0020\u0066i\u006c\u0074e\u0072\u0020\u0061\u0072\u0072\u0061\u0079\u0020e\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061 \u006e\u0061\u006d\u0065");};var _fac _ed .PdfObject ;
if _gdda !=nil {_fac =_gdda ;}else {if len (_ggd )> 0{if _bdee >=len (_ggd ){return nil ,_g .Errorf ("\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u0065\u006c\u0065\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020d\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006d\u0073\u0020a\u0072\u0072\u0061\u0079");
};_fac =_ggd [_bdee ];};};var _cdaf *_ed .PdfObjectDictionary ;if _bceb ,_aad :=_fac .(*_ed .PdfObjectDictionary );_aad {_cdaf =_bceb ;};if *_gad ==_ed .StreamEncodingFilterNameFlate ||*_gad =="\u0046\u006c"{_dfe ,_dcc :=_ddgdb (_gge ,_cdaf );if _dcc !=nil {return nil ,_dcc ;
};_aeca .AddEncoder (_dfe );}else if *_gad ==_ed .StreamEncodingFilterNameLZW {_fdc ,_bge :=_abc (_gge ,_cdaf );if _bge !=nil {return nil ,_bge ;};_aeca .AddEncoder (_fdc );}else if *_gad ==_ed .StreamEncodingFilterNameASCIIHex {_gde :=_ed .NewASCIIHexEncoder ();
_aeca .AddEncoder (_gde );}else if *_gad ==_ed .StreamEncodingFilterNameASCII85 ||*_gad =="\u0041\u0038\u0035"{_daff :=_ed .NewASCII85Encoder ();_aeca .AddEncoder (_daff );}else {_eb .Log .Error ("U\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0066\u0069l\u0074\u0065\u0072\u0020\u0025\u0073",*_gad );
return nil ,_g .Errorf ("\u0069\u006eva\u006c\u0069\u0064 \u0066\u0069\u006c\u0074er \u0069n \u006d\u0075\u006c\u0074\u0069\u0020\u0066il\u0074\u0065\u0072\u0020\u0061\u0072\u0072a\u0079");};};return _aeca ,nil ;};

// Add_TJ appends 'TJ' operand to the content stream:
// Show one or more text string. Array of numbers (displacement) and strings.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_aff *ContentCreator )Add_TJ (vals ..._ed .PdfObject )*ContentCreator {_aef :=ContentStreamOperation {};_aef .Operand ="\u0054\u004a";_aef .Params =[]_ed .PdfObject {_ed .MakeArray (vals ...)};_aff ._ce =append (_aff ._ce ,&_aef );return _aff ;};


// Add_TL appends 'TL' operand to the content stream:
// Set leading.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ddag *ContentCreator )Add_TL (leading float64 )*ContentCreator {_afe :=ContentStreamOperation {};_afe .Operand ="\u0054\u004c";_afe .Params =_egda ([]float64 {leading });_ddag ._ce =append (_ddag ._ce ,&_afe );return _ddag ;};

// Add_B_starred appends 'B*' operand to the content stream:
// Fill and then stroke the path (even-odd rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_feg *ContentCreator )Add_B_starred ()*ContentCreator {_gee :=ContentStreamOperation {};_gee .Operand ="\u0042\u002a";_feg ._ce =append (_feg ._ce ,&_gee );return _feg ;};

// Add_SCN_pattern appends 'SCN' operand to the content stream for pattern `name`:
// SCN with name attribute (for pattern). Syntax: c1 ... cn name SCN.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_fbae *ContentCreator )Add_SCN_pattern (name _ed .PdfObjectName ,c ...float64 )*ContentCreator {_gcd :=ContentStreamOperation {};_gcd .Operand ="\u0053\u0043\u004e";_gcd .Params =_egda (c );_gcd .Params =append (_gcd .Params ,_ed .MakeName (string (name )));
_fbae ._ce =append (_fbae ._ce ,&_gcd );return _fbae ;};func _eced (_edgd *ContentStreamInlineImage )(*_ed .DCTEncoder ,error ){_ade :=_ed .NewDCTEncoder ();_aced :=_bc .NewReader (_edgd ._dage );_eea ,_acee :=_af .DecodeConfig (_aced );if _acee !=nil {_eb .Log .Debug ("\u0045\u0072\u0072or\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0065\u003a\u0020\u0025\u0073",_acee );
return nil ,_acee ;};switch _eea .ColorModel {case _c .RGBAModel :_ade .BitsPerComponent =8;_ade .ColorComponents =3;case _c .RGBA64Model :_ade .BitsPerComponent =16;_ade .ColorComponents =3;case _c .GrayModel :_ade .BitsPerComponent =8;_ade .ColorComponents =1;
case _c .Gray16Model :_ade .BitsPerComponent =16;_ade .ColorComponents =1;case _c .CMYKModel :_ade .BitsPerComponent =8;_ade .ColorComponents =4;case _c .YCbCrModel :_ade .BitsPerComponent =8;_ade .ColorComponents =3;default:return nil ,_b .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u006d\u006f\u0064\u0065\u006c");
};_ade .Width =_eea .Width ;_ade .Height =_eea .Height ;_eb .Log .Trace ("\u0044\u0043T\u0020\u0045\u006ec\u006f\u0064\u0065\u0072\u003a\u0020\u0025\u002b\u0076",_ade );return _ade ,nil ;};

// Translate applies a simple x-y translation to the transformation matrix.
func (_df *ContentCreator )Translate (tx ,ty float64 )*ContentCreator {return _df .Add_cm (1,0,0,1,tx ,ty );};func _ddgdb (_bfd *ContentStreamInlineImage ,_fef *_ed .PdfObjectDictionary )(*_ed .FlateEncoder ,error ){_faf :=_ed .NewFlateEncoder ();if _bfd ._bafa !=nil {_faf .SetImage (_bfd ._bafa );
};if _fef ==nil {_fgf :=_bfd .DecodeParms ;if _fgf !=nil {_ccfg ,_bbe :=_ed .GetDict (_fgf );if !_bbe {_eb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_fgf );
return nil ,_g .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_fef =_ccfg ;};};if _fef ==nil {return _faf ,nil ;};_eb .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_fef .String ());
_gbac :=_fef .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _gbac ==nil {_eb .Log .Debug ("E\u0072\u0072o\u0072\u003a\u0020\u0050\u0072\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067 \u0066\u0072\u006f\u006d\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073 \u002d\u0020\u0043\u006f\u006e\u0074\u0069\u006e\u0075\u0065\u0020\u0077\u0069t\u0068\u0020\u0064\u0065\u0066\u0061\u0075\u006c\u0074\u0020\u00281\u0029");
}else {_gec ,_gca :=_gbac .(*_ed .PdfObjectInteger );if !_gca {_eb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_gbac );
return nil ,_g .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_faf .Predictor =int (*_gec );};_gbac =_fef .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _gbac !=nil {_cda ,_bca :=_gbac .(*_ed .PdfObjectInteger );if !_bca {_eb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_g .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_faf .BitsPerComponent =int (*_cda );};if _faf .Predictor > 1{_faf .Columns =1;_gbac =_fef .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _gbac !=nil {_aec ,_bgf :=_gbac .(*_ed .PdfObjectInteger );if !_bgf {return nil ,_g .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_faf .Columns =int (*_aec );
};_faf .Colors =1;_edg :=_fef .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _edg !=nil {_fff ,_aca :=_edg .(*_ed .PdfObjectInteger );if !_aca {return nil ,_g .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_faf .Colors =int (*_fff );};};return _faf ,nil ;};

// Add_l adds 'l' operand to the content stream:
// Append a straight line segment from the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gd *ContentCreator )Add_l (x ,y float64 )*ContentCreator {_dcb :=ContentStreamOperation {};_dcb .Operand ="\u006c";_dcb .Params =_egda ([]float64 {x ,y });_gd ._ce =append (_gd ._ce ,&_dcb );return _gd ;};func (_aadb *ContentStreamProcessor )handleCommand_g (_bgb *ContentStreamOperation ,_cccc *_ca .PdfPageResources )error {_ddee :=_ca .NewPdfColorspaceDeviceGray ();
if len (_bgb .Params )!=_ddee .GetNumComponents (){_eb .Log .Debug ("\u0049\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020p\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020\u0067");_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_bgb .Params ),_ddee );
return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");};_acd ,_edba :=_ddee .ColorFromPdfObjects (_bgb .Params );if _edba !=nil {_eb .Log .Debug ("\u0045\u0052\u0052\u004fR\u003a\u0020\u0068\u0061\u006e\u0064\u006c\u0065\u0043o\u006d\u006d\u0061\u006e\u0064\u005f\u0067\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061r\u0061\u006d\u0073\u002e\u0020c\u0073\u003d\u0025\u0054\u0020\u006f\u0070\u003d\u0025\u0073\u0020\u0065\u0072\u0072\u003d\u0025\u0076",_ddee ,_bgb ,_edba );
return _edba ;};_aadb ._aead .ColorspaceNonStroking =_ddee ;_aadb ._aead .ColorNonStroking =_acd ;return nil ;};func (_fefa *ContentStreamParser )parseNumber ()(_ed .PdfObject ,error ){return _ed .ParseNumber (_fefa ._aeg );};

// Add_q adds 'q' operand to the content stream: Pushes the current graphics state on the stack.
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_agf *ContentCreator )Add_q ()*ContentCreator {_gcf :=ContentStreamOperation {};_gcf .Operand ="\u0071";_agf ._ce =append (_agf ._ce ,&_gcf );return _agf ;};

// GraphicsState is a basic graphics state implementation for PDF processing.
// Initially only implementing and tracking a portion of the information specified. Easy to add more.
type GraphicsState struct{ColorspaceStroking _ca .PdfColorspace ;ColorspaceNonStroking _ca .PdfColorspace ;ColorStroking _ca .PdfColor ;ColorNonStroking _ca .PdfColor ;CTM _gc .Matrix ;};func _gaf (_dbac _ed .PdfObject )(_ca .PdfColorspace ,error ){_dedff ,_fcgf :=_dbac .(*_ed .PdfObjectArray );
if !_fcgf {_eb .Log .Debug ("\u0045r\u0072\u006fr\u003a\u0020\u0049\u006ev\u0061\u006c\u0069d\u0020\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020cs\u0020\u006e\u006ft\u0020\u0069n\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025#\u0076\u0029",_dbac );
return nil ,_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if _dedff .Len ()!=4{_eb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072:\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061r\u0072\u0061\u0079\u002c\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0021\u003d\u0020\u0034\u0020\u0028\u0025\u0064\u0029",_dedff .Len ());
return nil ,_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_edca ,_fcgf :=_dedff .Get (0).(*_ed .PdfObjectName );if !_fcgf {_eb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072s\u0074 \u0065\u006c\u0065\u006de\u006e\u0074 \u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072\u0061\u0079\u003a\u0020\u0025\u0023\u0076\u0029",*_dedff );
return nil ,_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_edca !="\u0049"&&*_edca !="\u0049n\u0064\u0065\u0078\u0065\u0064"{_eb .Log .Debug ("\u0045\u0072r\u006f\u0072\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064 \u0063\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0049\u0020\u0028\u0067\u006f\u0074\u003a\u0020\u0025\u0076\u0029",*_edca );
return nil ,_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_edca ,_fcgf =_dedff .Get (1).(*_ed .PdfObjectName );if !_fcgf {_eb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u006e\u0061\u006d\u0065\u0020\u0028\u0061\u0072\u0072a\u0079\u003a\u0020\u0025\u0023v\u0029",*_dedff );
return nil ,_b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};if *_edca !="\u0047"&&*_edca !="\u0052\u0047\u0042"&&*_edca !="\u0043\u004d\u0059\u004b"&&*_edca !="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079"&&*_edca !="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B"&&*_edca !="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b"{_eb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0032\u006e\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0021\u003d\u0020\u0047\u002f\u0052\u0047\u0042\u002f\u0043\u004d\u0059\u004b\u0020\u0028g\u006f\u0074\u003a\u0020\u0025v\u0029",*_edca );
return nil ,_b .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");};_cge :="";switch *_edca {case "\u0047","\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079":_cge ="\u0044\u0065\u0076\u0069\u0063\u0065\u0047\u0072\u0061\u0079";
case "\u0052\u0047\u0042","\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B":_cge ="\u0044e\u0076\u0069\u0063\u0065\u0052\u0047B";case "\u0043\u004d\u0059\u004b","\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b":_cge ="\u0044\u0065\u0076\u0069\u0063\u0065\u0043\u004d\u0059\u004b";
};_dfaf :=_ed .MakeArray (_ed .MakeName ("\u0049n\u0064\u0065\u0078\u0065\u0064"),_ed .MakeName (_cge ),_dedff .Get (2),_dedff .Get (3));return _ca .NewPdfColorspaceFromPdfObject (_dfaf );};

// Add_scn_pattern appends 'scn' operand to the content stream for pattern `name`:
// scn with name attribute (for pattern). Syntax: c1 ... cn name scn.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_bec *ContentCreator )Add_scn_pattern (name _ed .PdfObjectName ,c ...float64 )*ContentCreator {_abe :=ContentStreamOperation {};_abe .Operand ="\u0073\u0063\u006e";_abe .Params =_egda (c );_abe .Params =append (_abe .Params ,_ed .MakeName (string (name )));
_bec ._ce =append (_bec ._ce ,&_abe );return _bec ;};

// Operand returns true if `hce` is equivalent to HandlerConditionEnumOperand.
func (_cdeg HandlerConditionEnum )Operand ()bool {return _cdeg ==HandlerConditionEnumOperand };

// Add_re appends 're' operand to the content stream:
// Append a rectangle to the current path as a complete subpath, with lower left corner (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_gdd *ContentCreator )Add_re (x ,y ,width ,height float64 )*ContentCreator {_efb :=ContentStreamOperation {};_efb .Operand ="\u0072\u0065";_efb .Params =_egda ([]float64 {x ,y ,width ,height });_gdd ._ce =append (_gdd ._ce ,&_efb );return _gdd ;};


// WriteString outputs the object as it is to be written to file.
func (_bac *ContentStreamInlineImage )WriteString ()string {var _fed _bc .Buffer ;_adc :="";if _bac .BitsPerComponent !=nil {_adc +="\u002f\u0042\u0050C\u0020"+_bac .BitsPerComponent .WriteString ()+"\u000a";};if _bac .ColorSpace !=nil {_adc +="\u002f\u0043\u0053\u0020"+_bac .ColorSpace .WriteString ()+"\u000a";
};if _bac .Decode !=nil {_adc +="\u002f\u0044\u0020"+_bac .Decode .WriteString ()+"\u000a";};if _bac .DecodeParms !=nil {_adc +="\u002f\u0044\u0050\u0020"+_bac .DecodeParms .WriteString ()+"\u000a";};if _bac .Filter !=nil {_adc +="\u002f\u0046\u0020"+_bac .Filter .WriteString ()+"\u000a";
};if _bac .Height !=nil {_adc +="\u002f\u0048\u0020"+_bac .Height .WriteString ()+"\u000a";};if _bac .ImageMask !=nil {_adc +="\u002f\u0049\u004d\u0020"+_bac .ImageMask .WriteString ()+"\u000a";};if _bac .Intent !=nil {_adc +="\u002f\u0049\u006e\u0074\u0065\u006e\u0074\u0020"+_bac .Intent .WriteString ()+"\u000a";
};if _bac .Interpolate !=nil {_adc +="\u002f\u0049\u0020"+_bac .Interpolate .WriteString ()+"\u000a";};if _bac .Width !=nil {_adc +="\u002f\u0057\u0020"+_bac .Width .WriteString ()+"\u000a";};_fed .WriteString (_adc );_fed .WriteString ("\u0049\u0044\u0020");
_fed .Write (_bac ._dage );_fed .WriteString ("\u000a\u0045\u0049\u000a");return _fed .String ();};func _cdc (_gba *ContentStreamInlineImage )(_ed .StreamEncoder ,error ){if _gba .Filter ==nil {return _ed .NewRawEncoder (),nil ;};_dcab ,_dfa :=_gba .Filter .(*_ed .PdfObjectName );
if !_dfa {_fag ,_bgc :=_gba .Filter .(*_ed .PdfObjectArray );if !_bgc {return nil ,_g .Errorf ("\u0066\u0069\u006c\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006f\u0072 \u0041\u0072\u0072\u0061\u0079\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _fag .Len ()==0{return _ed .NewRawEncoder (),nil ;};if _fag .Len ()!=1{_efeb ,_bba :=_afg (_gba );if _bba !=nil {_eb .Log .Error ("\u0046\u0061\u0069\u006c\u0065\u0064 \u0063\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u006d\u0075\u006c\u0074i\u0020\u0065\u006e\u0063\u006f\u0064\u0065r\u003a\u0020\u0025\u0076",_bba );
return nil ,_bba ;};_eb .Log .Trace ("\u004d\u0075\u006c\u0074\u0069\u0020\u0065\u006e\u0063:\u0020\u0025\u0073\u000a",_efeb );return _efeb ,nil ;};_dde :=_fag .Get (0);_dcab ,_bgc =_dde .(*_ed .PdfObjectName );if !_bgc {return nil ,_g .Errorf ("\u0066\u0069l\u0074\u0065\u0072\u0020a\u0072\u0072a\u0079\u0020\u006d\u0065\u006d\u0062\u0065\u0072 \u006e\u006f\u0074\u0020\u0061\u0020\u004e\u0061\u006d\u0065\u0020\u006fb\u006a\u0065\u0063\u0074");
};};switch *_dcab {case "\u0041\u0048\u0078","\u0041\u0053\u0043\u0049\u0049\u0048\u0065\u0078\u0044e\u0063\u006f\u0064\u0065":return _ed .NewASCIIHexEncoder (),nil ;case "\u0041\u0038\u0035","\u0041\u0053\u0043\u0049\u0049\u0038\u0035\u0044\u0065\u0063\u006f\u0064\u0065":return _ed .NewASCII85Encoder (),nil ;
case "\u0044\u0043\u0054","\u0044C\u0054\u0044\u0065\u0063\u006f\u0064e":return _eced (_gba );case "\u0046\u006c","F\u006c\u0061\u0074\u0065\u0044\u0065\u0063\u006f\u0064\u0065":return _ddgdb (_gba ,nil );case "\u004c\u005a\u0057","\u004cZ\u0057\u0044\u0065\u0063\u006f\u0064e":return _abc (_gba ,nil );
case "\u0043\u0043\u0046","\u0043\u0043\u0049\u0054\u0054\u0046\u0061\u0078\u0044e\u0063\u006f\u0064\u0065":return _ed .NewCCITTFaxEncoder (),nil ;case "\u0052\u004c","\u0052u\u006eL\u0065\u006e\u0067\u0074\u0068\u0044\u0065\u0063\u006f\u0064\u0065":return _ed .NewRunLengthEncoder (),nil ;
default:_eb .Log .Debug ("\u0055\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0069\u006d\u0061\u0067\u0065\u0020\u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0066\u0069\u006c\u0074e\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u003a\u0020\u0025\u0073",*_dcab );
return nil ,_b .New ("\u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0069\u006el\u0069n\u0065 \u0065n\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u006d\u0065\u0074\u0068\u006f\u0064");};};

// Add_Td appends 'Td' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_aed *ContentCreator )Add_Td (tx ,ty float64 )*ContentCreator {_geeg :=ContentStreamOperation {};_geeg .Operand ="\u0054\u0064";_geeg .Params =_egda ([]float64 {tx ,ty });_aed ._ce =append (_aed ._ce ,&_geeg );return _aed ;};

// Add_W_starred appends 'W*' operand to the content stream:
// Modify the current clipping path by intersecting with the current path (even odd rule).
//
// See section 8.5.4 "Clipping Path Operators" and Table 61 (p. 146 PDF32000_2008).
func (_ffc *ContentCreator )Add_W_starred ()*ContentCreator {_bdeb :=ContentStreamOperation {};_bdeb .Operand ="\u0057\u002a";_ffc ._ce =append (_ffc ._ce ,&_bdeb );return _ffc ;};

// Add_RG appends 'RG' operand to the content stream:
// Set the stroking colorspace to DeviceRGB and sets the r,g,b colors (0-1 each).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_gbd *ContentCreator )Add_RG (r ,g ,b float64 )*ContentCreator {_adb :=ContentStreamOperation {};_adb .Operand ="\u0052\u0047";_adb .Params =_egda ([]float64 {r ,g ,b });_gbd ._ce =append (_gbd ._ce ,&_adb );return _gbd ;};

// String is same as Bytes() except returns as a string for convenience.
func (_ec *ContentCreator )String ()string {return string (_ec ._ce .Bytes ())};func (_agde *ContentStreamProcessor )handleCommand_RG (_gbdbd *ContentStreamOperation ,_cgdc *_ca .PdfPageResources )error {_bdcg :=_ca .NewPdfColorspaceDeviceRGB ();if len (_gbdbd .Params )!=_bdcg .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020R\u0047");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gbdbd .Params ),_bdcg );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_dedf ,_bed :=_bdcg .ColorFromPdfObjects (_gbdbd .Params );if _bed !=nil {return _bed ;};_agde ._aead .ColorspaceStroking =_bdcg ;_agde ._aead .ColorStroking =_dedf ;return nil ;};

// ContentStreamOperation represents an operation in PDF contentstream which consists of
// an operand and parameters.
type ContentStreamOperation struct{Params []_ed .PdfObject ;Operand string ;};func (_acc *ContentStreamProcessor )handleCommand_cs (_efag *ContentStreamOperation ,_aebe *_ca .PdfPageResources )error {if len (_efag .Params )< 1{_eb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061\u006e\u0064\u002c\u0020s\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u006f\u0076\u0065\u0072");
return _b .New ("\u0074o\u006f \u0066\u0065\u0077\u0020\u0070a\u0072\u0061m\u0065\u0074\u0065\u0072\u0073");};if len (_efag .Params )> 1{_eb .Log .Debug ("\u0043\u0053\u0020\u0063\u006f\u006d\u006d\u0061n\u0064\u0020\u0077it\u0068\u0020\u0074\u006f\u006f\u0020m\u0061\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020-\u0020\u0063\u006f\u006e\u0074\u0069\u006e\u0075i\u006e\u0067");
return _b .New ("\u0074\u006f\u006f\u0020ma\u006e\u0079\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");};_gegfb ,_ddac :=_efag .Params [0].(*_ed .PdfObjectName );if !_ddac {_eb .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0053\u0020\u0063o\u006d\u006d\u0061n\u0064\u0020w\u0069\u0074\u0068\u0020\u0069\u006ev\u0061li\u0064\u0020\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u002c\u0020\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u006f\u0076\u0065\u0072");
return _b .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");};_daac ,_fegb :=_acc .getColorspace (string (*_gegfb ),_aebe );if _fegb !=nil {return _fegb ;};_acc ._aead .ColorspaceNonStroking =_daac ;_ddbe ,_fegb :=_acc .getInitialColor (_daac );
if _fegb !=nil {return _fegb ;};_acc ._aead .ColorNonStroking =_ddbe ;return nil ;};

// Add_K appends 'K' operand to the content stream:
// Set the stroking colorspace to DeviceCMYK and sets the c,m,y,k color (0-1 each component).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ceg *ContentCreator )Add_K (c ,m ,y ,k float64 )*ContentCreator {_efdf :=ContentStreamOperation {};_efdf .Operand ="\u004b";_efdf .Params =_egda ([]float64 {c ,m ,y ,k });_ceg ._ce =append (_ceg ._ce ,&_efdf );return _ceg ;};func (_cccb *ContentStreamProcessor )handleCommand_SC (_gfag *ContentStreamOperation ,_eac *_ca .PdfPageResources )error {_fcdg :=_cccb ._aead .ColorspaceStroking ;
if len (_gfag .Params )!=_fcdg .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gfag .Params ),_fcdg );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_eec ,_dce :=_fcdg .ColorFromPdfObjects (_gfag .Params );if _dce !=nil {return _dce ;};_cccb ._aead .ColorStroking =_eec ;return nil ;};

// Add_f_starred appends 'f*' operand to the content stream.
// f*: Fill the path using the even-odd rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_cad *ContentCreator )Add_f_starred ()*ContentCreator {_cca :=ContentStreamOperation {};_cca .Operand ="\u0066\u002a";_cad ._ce =append (_cad ._ce ,&_cca );return _cad ;};func (_efc *ContentStreamParser )parseArray ()(*_ed .PdfObjectArray ,error ){_fdd :=_ed .MakeArray ();
_efc ._aeg .ReadByte ();for {_efc .skipSpaces ();_abb ,_cfcd :=_efc ._aeg .Peek (1);if _cfcd !=nil {return _fdd ,_cfcd ;};if _abb [0]==']'{_efc ._aeg .ReadByte ();break ;};_bgg ,_ ,_cfcd :=_efc .parseObject ();if _cfcd !=nil {return _fdd ,_cfcd ;};_fdd .Append (_bgg );
};return _fdd ,nil ;};

// Add_TD appends 'TD' operand to the content stream:
// Move to start of next line with offset (`tx`, `ty`).
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_gbdb *ContentCreator )Add_TD (tx ,ty float64 )*ContentCreator {_eca :=ContentStreamOperation {};_eca .Operand ="\u0054\u0044";_eca .Params =_egda ([]float64 {tx ,ty });_gbdb ._ce =append (_gbdb ._ce ,&_eca );return _gbdb ;};func (_aa *ContentStreamOperations )isWrapped ()bool {if len (*_aa )< 2{return false ;
};_ab :=0;for _ ,_eg :=range *_aa {if _eg .Operand =="\u0071"{_ab ++;}else if _eg .Operand =="\u0051"{_ab --;}else {if _ab < 1{return false ;};};};return _ab ==0;};

// SetNonStrokingColor sets the non-stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_cdd *ContentCreator )SetNonStrokingColor (color _ca .PdfColor )*ContentCreator {switch _fea :=color .(type ){case *_ca .PdfColorDeviceGray :_cdd .Add_g (_fea .Val ());case *_ca .PdfColorDeviceRGB :_cdd .Add_rg (_fea .R (),_fea .G (),_fea .B ());
case *_ca .PdfColorDeviceCMYK :_cdd .Add_k (_fea .C (),_fea .M (),_fea .Y (),_fea .K ());case *_ca .PdfColorPatternType2 :_cdd .Add_cs (*_ed .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_cdd .Add_scn_pattern (_fea .PatternName );case *_ca .PdfColorPatternType3 :_cdd .Add_cs (*_ed .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));
_cdd .Add_scn_pattern (_fea .PatternName );default:_eb .Log .Debug ("\u0053\u0065\u0074N\u006f\u006e\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006f\u006c\u006f\u0072\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020c\u006f\u006c\u006f\u0072\u003a\u0020\u0025\u0054",_fea );
};return _cdd ;};

// Bytes converts the content stream operations to a content stream byte presentation, i.e. the kind that can be
// stored as a PDF stream or string format.
func (_egf *ContentCreator )Bytes ()[]byte {return _egf ._ce .Bytes ()};

// Add_ET appends 'ET' operand to the content stream:
// End text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_abeb *ContentCreator )Add_ET ()*ContentCreator {_beba :=ContentStreamOperation {};_beba .Operand ="\u0045\u0054";_abeb ._ce =append (_abeb ._ce ,&_beba );return _abeb ;};

// Add_m adds 'm' operand to the content stream: Move the current point to (x,y).
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fec *ContentCreator )Add_m (x ,y float64 )*ContentCreator {_dca :=ContentStreamOperation {};_dca .Operand ="\u006d";_dca .Params =_egda ([]float64 {x ,y });_fec ._ce =append (_fec ._ce ,&_dca );return _fec ;};

// AddOperand adds a specified operand.
func (_ege *ContentCreator )AddOperand (op ContentStreamOperation )*ContentCreator {_ege ._ce =append (_ege ._ce ,&op );return _ege ;};

// ContentStreamProcessor defines a data structure and methods for processing a content stream, keeping track of the
// current graphics state, and allowing external handlers to define their own functions as a part of the processing,
// for example rendering or extracting certain information.
type ContentStreamProcessor struct{_dgfef GraphicStateStack ;_caac []*ContentStreamOperation ;_aead GraphicsState ;_aade []handlerEntry ;_aadf int ;};func (_aaeda *ContentStreamProcessor )getInitialColor (_bade _ca .PdfColorspace )(_ca .PdfColor ,error ){switch _ccea :=_bade .(type ){case *_ca .PdfColorspaceDeviceGray :return _ca .NewPdfColorDeviceGray (0.0),nil ;
case *_ca .PdfColorspaceDeviceRGB :return _ca .NewPdfColorDeviceRGB (0.0,0.0,0.0),nil ;case *_ca .PdfColorspaceDeviceCMYK :return _ca .NewPdfColorDeviceCMYK (0.0,0.0,0.0,1.0),nil ;case *_ca .PdfColorspaceCalGray :return _ca .NewPdfColorCalGray (0.0),nil ;
case *_ca .PdfColorspaceCalRGB :return _ca .NewPdfColorCalRGB (0.0,0.0,0.0),nil ;case *_ca .PdfColorspaceLab :_abbg :=0.0;_cbf :=0.0;_ecd :=0.0;if _ccea .Range [0]> 0{_abbg =_ccea .Range [0];};if _ccea .Range [2]> 0{_cbf =_ccea .Range [2];};return _ca .NewPdfColorLab (_abbg ,_cbf ,_ecd ),nil ;
case *_ca .PdfColorspaceICCBased :if _ccea .Alternate ==nil {_eb .Log .Trace ("\u0049\u0043\u0043\u0020\u0042\u0061\u0073\u0065\u0064\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065d\u0020-\u0020\u0061\u0074\u0074\u0065\u006d\u0070\u0074\u0069\u006e\u0067\u0020\u0066\u0061\u006c\u006c\u0020\u0062a\u0063\u006b\u0020\u0028\u004e\u0020\u003d\u0020\u0025\u0064\u0029",_ccea .N );
if _ccea .N ==1{_eb .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065G\u0072\u0061\u0079");return _aaeda .getInitialColor (_ca .NewPdfColorspaceDeviceGray ());}else if _ccea .N ==3{_eb .Log .Trace ("\u0046a\u006c\u006c\u0069\u006eg\u0020\u0062\u0061\u0063\u006b \u0074o\u0020D\u0065\u0076\u0069\u0063\u0065\u0052\u0047B");
return _aaeda .getInitialColor (_ca .NewPdfColorspaceDeviceRGB ());}else if _ccea .N ==4{_eb .Log .Trace ("\u0046\u0061\u006c\u006c\u0069\u006e\u0067\u0020\u0062\u0061\u0063k\u0020\u0074\u006f\u0020\u0044\u0065\u0076\u0069\u0063\u0065C\u004d\u0059\u004b");
return _aaeda .getInitialColor (_ca .NewPdfColorspaceDeviceCMYK ());}else {return nil ,_b .New ("a\u006c\u0074\u0065\u0072\u006e\u0061t\u0065\u0020\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064\u0020\u0066\u006f\u0072\u0020\u0049C\u0043");
};};return _aaeda .getInitialColor (_ccea .Alternate );case *_ca .PdfColorspaceSpecialIndexed :if _ccea .Base ==nil {return nil ,_b .New ("\u0069\u006e\u0064\u0065\u0078\u0065\u0064\u0020\u0062\u0061\u0073e\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069f\u0069\u0065\u0064");
};return _aaeda .getInitialColor (_ccea .Base );case *_ca .PdfColorspaceSpecialSeparation :if _ccea .AlternateSpace ==nil {return nil ,_b .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _aaeda .getInitialColor (_ccea .AlternateSpace );case *_ca .PdfColorspaceDeviceN :if _ccea .AlternateSpace ==nil {return nil ,_b .New ("\u0061\u006ct\u0065\u0072\u006e\u0061\u0074\u0065\u0020\u0073\u0070\u0061\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0073\u0070\u0065\u0063\u0069fi\u0065\u0064");
};return _aaeda .getInitialColor (_ccea .AlternateSpace );case *_ca .PdfColorspaceSpecialPattern :return _ca .NewPdfColorPattern (),nil ;};_eb .Log .Debug ("Un\u0061\u0062l\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065r\u006d\u0069\u006e\u0065\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0066\u006f\u0072\u0020\u0075\u006e\u006b\u006e\u006fw\u006e \u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065:\u0020\u0025T",_bade );
return nil ,_b .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061c\u0065");};

// Add_Tr appends 'Tr' operand to the content stream:
// Set text rendering mode.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_gdb *ContentCreator )Add_Tr (render int64 )*ContentCreator {_cfe :=ContentStreamOperation {};_cfe .Operand ="\u0054\u0072";_cfe .Params =_edab ([]int64 {render });_gdb ._ce =append (_gdb ._ce ,&_cfe );return _gdb ;};func _egda (_eabb []float64 )[]_ed .PdfObject {var _gede []_ed .PdfObject ;
for _ ,_dea :=range _eabb {_gede =append (_gede ,_ed .MakeFloat (_dea ));};return _gede ;};func (_ddga *ContentStreamProcessor )handleCommand_G (_aede *ContentStreamOperation ,_acb *_ca .PdfPageResources )error {_eagd :=_ca .NewPdfColorspaceDeviceGray ();
if len (_aede .Params )!=_eagd .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aede .Params ),_eagd );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_aaaa ,_fcfc :=_eagd .ColorFromPdfObjects (_aede .Params );if _fcfc !=nil {return _fcfc ;};_ddga ._aead .ColorspaceStroking =_eagd ;_ddga ._aead .ColorStroking =_aaaa ;return nil ;};

// Add_Tf appends 'Tf' operand to the content stream:
// Set font and font size specified by font resource `fontName` and `fontSize`.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_bdgg *ContentCreator )Add_Tf (fontName _ed .PdfObjectName ,fontSize float64 )*ContentCreator {_gcff :=ContentStreamOperation {};_gcff .Operand ="\u0054\u0066";_gcff .Params =_fgfc ([]_ed .PdfObjectName {fontName });_gcff .Params =append (_gcff .Params ,_egda ([]float64 {fontSize })...);
_bdgg ._ce =append (_bdgg ._ce ,&_gcff );return _bdgg ;};

// Operations returns the list of operations.
func (_ccf *ContentCreator )Operations ()*ContentStreamOperations {return &_ccf ._ce };

// ExtractText parses and extracts all text data in content streams and returns as a string.
// Does not take into account Encoding table, the output is simply the character codes.
//
// Deprecated: More advanced text extraction is offered in package extractor with character encoding support.
func (_bdg *ContentStreamParser )ExtractText ()(string ,error ){_da ,_ad :=_bdg .Parse ();if _ad !=nil {return "",_ad ;};_ef :=false ;_gb ,_bdd :=float64 (-1),float64 (-1);_fd :="";for _ ,_dbe :=range *_da {if _dbe .Operand =="\u0042\u0054"{_ef =true ;
}else if _dbe .Operand =="\u0045\u0054"{_ef =false ;};if _dbe .Operand =="\u0054\u0064"||_dbe .Operand =="\u0054\u0044"||_dbe .Operand =="\u0054\u002a"{_fd +="\u000a";};if _dbe .Operand =="\u0054\u006d"{if len (_dbe .Params )!=6{continue ;};_cd ,_fe :=_dbe .Params [4].(*_ed .PdfObjectFloat );
if !_fe {_edc ,_dc :=_dbe .Params [4].(*_ed .PdfObjectInteger );if !_dc {continue ;};_cd =_ed .MakeFloat (float64 (*_edc ));};_gf ,_fe :=_dbe .Params [5].(*_ed .PdfObjectFloat );if !_fe {_ddb ,_de :=_dbe .Params [5].(*_ed .PdfObjectInteger );if !_de {continue ;
};_gf =_ed .MakeFloat (float64 (*_ddb ));};if _bdd ==-1{_bdd =float64 (*_gf );}else if _bdd > float64 (*_gf ){_fd +="\u000a";_gb =float64 (*_cd );_bdd =float64 (*_gf );continue ;};if _gb ==-1{_gb =float64 (*_cd );}else if _gb < float64 (*_cd ){_fd +="\u0009";
_gb =float64 (*_cd );};};if _ef &&_dbe .Operand =="\u0054\u004a"{if len (_dbe .Params )< 1{continue ;};_fg ,_gag :=_dbe .Params [0].(*_ed .PdfObjectArray );if !_gag {return "",_g .Errorf ("\u0069\u006ev\u0061\u006c\u0069\u0064 \u0070\u0061r\u0061\u006d\u0065\u0074\u0065\u0072\u0020\u0074y\u0070\u0065\u002c\u0020\u006e\u006f\u0020\u0061\u0072\u0072\u0061\u0079 \u0028\u0025\u0054\u0029",_dbe .Params [0]);
};for _ ,_cfd :=range _fg .Elements (){switch _fb :=_cfd .(type ){case *_ed .PdfObjectString :_fd +=_fb .Str ();case *_ed .PdfObjectFloat :if *_fb < -100{_fd +="\u0020";};case *_ed .PdfObjectInteger :if *_fb < -100{_fd +="\u0020";};};};}else if _ef &&_dbe .Operand =="\u0054\u006a"{if len (_dbe .Params )< 1{continue ;
};_cga ,_def :=_dbe .Params [0].(*_ed .PdfObjectString );if !_def {return "",_g .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0072\u0061\u006de\u0074\u0065\u0072\u0020\u0074\u0079p\u0065\u002c\u0020\u006e\u006f\u0074\u0020\u0073\u0074\u0072\u0069\u006e\u0067 \u0028\u0025\u0054\u0029",_dbe .Params [0]);
};_fd +=_cga .Str ();};};return _fd ,nil ;};func (_bgd *ContentStreamProcessor )handleCommand_sc (_dbfa *ContentStreamOperation ,_aege *_ca .PdfPageResources )error {_afed :=_bgd ._aead .ColorspaceNonStroking ;if !_dfdb (_afed ){if len (_dbfa .Params )!=_afed .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dbfa .Params ),_afed );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_caba ,_ffbg :=_afed .ColorFromPdfObjects (_dbfa .Params );if _ffbg !=nil {return _ffbg ;};_bgd ._aead .ColorNonStroking =_caba ;return nil ;};func (_abec *ContentStreamParser )parseNull ()(_ed .PdfObjectNull ,error ){_ ,_geda :=_abec ._aeg .Discard (4);
return _ed .PdfObjectNull {},_geda ;};

// Add_s appends 's' operand to the content stream: Close and stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_afc *ContentCreator )Add_s ()*ContentCreator {_bdf :=ContentStreamOperation {};_bdf .Operand ="\u0073";_afc ._ce =append (_afc ._ce ,&_bdf );return _afc ;};

// Add_CS appends 'CS' operand to the content stream:
// Set the current colorspace for stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_edb *ContentCreator )Add_CS (name _ed .PdfObjectName )*ContentCreator {_dgd :=ContentStreamOperation {};_dgd .Operand ="\u0043\u0053";_dgd .Params =_fgfc ([]_ed .PdfObjectName {name });_edb ._ce =append (_edb ._ce ,&_dgd );return _edb ;};func (_deg *ContentStreamParser )parseHexString ()(*_ed .PdfObjectString ,error ){_deg ._aeg .ReadByte ();
_dgda :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");var _befa []byte ;for {_deg .skipSpaces ();_eab ,_dbd :=_deg ._aeg .Peek (1);if _dbd !=nil {return _ed .MakeString (""),_dbd ;
};if _eab [0]=='>'{_deg ._aeg .ReadByte ();break ;};_abff ,_ :=_deg ._aeg .ReadByte ();if _bc .IndexByte (_dgda ,_abff )>=0{_befa =append (_befa ,_abff );};};if len (_befa )%2==1{_befa =append (_befa ,'0');};_efa ,_ :=_dg .DecodeString (string (_befa ));
return _ed .MakeHexString (string (_efa )),nil ;};var (ErrInvalidOperand =_b .New ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064"););var _faeb =_bb .MustCompile ("\u005e\u002f\u007b\u0032\u002c\u007d");

// Add_scn appends 'scn' operand to the content stream:
// Same as SC but for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dec *ContentCreator )Add_scn (c ...float64 )*ContentCreator {_aee :=ContentStreamOperation {};_aee .Operand ="\u0073\u0063\u006e";_aee .Params =_egda (c );_dec ._ce =append (_dec ._ce ,&_aee );return _dec ;};

// SetStrokingColor sets the stroking `color` where color can be one of
// PdfColorDeviceGray, PdfColorDeviceRGB, or PdfColorDeviceCMYK.
func (_eggf *ContentCreator )SetStrokingColor (color _ca .PdfColor )*ContentCreator {switch _eba :=color .(type ){case *_ca .PdfColorDeviceGray :_eggf .Add_G (_eba .Val ());case *_ca .PdfColorDeviceRGB :_eggf .Add_RG (_eba .R (),_eba .G (),_eba .B ());
case *_ca .PdfColorDeviceCMYK :_eggf .Add_K (_eba .C (),_eba .M (),_eba .Y (),_eba .K ());case *_ca .PdfColorPatternType2 :_eggf .Add_CS (*_ed .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));_eggf .Add_SCN_pattern (_eba .PatternName );case *_ca .PdfColorPatternType3 :_eggf .Add_CS (*_ed .MakeName ("\u0050a\u0074\u0074\u0065\u0072\u006e"));
_eggf .Add_SCN_pattern (_eba .PatternName );default:_eb .Log .Debug ("\u0053\u0065\u0074\u0053\u0074\u0072\u006f\u006b\u0069\u006e\u0067\u0043\u006fl\u006f\u0072\u003a\u0020\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0063\u006f\u006c\u006fr\u003a\u0020\u0025\u0054",_eba );
};return _eggf ;};func _fabe (_cbbc []_ed .PdfObjectString )[]_ed .PdfObject {var _faeda []_ed .PdfObject ;for _ ,_eggd :=range _cbbc {_faeda =append (_faeda ,_ed .MakeString (_eggd .Str ()));};return _faeda ;};

// Add_j adds 'j' operand to the content stream: Set the line join style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fc *ContentCreator )Add_j (lineJoinStyle string )*ContentCreator {_dff :=ContentStreamOperation {};_dff .Operand ="\u006a";_dff .Params =_fgfc ([]_ed .PdfObjectName {_ed .PdfObjectName (lineJoinStyle )});_fc ._ce =append (_fc ._ce ,&_dff );return _fc ;
};

// Add_b_starred appends 'b*' operand to the content stream:
// Close, fill and then stroke the path (even-odd winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_efg *ContentCreator )Add_b_starred ()*ContentCreator {_dda :=ContentStreamOperation {};_dda .Operand ="\u0062\u002a";_efg ._ce =append (_efg ._ce ,&_dda );return _efg ;};func (_aaeg *ContentStreamParser )skipComments ()error {if _ ,_bcef :=_aaeg .skipSpaces ();
_bcef !=nil {return _bcef ;};_afbd :=true ;for {_bccf ,_affc :=_aaeg ._aeg .Peek (1);if _affc !=nil {_eb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_affc .Error ());return _affc ;};if _afbd &&_bccf [0]!='%'{return nil ;};_afbd =false ;
if (_bccf [0]!='\r')&&(_bccf [0]!='\n'){_aaeg ._aeg .ReadByte ();}else {break ;};};return _aaeg .skipComments ();};

// RotateDeg applies a rotation to the transformation matrix.
func (_faa *ContentCreator )RotateDeg (angle float64 )*ContentCreator {_dag :=_cg .Cos (angle *_cg .Pi /180.0);_efe :=_cg .Sin (angle *_cg .Pi /180.0);_aae :=-_cg .Sin (angle *_cg .Pi /180.0);_bda :=_cg .Cos (angle *_cg .Pi /180.0);return _faa .Add_cm (_dag ,_efe ,_aae ,_bda ,0,0);
};func (_dceg *ContentStreamProcessor )handleCommand_K (_dad *ContentStreamOperation ,_ceb *_ca .PdfPageResources )error {_agg :=_ca .NewPdfColorspaceDeviceCMYK ();if len (_dad .Params )!=_agg .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_dad .Params ),_agg );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_fbb ,_ccefa :=_agg .ColorFromPdfObjects (_dad .Params );if _ccefa !=nil {return _ccefa ;};_dceg ._aead .ColorspaceStroking =_agg ;_dceg ._aead .ColorStroking =_fbb ;return nil ;};

// Push pushes `gs` on the `gsStack`.
func (_bdcf *GraphicStateStack )Push (gs GraphicsState ){*_bdcf =append (*_bdcf ,gs )};func (_gfgd *ContentStreamProcessor )handleCommand_rg (_gdaa *ContentStreamOperation ,_dgfb *_ca .PdfPageResources )error {_afcf :=_ca .NewPdfColorspaceDeviceRGB ();
if len (_gdaa .Params )!=_afcf .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_gdaa .Params ),_afcf );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};_aeefa ,_ccff :=_afcf .ColorFromPdfObjects (_gdaa .Params );if _ccff !=nil {return _ccff ;};_gfgd ._aead .ColorspaceNonStroking =_afcf ;_gfgd ._aead .ColorNonStroking =_aeefa ;return nil ;};

// Add_BT appends 'BT' operand to the content stream:
// Begin text.
//
// See section 9.4 "Text Objects" and Table 107 (p. 256 PDF32000_2008).
func (_bfa *ContentCreator )Add_BT ()*ContentCreator {_dggb :=ContentStreamOperation {};_dggb .Operand ="\u0042\u0054";_bfa ._ce =append (_bfa ._ce ,&_dggb );return _bfa ;};

// ContentStreamOperations is a slice of ContentStreamOperations.
type ContentStreamOperations []*ContentStreamOperation ;

// Add_G appends 'G' operand to the content stream:
// Set the stroking colorspace to DeviceGray and sets the gray level (0-1).
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_dcg *ContentCreator )Add_G (gray float64 )*ContentCreator {_agff :=ContentStreamOperation {};_agff .Operand ="\u0047";_agff .Params =_egda ([]float64 {gray });_dcg ._ce =append (_dcg ._ce ,&_agff );return _dcg ;};

// Add_Tz appends 'Tz' operand to the content stream:
// Set horizontal scaling.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_ccc *ContentCreator )Add_Tz (scale float64 )*ContentCreator {_agb :=ContentStreamOperation {};_agb .Operand ="\u0054\u007a";_agb .Params =_egda ([]float64 {scale });_ccc ._ce =append (_ccc ._ce ,&_agb );return _ccc ;};

// HandlerConditionEnum represents the type of operand content stream processor (handler).
// The handler may process a single specific named operand or all operands.
type HandlerConditionEnum int ;

// Pop pops and returns the topmost GraphicsState off the `gsStack`.
func (_ecee *GraphicStateStack )Pop ()GraphicsState {_eae :=(*_ecee )[len (*_ecee )-1];*_ecee =(*_ecee )[:len (*_ecee )-1];return _eae ;};

// Add_Tc appends 'Tc' operand to the content stream:
// Set character spacing.
//
// See section 9.3 "Text State Parameters and Operators" and
// Table 105 (pp. 251-252 PDF32000_2008).
func (_adf *ContentCreator )Add_Tc (charSpace float64 )*ContentCreator {_fbf :=ContentStreamOperation {};_fbf .Operand ="\u0054\u0063";_fbf .Params =_egda ([]float64 {charSpace });_adf ._ce =append (_adf ._ce ,&_fbf );return _adf ;};func (_ffd *ContentStreamInlineImage )String ()string {_bgcf :=_g .Sprintf ("I\u006el\u0069\u006e\u0065\u0049\u006d\u0061\u0067\u0065(\u006c\u0065\u006e\u003d%d\u0029\u000a",len (_ffd ._dage ));
if _ffd .BitsPerComponent !=nil {_bgcf +="\u002d\u0020\u0042\u0050\u0043\u0020"+_ffd .BitsPerComponent .WriteString ()+"\u000a";};if _ffd .ColorSpace !=nil {_bgcf +="\u002d\u0020\u0043S\u0020"+_ffd .ColorSpace .WriteString ()+"\u000a";};if _ffd .Decode !=nil {_bgcf +="\u002d\u0020\u0044\u0020"+_ffd .Decode .WriteString ()+"\u000a";
};if _ffd .DecodeParms !=nil {_bgcf +="\u002d\u0020\u0044P\u0020"+_ffd .DecodeParms .WriteString ()+"\u000a";};if _ffd .Filter !=nil {_bgcf +="\u002d\u0020\u0046\u0020"+_ffd .Filter .WriteString ()+"\u000a";};if _ffd .Height !=nil {_bgcf +="\u002d\u0020\u0048\u0020"+_ffd .Height .WriteString ()+"\u000a";
};if _ffd .ImageMask !=nil {_bgcf +="\u002d\u0020\u0049M\u0020"+_ffd .ImageMask .WriteString ()+"\u000a";};if _ffd .Intent !=nil {_bgcf +="\u002d \u0049\u006e\u0074\u0065\u006e\u0074 "+_ffd .Intent .WriteString ()+"\u000a";};if _ffd .Interpolate !=nil {_bgcf +="\u002d\u0020\u0049\u0020"+_ffd .Interpolate .WriteString ()+"\u000a";
};if _ffd .Width !=nil {_bgcf +="\u002d\u0020\u0057\u0020"+_ffd .Width .WriteString ()+"\u000a";};return _bgcf ;};

// Add_J adds 'J' operand to the content stream: Set the line cap style (graphics state).
//
// See section 8.4.4 "Graphic State Operators" and Table 57 (pp. 135-136 PDF32000_2008).
func (_fab *ContentCreator )Add_J (lineCapStyle string )*ContentCreator {_ece :=ContentStreamOperation {};_ece .Operand ="\u004a";_ece .Params =_fgfc ([]_ed .PdfObjectName {_ed .PdfObjectName (lineCapStyle )});_fab ._ce =append (_fab ._ce ,&_ece );return _fab ;
};

// Add_f appends 'f' operand to the content stream:
// Fill the path using the nonzero winding number rule to determine fill region.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dgfe *ContentCreator )Add_f ()*ContentCreator {_cgd :=ContentStreamOperation {};_cgd .Operand ="\u0066";_dgfe ._ce =append (_dgfe ._ce ,&_cgd );return _dgfe ;};

// NewInlineImageFromImage makes a new content stream inline image object from an image.
func NewInlineImageFromImage (img _ca .Image ,encoder _ed .StreamEncoder )(*ContentStreamInlineImage ,error ){if encoder ==nil {encoder =_ed .NewRawEncoder ();};encoder .UpdateParams (img .GetParamsDict ());_cee :=ContentStreamInlineImage {};if img .ColorComponents ==1{_cee .ColorSpace =_ed .MakeName ("\u0047");
}else if img .ColorComponents ==3{_cee .ColorSpace =_ed .MakeName ("\u0052\u0047\u0042");}else if img .ColorComponents ==4{_cee .ColorSpace =_ed .MakeName ("\u0043\u004d\u0059\u004b");}else {_eb .Log .Debug ("\u0049\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006db\u0065\u0072\u0020o\u0066\u0020c\u006f\u006c\u006f\u0072\u0020\u0063o\u006dpo\u006e\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",img .ColorComponents );
return nil ,_b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020c\u006fl\u006f\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073");};_cee .BitsPerComponent =_ed .MakeInteger (img .BitsPerComponent );
_cee .Width =_ed .MakeInteger (img .Width );_cee .Height =_ed .MakeInteger (img .Height );_aaed ,_gedf :=encoder .EncodeBytes (img .Data );if _gedf !=nil {return nil ,_gedf ;};_cee ._dage =_aaed ;_agbe :=encoder .GetFilterName ();if _agbe !=_ed .StreamEncodingFilterNameRaw {_cee .Filter =_ed .MakeName (_agbe );
};return &_cee ,nil ;};

// All returns true if `hce` is equivalent to HandlerConditionEnumAllOperands.
func (_beca HandlerConditionEnum )All ()bool {return _beca ==HandlerConditionEnumAllOperands };

// Add_b appends 'b' operand to the content stream:
// Close, fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_dge *ContentCreator )Add_b ()*ContentCreator {_agfb :=ContentStreamOperation {};_agfb .Operand ="\u0062";_dge ._ce =append (_dge ._ce ,&_agfb );return _dge ;};func (_dbcd *ContentStreamParser )parseName ()(_ed .PdfObjectName ,error ){_geg :="";_afa :=false ;
for {_fbfa ,_gdg :=_dbcd ._aeg .Peek (1);if _gdg ==_a .EOF {break ;};if _gdg !=nil {return _ed .PdfObjectName (_geg ),_gdg ;};if !_afa {if _fbfa [0]=='/'{_afa =true ;_dbcd ._aeg .ReadByte ();}else {_eb .Log .Error ("N\u0061\u006d\u0065\u0020\u0073\u0074a\u0072\u0074\u0069\u006e\u0067\u0020\u0077\u0069\u0074h\u0020\u0025\u0073 \u0028%\u0020\u0078\u0029",_fbfa ,_fbfa );
return _ed .PdfObjectName (_geg ),_g .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_fbfa [0]);};}else {if _ed .IsWhiteSpace (_fbfa [0]){break ;}else if (_fbfa [0]=='/')||(_fbfa [0]=='[')||(_fbfa [0]=='(')||(_fbfa [0]==']')||(_fbfa [0]=='<')||(_fbfa [0]=='>'){break ;
}else if _fbfa [0]=='#'{_fbdg ,_aaa :=_dbcd ._aeg .Peek (3);if _aaa !=nil {return _ed .PdfObjectName (_geg ),_aaa ;};_dbcd ._aeg .Discard (3);_bdebf ,_aaa :=_dg .DecodeString (string (_fbdg [1:3]));if _aaa !=nil {return _ed .PdfObjectName (_geg ),_aaa ;
};_geg +=string (_bdebf );}else {_aaag ,_ :=_dbcd ._aeg .ReadByte ();_geg +=string (_aaag );};};};return _ed .PdfObjectName (_geg ),nil ;};func (_gdde *ContentStreamInlineImage )toImageBase (_fffe *_ca .PdfPageResources )(*_f .ImageBase ,error ){if _gdde ._bafa !=nil {return _gdde ._bafa ,nil ;
};_fae :=_f .ImageBase {};if _gdde .Height ==nil {return nil ,_b .New ("\u0068e\u0069\u0067\u0068\u0074\u0020\u0061\u0074\u0074\u0072\u0069\u0062u\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");};_dafb ,_dcba :=_gdde .Height .(*_ed .PdfObjectInteger );
if !_dcba {return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");};_fae .Height =int (*_dafb );if _gdde .Width ==nil {return nil ,_b .New ("\u0077\u0069\u0064th\u0020\u0061\u0074\u0074\u0072\u0069\u0062\u0075\u0074\u0065\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067");
};_age ,_dcba :=_gdde .Width .(*_ed .PdfObjectInteger );if !_dcba {return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064\u0074\u0068");};_fae .Width =int (*_age );_ebe ,_ccef :=_gdde .IsMask ();if _ccef !=nil {return nil ,_ccef ;
};if _ebe {_fae .BitsPerComponent =1;_fae .ColorComponents =1;}else {if _gdde .BitsPerComponent ==nil {_eb .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0042\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020\u002d\u0020\u0061\u0073\u0073\u0075\u006d\u0069\u006e\u0067\u0020\u0038");
_fae .BitsPerComponent =8;}else {_fefc ,_bae :=_gdde .BitsPerComponent .(*_ed .PdfObjectInteger );if !_bae {_eb .Log .Debug ("E\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0062\u0069\u0074\u0073 p\u0065\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0020\u0076al\u0075\u0065,\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_gdde .BitsPerComponent );
return nil ,_b .New ("\u0042\u0050\u0043\u0020\u0054\u0079\u0070\u0065\u0020e\u0072\u0072\u006f\u0072");};_fae .BitsPerComponent =int (*_fefc );};if _gdde .ColorSpace !=nil {_cfff ,_bacc :=_gdde .GetColorSpace (_fffe );if _bacc !=nil {return nil ,_bacc ;
};_fae .ColorComponents =_cfff .GetNumComponents ();}else {_eb .Log .Debug ("\u0049\u006el\u0069\u006e\u0065\u0020\u0049\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006c\u006f\u0072\u0073\u0070\u0061\u0063e\u0020\u006e\u006f\u0074\u0020\u0073p\u0065\u0063\u0069\u0066\u0069\u0065\u0064\u0020\u002d\u0020\u0061\u0073\u0073\u0075m\u0069\u006eg\u0020\u0031\u0020\u0063o\u006c\u006f\u0072\u0020\u0063o\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
_fae .ColorComponents =1;};};if _gdc ,_ddc :=_ed .GetArray (_gdde .Decode );_ddc {_fae .Decode ,_ccef =_gdc .ToFloat64Array ();if _ccef !=nil {return nil ,_ccef ;};};_gdde ._bafa =&_fae ;return _gdde ._bafa ,nil ;};

// Scale applies x-y scaling to the transformation matrix.
func (_cce *ContentCreator )Scale (sx ,sy float64 )*ContentCreator {return _cce .Add_cm (sx ,0,0,sy ,0,0);};

// Bytes converts a set of content stream operations to a content stream byte presentation,
// i.e. the kind that can be stored as a PDF stream or string format.
func (_fa *ContentStreamOperations )Bytes ()[]byte {var _cf _bc .Buffer ;for _ ,_bd :=range *_fa {if _bd ==nil {continue ;};if _bd .Operand =="\u0042\u0049"{_cf .WriteString (_bd .Operand +"\u000a");_cf .WriteString (_bd .Params [0].WriteString ());}else {for _ ,_db :=range _bd .Params {_cf .WriteString (_db .WriteString ());
_cf .WriteString ("\u0020");};_cf .WriteString (_bd .Operand +"\u000a");};};return _cf .Bytes ();};

// Add_cs appends 'cs' operand to the content stream:
// Same as CS but for non-stroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_cff *ContentCreator )Add_cs (name _ed .PdfObjectName )*ContentCreator {_ba :=ContentStreamOperation {};_ba .Operand ="\u0063\u0073";_ba .Params =_fgfc ([]_ed .PdfObjectName {name });_cff ._ce =append (_cff ._ce ,&_ba );return _cff ;};

// Add_Tstar appends 'T*' operand to the content stream:
// Move to the start of next line.
//
// See section 9.4.2 "Text Positioning Operators" and
// Table 108 (pp. 257-258 PDF32000_2008).
func (_fece *ContentCreator )Add_Tstar ()*ContentCreator {_ffeb :=ContentStreamOperation {};_ffeb .Operand ="\u0054\u002a";_fece ._ce =append (_fece ._ce ,&_ffeb );return _fece ;};func _dfdb (_bbee _ca .PdfColorspace )bool {_ ,_deda :=_bbee .(*_ca .PdfColorspaceSpecialPattern );
return _deda ;};func (_edad *ContentStreamProcessor )handleCommand_SCN (_aaae *ContentStreamOperation ,_bfag *_ca .PdfPageResources )error {_fgdb :=_edad ._aead .ColorspaceStroking ;if !_dfdb (_fgdb ){if len (_aaae .Params )!=_fgdb .GetNumComponents (){_eb .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0061\u0072\u0061m\u0065\u0074\u0065\u0072\u0073\u0020\u0066\u006f\u0072\u0020S\u0043");
_eb .Log .Debug ("\u004e\u0075mb\u0065\u0072\u0020%\u0064\u0020\u006e\u006ft m\u0061tc\u0068\u0069\u006e\u0067\u0020\u0063\u006flo\u0072\u0073\u0070\u0061\u0063\u0065\u0020%\u0054",len (_aaae .Params ),_fgdb );return _b .New ("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0073");
};};_aafe ,_bbc :=_fgdb .ColorFromPdfObjects (_aaae .Params );if _bbc !=nil {return _bbc ;};_edad ._aead .ColorStroking =_aafe ;return nil ;};

// Add_B appends 'B' operand to the content stream:
// Fill and then stroke the path (nonzero winding number rule).
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_agd *ContentCreator )Add_B ()*ContentCreator {_efd :=ContentStreamOperation {};_efd .Operand ="\u0042";_agd ._ce =append (_agd ._ce ,&_efd );return _agd ;};

// Parse parses all commands in content stream, returning a list of operation data.
func (_bfad *ContentStreamParser )Parse ()(*ContentStreamOperations ,error ){_eda :=ContentStreamOperations {};for {_fcd :=ContentStreamOperation {};for {_cea ,_afge ,_edfb :=_bfad .parseObject ();if _edfb !=nil {if _edfb ==_a .EOF {return &_eda ,nil ;
};return &_eda ,_edfb ;};if _afge {_fcd .Operand ,_ =_ed .GetStringVal (_cea );_eda =append (_eda ,&_fcd );break ;}else {_fcd .Params =append (_fcd .Params ,_cea );};};if _fcd .Operand =="\u0042\u0049"{_eadg ,_cfb :=_bfad .ParseInlineImage ();if _cfb !=nil {return &_eda ,_cfb ;
};_fcd .Params =append (_fcd .Params ,_eadg );};};};

// Add_S appends 'S' operand to the content stream: Stroke the path.
//
// See section 8.5.3 "Path Painting Operators" and Table 60 (p. 143 PDF32000_2008).
func (_bdc *ContentCreator )Add_S ()*ContentCreator {_ae :=ContentStreamOperation {};_ae .Operand ="\u0053";_bdc ._ce =append (_bdc ._ce ,&_ae );return _bdc ;};

// Add_BMC appends 'BMC' operand to the content stream:
// Begins a marked-content sequence terminated by a balancing EMC operator.
// `tag` shall be a name object indicating the role or significance of
// the sequence.
//
// See section 14.6 "Marked Content" and Table 320 (p. 561 PDF32000_2008).
func (_ffa *ContentCreator )Add_BMC (tag _ed .PdfObjectName )*ContentCreator {_eef :=ContentStreamOperation {};_eef .Operand ="\u0042\u004d\u0043";_eef .Params =_fgfc ([]_ed .PdfObjectName {tag });_ffa ._ce =append (_ffa ._ce ,&_eef );return _ffa ;};func _abc (_edbc *ContentStreamInlineImage ,_dbed *_ed .PdfObjectDictionary )(*_ed .LZWEncoder ,error ){_ccd :=_ed .NewLZWEncoder ();
if _dbed ==nil {if _edbc .DecodeParms !=nil {_fgd ,_daf :=_ed .GetDict (_edbc .DecodeParms );if !_daf {_eb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0064\u0069\u0063\u0074\u0069on\u0061\u0072\u0079 \u0028%\u0054\u0029",_edbc .DecodeParms );
return nil ,_g .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073");};_dbed =_fgd ;};};if _dbed ==nil {return _ccd ,nil ;};_ceca :=_dbed .Get ("E\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");
if _ceca !=nil {_gaed ,_efgd :=_ceca .(*_ed .PdfObjectInteger );if !_efgd {_eb .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u003a \u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u006e\u0075\u006d\u0065\u0072i\u0063 \u0028\u0025\u0054\u0029",_ceca );
return nil ,_g .Errorf ("\u0069\u006e\u0076\u0061li\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065");};if *_gaed !=0&&*_gaed !=1{return nil ,_g .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0045\u0061\u0072\u006c\u0079\u0043\u0068\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075e\u0020\u0028\u006e\u006f\u0074 \u0030\u0020o\u0072\u0020\u0031\u0029");
};_ccd .EarlyChange =int (*_gaed );}else {_ccd .EarlyChange =1;};_ceca =_dbed .Get ("\u0050r\u0065\u0064\u0069\u0063\u0074\u006fr");if _ceca !=nil {_gcb ,_aaf :=_ceca .(*_ed .PdfObjectInteger );if !_aaf {_eb .Log .Debug ("E\u0072\u0072\u006f\u0072\u003a\u0020\u0050\u0072\u0065d\u0069\u0063\u0074\u006f\u0072\u0020\u0073pe\u0063\u0069\u0066\u0069e\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u006f\u0074 n\u0075\u006de\u0072\u0069\u0063\u0020\u0028\u0025\u0054\u0029",_ceca );
return nil ,_g .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0072\u0065\u0064i\u0063\u0074\u006f\u0072");};_ccd .Predictor =int (*_gcb );};_ceca =_dbed .Get ("\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
if _ceca !=nil {_dbaa ,_cbd :=_ceca .(*_ed .PdfObjectInteger );if !_cbd {_eb .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0049n\u0076\u0061\u006c\u0069\u0064\u0020\u0042i\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");
return nil ,_g .Errorf ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020\u0042\u0069\u0074\u0073\u0050e\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074");};_ccd .BitsPerComponent =int (*_dbaa );};if _ccd .Predictor > 1{_ccd .Columns =1;_ceca =_dbed .Get ("\u0043o\u006c\u0075\u006d\u006e\u0073");
if _ceca !=nil {_ged ,_abfg :=_ceca .(*_ed .PdfObjectInteger );if !_abfg {return nil ,_g .Errorf ("\u0070r\u0065\u0064\u0069\u0063\u0074\u006f\u0072\u0020\u0063\u006f\u006cu\u006d\u006e\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");};_ccd .Columns =int (*_ged );
};_ccd .Colors =1;_ceca =_dbed .Get ("\u0043\u006f\u006c\u006f\u0072\u0073");if _ceca !=nil {_aaea ,_baf :=_ceca .(*_ed .PdfObjectInteger );if !_baf {return nil ,_g .Errorf ("\u0070\u0072\u0065d\u0069\u0063\u0074\u006fr\u0020\u0063\u006f\u006c\u006f\u0072\u0073 \u006e\u006f\u0074\u0020\u0061\u006e\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072");
};_ccd .Colors =int (*_aaea );};};_eb .Log .Trace ("\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0070\u0061\u0072\u0061\u006ds\u003a\u0020\u0025\u0073",_dbed .String ());return _ccd ,nil ;};func _fgfc (_bage []_ed .PdfObjectName )[]_ed .PdfObject {var _gaa []_ed .PdfObject ;
for _ ,_fbc :=range _bage {_gaa =append (_gaa ,_ed .MakeName (string (_fbc )));};return _gaa ;};func (_cbc *ContentStreamParser )parseDict ()(*_ed .PdfObjectDictionary ,error ){_eb .Log .Trace ("\u0052\u0065\u0061\u0064i\u006e\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u006e\u0074 \u0073t\u0072\u0065\u0061\u006d\u0020\u0064\u0069c\u0074\u0021");
_bea :=_ed .MakeDict ();_cfdb ,_ :=_cbc ._aeg .ReadByte ();if _cfdb !='<'{return nil ,_b .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");};_cfdb ,_ =_cbc ._aeg .ReadByte ();if _cfdb !='<'{return nil ,_b .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
};for {_cbc .skipSpaces ();_decbe ,_ega :=_cbc ._aeg .Peek (2);if _ega !=nil {return nil ,_ega ;};_eb .Log .Trace ("D\u0069c\u0074\u0020\u0070\u0065\u0065\u006b\u003a\u0020%\u0073\u0020\u0028\u0025 x\u0029\u0021",string (_decbe ),string (_decbe ));if (_decbe [0]=='>')&&(_decbe [1]=='>'){_eb .Log .Trace ("\u0045\u004f\u0046\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
_cbc ._aeg .ReadByte ();_cbc ._aeg .ReadByte ();break ;};_eb .Log .Trace ("\u0050a\u0072s\u0065\u0020\u0074\u0068\u0065\u0020\u006e\u0061\u006d\u0065\u0021");_feace ,_ega :=_cbc .parseName ();_eb .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_feace );
if _ega !=nil {_eb .Log .Debug ("E\u0052\u0052\u004f\u0052\u0020\u0052e\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006ea\u006d\u0065\u0020e\u0072r\u0020\u0025\u0073",_ega );return nil ,_ega ;};if len (_feace )> 4&&_feace [len (_feace )-4:]=="\u006e\u0075\u006c\u006c"{_acg :=_feace [0:len (_feace )-4];
_eb .Log .Trace ("\u0054\u0061\u006b\u0069n\u0067\u0020\u0063\u0061\u0072\u0065\u0020\u006f\u0066\u0020n\u0075l\u006c\u0020\u0062\u0075\u0067\u0020\u0028%\u0073\u0029",_feace );_eb .Log .Trace ("\u004e\u0065\u0077\u0020ke\u0079\u0020\u0022\u0025\u0073\u0022\u0020\u003d\u0020\u006e\u0075\u006c\u006c",_acg );
_cbc .skipSpaces ();_bdge ,_ :=_cbc ._aeg .Peek (1);if _bdge [0]=='/'{_bea .Set (_acg ,_ed .MakeNull ());continue ;};};_cbc .skipSpaces ();_fcg ,_ ,_ega :=_cbc .parseObject ();if _ega !=nil {return nil ,_ega ;};_bea .Set (_feace ,_fcg );_eb .Log .Trace ("\u0064\u0069\u0063\u0074\u005b\u0025\u0073\u005d\u0020\u003d\u0020\u0025\u0073",_feace ,_fcg .String ());
};return _bea ,nil ;};const (HandlerConditionEnumOperand HandlerConditionEnum =iota ;HandlerConditionEnumAllOperands ;);

// Transform returns coordinates x, y transformed by the CTM.
func (_acge *GraphicsState )Transform (x ,y float64 )(float64 ,float64 ){return _acge .CTM .Transform (x ,y );};

// ContentStreamParser represents a content stream parser for parsing content streams in PDFs.
type ContentStreamParser struct{_aeg *_be .Reader };func (_ggdf *ContentStreamParser )parseBool ()(_ed .PdfObjectBool ,error ){_efef ,_eed :=_ggdf ._aeg .Peek (4);if _eed !=nil {return _ed .PdfObjectBool (false ),_eed ;};if (len (_efef )>=4)&&(string (_efef [:4])=="\u0074\u0072\u0075\u0065"){_ggdf ._aeg .Discard (4);
return _ed .PdfObjectBool (true ),nil ;};_efef ,_eed =_ggdf ._aeg .Peek (5);if _eed !=nil {return _ed .PdfObjectBool (false ),_eed ;};if (len (_efef )>=5)&&(string (_efef [:5])=="\u0066\u0061\u006cs\u0065"){_ggdf ._aeg .Discard (5);return _ed .PdfObjectBool (false ),nil ;
};return _ed .PdfObjectBool (false ),_b .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// Add_Tj appends 'Tj' operand to the content stream:
// Show a text string.
//
// See section 9.4.3 "Text Showing Operators" and
// Table 209 (pp. 258-259 PDF32000_2008).
func (_bcc *ContentCreator )Add_Tj (textstr _ed .PdfObjectString )*ContentCreator {_ddf :=ContentStreamOperation {};_ddf .Operand ="\u0054\u006a";_ddf .Params =_fabe ([]_ed .PdfObjectString {textstr });_bcc ._ce =append (_bcc ._ce ,&_ddf );return _bcc ;
};

// Add_v appends 'v' operand to the content stream: Append a Bezier curve to the current path from the
// current point to (x3,y3) with the current point and (x2,y2) as control points.
//
// See section 8.5.2 "Path Construction Operators" and Table 59 (pp. 140-141 PDF32000_2008).
func (_fga *ContentCreator )Add_v (x2 ,y2 ,x3 ,y3 float64 )*ContentCreator {_ead :=ContentStreamOperation {};_ead .Operand ="\u0076";_ead .Params =_egda ([]float64 {x2 ,y2 ,x3 ,y3 });_fga ._ce =append (_fga ._ce ,&_ead );return _fga ;};

// ContentStreamInlineImage is a representation of an inline image in a Content stream. Everything between the BI and EI operands.
// ContentStreamInlineImage implements the core.PdfObject interface although strictly it is not a PDF object.
type ContentStreamInlineImage struct{BitsPerComponent _ed .PdfObject ;ColorSpace _ed .PdfObject ;Decode _ed .PdfObject ;DecodeParms _ed .PdfObject ;Filter _ed .PdfObject ;Height _ed .PdfObject ;ImageMask _ed .PdfObject ;Intent _ed .PdfObject ;Interpolate _ed .PdfObject ;
Width _ed .PdfObject ;_dage []byte ;_bafa *_f .ImageBase ;};

// Add_g appends 'g' operand to the content stream:
// Same as G but used for nonstroking operations.
//
// See section 8.6.8 "Colour Operators" and Table 74 (p. 179-180 PDF32000_2008).
func (_ede *ContentCreator )Add_g (gray float64 )*ContentCreator {_gfa :=ContentStreamOperation {};_gfa .Operand ="\u0067";_gfa .Params =_egda ([]float64 {gray });_ede ._ce =append (_ede ._ce ,&_gfa );return _ede ;};

// AddHandler adds a new ContentStreamProcessor `handler` of type `condition` for `operand`.
func (_dbf *ContentStreamProcessor )AddHandler (condition HandlerConditionEnum ,operand string ,handler HandlerFunc ){_gegf :=handlerEntry {};_gegf .Condition =condition ;_gegf .Operand =operand ;_gegf .Handler =handler ;_dbf ._aade =append (_dbf ._aade ,_gegf );
};

// ParseInlineImage parses an inline image from a content stream, both reading its properties and binary data.
// When called, "BI" has already been read from the stream.  This function
// finishes reading through "EI" and then returns the ContentStreamInlineImage.
func (_fge *ContentStreamParser )ParseInlineImage ()(*ContentStreamInlineImage ,error ){_dfc :=ContentStreamInlineImage {};for {_fge .skipSpaces ();_gbgd ,_befgf ,_ccefb :=_fge .parseObject ();if _ccefb !=nil {return nil ,_ccefb ;};if !_befgf {_gfe ,_fda :=_ed .GetName (_gbgd );
if !_fda {_eb .Log .Debug ("\u0049\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_gbgd );
return nil ,_g .Errorf ("\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067e\u0020\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0020\u0028\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u0029\u0020\u002d\u0020\u0025T",_gbgd );
};_cbb ,_gfgb ,_cac :=_fge .parseObject ();if _cac !=nil {return nil ,_cac ;};if _gfgb {return nil ,_g .Errorf ("\u006eo\u0074\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0069\u006e\u0067 \u0061\u006e\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");};
switch *_gfe {case "\u0042\u0050\u0043","\u0042\u0069t\u0073\u0050\u0065r\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074":_dfc .BitsPerComponent =_cbb ;case "\u0043\u0053","\u0043\u006f\u006c\u006f\u0072\u0053\u0070\u0061\u0063\u0065":_dfc .ColorSpace =_cbb ;
case "\u0044","\u0044\u0065\u0063\u006f\u0064\u0065":_dfc .Decode =_cbb ;case "\u0044\u0050","D\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0072\u006d\u0073":_dfc .DecodeParms =_cbb ;case "\u0046","\u0046\u0069\u006c\u0074\u0065\u0072":_dfc .Filter =_cbb ;
case "\u0048","\u0048\u0065\u0069\u0067\u0068\u0074":_dfc .Height =_cbb ;case "\u0049\u004d","\u0049m\u0061\u0067\u0065\u004d\u0061\u0073k":_dfc .ImageMask =_cbb ;case "\u0049\u006e\u0074\u0065\u006e\u0074":_dfc .Intent =_cbb ;case "\u0049","I\u006e\u0074\u0065\u0072\u0070\u006f\u006c\u0061\u0074\u0065":_dfc .Interpolate =_cbb ;
case "\u0057","\u0057\u0069\u0064t\u0068":_dfc .Width =_cbb ;case "\u004c\u0065\u006e\u0067\u0074\u0068","\u0053u\u0062\u0074\u0079\u0070\u0065","\u0054\u0079\u0070\u0065":_eb .Log .Debug ("\u0049\u0067\u006e\u006fr\u0069\u006e\u0067\u0020\u0069\u006e\u006c\u0069\u006e\u0065 \u0070a\u0072\u0061\u006d\u0065\u0074\u0065\u0072 \u0025\u0073",*_gfe );
default:return nil ,_g .Errorf ("\u0075\u006e\u006b\u006e\u006f\u0077n\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065 \u0070\u0061\u0072\u0061\u006d\u0065\u0074e\u0072\u0020\u0025\u0073",*_gfe );};};if _befgf {_bcg ,_gece :=_gbgd .(*_ed .PdfObjectString );
if !_gece {return nil ,_g .Errorf ("\u0066a\u0069\u006ce\u0064\u0020\u0074o\u0020\u0072\u0065\u0061\u0064\u0020\u0069n\u006c\u0069\u006e\u0065\u0020\u0069m\u0061\u0067\u0065\u0020\u002d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");
};if _bcg .Str ()=="\u0045\u0049"{_eb .Log .Trace ("\u0049n\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020f\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e\u002e\u002e");return &_dfc ,nil ;}else if _bcg .Str ()=="\u0049\u0044"{_eb .Log .Trace ("\u0049\u0044\u0020\u0073\u0074\u0061\u0072\u0074");
_cdg ,_gage :=_fge ._aeg .Peek (1);if _gage !=nil {return nil ,_gage ;};if _ed .IsWhiteSpace (_cdg [0]){_fge ._aeg .Discard (1);};_dfc ._dage =[]byte {};_dbc :=0;var _gdbb []byte ;for {_gda ,_adbf :=_fge ._aeg .ReadByte ();if _adbf !=nil {_eb .Log .Debug ("\u0055\u006e\u0061\u0062\u006ce\u0020\u0074\u006f\u0020\u0066\u0069\u006e\u0064\u0020\u0065\u006e\u0064\u0020o\u0066\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0045\u0049\u0020\u0069\u006e\u0020\u0069\u006e\u006c\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0061\u0074a");
return nil ,_adbf ;};if _dbc ==0{if _ed .IsWhiteSpace (_gda ){_gdbb =[]byte {};_gdbb =append (_gdbb ,_gda );_dbc =1;}else if _gda =='E'{_gdbb =append (_gdbb ,_gda );_dbc =2;}else {_dfc ._dage =append (_dfc ._dage ,_gda );};}else if _dbc ==1{_gdbb =append (_gdbb ,_gda );
if _gda =='E'{_dbc =2;}else {_dfc ._dage =append (_dfc ._dage ,_gdbb ...);_gdbb =[]byte {};if _ed .IsWhiteSpace (_gda ){_dbc =1;}else {_dbc =0;};};}else if _dbc ==2{_gdbb =append (_gdbb ,_gda );if _gda =='I'{_dbc =3;}else {_dfc ._dage =append (_dfc ._dage ,_gdbb ...);
_gdbb =[]byte {};_dbc =0;};}else if _dbc ==3{_gdbb =append (_gdbb ,_gda );if _ed .IsWhiteSpace (_gda ){_aecf ,_bgeb :=_fge ._aeg .Peek (20);if _bgeb !=nil &&_bgeb !=_a .EOF {return nil ,_bgeb ;};_ebb :=NewContentStreamParser (string (_aecf ));_agbg :=true ;
for _adea :=0;_adea < 3;_adea ++{_gfga ,_ccefd ,_dgba :=_ebb .parseObject ();if _dgba !=nil {if _dgba ==_a .EOF {break ;};_agbg =false ;continue ;};if _ccefd &&!_bga (_gfga .String ()){_agbg =false ;break ;};};if _agbg {if len (_dfc ._dage )> 100{_eb .Log .Trace ("\u0049\u006d\u0061\u0067\u0065\u0020\u0073\u0074\u0072\u0065\u0061m\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025\u0020\u0078 \u002e\u002e\u002e",len (_dfc ._dage ),_dfc ._dage [:100]);
}else {_eb .Log .Trace ("\u0049\u006d\u0061\u0067e \u0073\u0074\u0072\u0065\u0061\u006d\u0020\u0028\u0025\u0064\u0029\u003a\u0020\u0025 \u0078",len (_dfc ._dage ),_dfc ._dage );};return &_dfc ,nil ;};};_dfc ._dage =append (_dfc ._dage ,_gdbb ...);_gdbb =[]byte {};
_dbc =0;};};};};};};