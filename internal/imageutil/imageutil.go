//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package imageutil ;import (_fa "encoding/binary";_b "errors";_ef "fmt";_ee "github.com/laduygaga/unipdf/v3/common";_c "github.com/laduygaga/unipdf/v3/internal/bitwise";_e "image";_da "image/color";_bb "image/draw";_d "math";);func _cfbgb (_abca *Monochrome ,_edeb ,_ded ,_dedg ,_dgefg int ,_bdbc RasterOperator ,_fgfg *Monochrome ,_cgab ,_deaa int )error {var (_dgb bool ;
_fbe bool ;_dfef byte ;_ffafg int ;_ebec int ;_bagba int ;_eead int ;_ecegg bool ;_fede int ;_baeab int ;_dbge int ;_bacc bool ;_eaafa byte ;_abff int ;_daae int ;_dedb int ;_eaggg byte ;_adgb int ;_egdaa int ;_acecc uint ;_cbce uint ;_cbfg byte ;_effbc shift ;
_eeeaf bool ;_acg bool ;_fbef ,_bfge int ;);if _cgab &7!=0{_egdaa =8-(_cgab &7);};if _edeb &7!=0{_ebec =8-(_edeb &7);};if _egdaa ==0&&_ebec ==0{_cbfg =_baf [0];}else {if _ebec > _egdaa {_acecc =uint (_ebec -_egdaa );}else {_acecc =uint (8-(_egdaa -_ebec ));
};_cbce =8-_acecc ;_cbfg =_baf [_acecc ];};if (_edeb &7)!=0{_dgb =true ;_ffafg =8-(_edeb &7);_dfef =_baf [_ffafg ];_bagba =_abca .BytesPerLine *_ded +(_edeb >>3);_eead =_fgfg .BytesPerLine *_deaa +(_cgab >>3);_adgb =8-(_cgab &7);if _ffafg > _adgb {_effbc =_abgf ;
if _dedg >=_egdaa {_eeeaf =true ;};}else {_effbc =_gceg ;};};if _dedg < _ffafg {_fbe =true ;_dfef &=_cgda [8-_ffafg +_dedg ];};if !_fbe {_fede =(_dedg -_ffafg )>>3;if _fede !=0{_ecegg =true ;_baeab =_abca .BytesPerLine *_ded +((_edeb +_ebec )>>3);_dbge =_fgfg .BytesPerLine *_deaa +((_cgab +_ebec )>>3);
};};_abff =(_edeb +_dedg )&7;if !(_fbe ||_abff ==0){_bacc =true ;_eaafa =_cgda [_abff ];_daae =_abca .BytesPerLine *_ded +((_edeb +_ebec )>>3)+_fede ;_dedb =_fgfg .BytesPerLine *_deaa +((_cgab +_ebec )>>3)+_fede ;if _abff > int (_cbce ){_acg =true ;};};
switch _bdbc {case PixSrc :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};
_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],_eaggg ,_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );
_abca .Data [_baeab +_bfge ]=_eaggg ;};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );
};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],_eaggg ,_eaafa );_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};case PixNotSrc :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );
};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],^_eaggg ,_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;_bfge < _fede ;
_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]=^_eaggg ;};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;
if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],^_eaggg ,_eaafa );_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};case PixSrcOrDst :if _dgb {for _fbef =0;_fbef < _dgefg ;
_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],_eaggg |_abca .Data [_bagba ],_dfef );
_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]|=_eaggg ;
};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],_eaggg |_abca .Data [_daae ],_eaafa );
_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};case PixSrcAndDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );
};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],_eaggg &_abca .Data [_bagba ],_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;
_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]&=_eaggg ;};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;
_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],_eaggg &_abca .Data [_daae ],_eaafa );_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;
};};case PixSrcXorDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],_eaggg ^_abca .Data [_bagba ],_dfef );
_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]^=_eaggg ;
};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],_eaggg ^_abca .Data [_daae ],_eaafa );
_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};case PixNotSrcOrDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );
};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],^_eaggg |_abca .Data [_bagba ],_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;
_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]|=^_eaggg ;};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;
_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],^_eaggg |_abca .Data [_daae ],_eaafa );_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;
};};case PixNotSrcAndDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],^_eaggg &_abca .Data [_bagba ],_dfef );
_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]&=^_eaggg ;
};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],^_eaggg &_abca .Data [_daae ],_eaafa );
_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};case PixSrcOrNotDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );
};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],_eaggg |^_abca .Data [_bagba ],_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;
_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]=_eaggg |^_abca .Data [_baeab +_bfge ];};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};
};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],_eaggg |^_abca .Data [_daae ],_eaafa );_daae +=_abca .BytesPerLine ;
_dedb +=_fgfg .BytesPerLine ;};};case PixSrcAndNotDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;
};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],_eaggg &^_abca .Data [_bagba ],_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );
_abca .Data [_baeab +_bfge ]=_eaggg &^_abca .Data [_baeab +_bfge ];};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );
};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],_eaggg &^_abca .Data [_daae ],_eaafa );_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};case PixNotPixSrcOrDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;
if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],^(_eaggg |_abca .Data [_bagba ]),_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;
};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]=^(_eaggg |_abca .Data [_baeab +_bfge ]);
};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],^(_eaggg |_abca .Data [_daae ]),_eaafa );
_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};case PixNotPixSrcAndDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );
};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],^(_eaggg &_abca .Data [_bagba ]),_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;
_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]=^(_eaggg &_abca .Data [_baeab +_bfge ]);};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;
};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],^(_eaggg &_abca .Data [_daae ]),_eaafa );
_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};case PixNotPixSrcXorDst :if _dgb {for _fbef =0;_fbef < _dgefg ;_fbef ++{if _effbc ==_abgf {_eaggg =_fgfg .Data [_eead ]<<_acecc ;if _eeeaf {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_eead +1]>>_cbce ,_cbfg );
};}else {_eaggg =_fgfg .Data [_eead ]>>_cbce ;};_abca .Data [_bagba ]=_ggaf (_abca .Data [_bagba ],^(_eaggg ^_abca .Data [_bagba ]),_dfef );_bagba +=_abca .BytesPerLine ;_eead +=_fgfg .BytesPerLine ;};};if _ecegg {for _fbef =0;_fbef < _dgefg ;_fbef ++{for _bfge =0;
_bfge < _fede ;_bfge ++{_eaggg =_ggaf (_fgfg .Data [_dbge +_bfge ]<<_acecc ,_fgfg .Data [_dbge +_bfge +1]>>_cbce ,_cbfg );_abca .Data [_baeab +_bfge ]=^(_eaggg ^_abca .Data [_baeab +_bfge ]);};_baeab +=_abca .BytesPerLine ;_dbge +=_fgfg .BytesPerLine ;
};};if _bacc {for _fbef =0;_fbef < _dgefg ;_fbef ++{_eaggg =_fgfg .Data [_dedb ]<<_acecc ;if _acg {_eaggg =_ggaf (_eaggg ,_fgfg .Data [_dedb +1]>>_cbce ,_cbfg );};_abca .Data [_daae ]=_ggaf (_abca .Data [_daae ],^(_eaggg ^_abca .Data [_daae ]),_eaafa );
_daae +=_abca .BytesPerLine ;_dedb +=_fgfg .BytesPerLine ;};};default:_ee .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_bdbc );
return _b .New ("\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");};return nil ;};func _bdf (_ac ,_gc *Monochrome )(_eea error ){_ad :=_gc .BytesPerLine ;
_ff :=_ac .BytesPerLine ;var (_ae byte ;_cc uint16 ;_fe ,_cbe ,_aec ,_ccc ,_fb int ;);for _aec =0;_aec < _gc .Height ;_aec ++{_fe =_aec *_ad ;_cbe =2*_aec *_ff ;for _ccc =0;_ccc < _ad ;_ccc ++{_ae =_gc .Data [_fe +_ccc ];_cc =_fcd [_ae ];_fb =_cbe +_ccc *2;
if _ac .BytesPerLine !=_gc .BytesPerLine *2&&(_ccc +1)*2> _ac .BytesPerLine {_eea =_ac .setByte (_fb ,byte (_cc >>8));}else {_eea =_ac .setTwoBytes (_fb ,_cc );};if _eea !=nil {return _eea ;};};for _ccc =0;_ccc < _ff ;_ccc ++{_fb =_cbe +_ff +_ccc ;_ae =_ac .Data [_cbe +_ccc ];
if _eea =_ac .setByte (_fb ,_ae );_eea !=nil {return _eea ;};};};return nil ;};func _cfbg (_dgf *Monochrome ,_gg ,_gge int )(*Monochrome ,error ){if _dgf ==nil {return nil ,_b .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gg <=0||_gge <=0{return nil ,_b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _gg ==_gge {if _gg ==1{return _dgf .copy (),nil ;};if _gg ==2||_gg ==4||_gg ==8{_aef ,_bc :=_db (_dgf ,_gg );
if _bc !=nil {return nil ,_bc ;};return _aef ,nil ;};};_eb :=_gg *_dgf .Width ;_dcd :=_gge *_dgf .Height ;_ebc :=_cagd (_eb ,_dcd );_aecf :=_ebc .BytesPerLine ;var (_gea ,_dae ,_fd ,_efa ,_cef int ;_egg byte ;_ffe error ;);for _dae =0;_dae < _dgf .Height ;
_dae ++{_gea =_gge *_dae *_aecf ;for _fd =0;_fd < _dgf .Width ;_fd ++{if _eaa :=_dgf .getBitAt (_fd ,_dae );_eaa {_cef =_gg *_fd ;for _efa =0;_efa < _gg ;_efa ++{_ebc .setIndexedBit (_gea *8+_cef +_efa );};};};for _efa =1;_efa < _gge ;_efa ++{_cbeb :=_gea +_efa *_aecf ;
for _gde :=0;_gde < _aecf ;_gde ++{if _egg ,_ffe =_ebc .getByte (_gea +_gde );_ffe !=nil {return nil ,_ffe ;};if _ffe =_ebc .setByte (_cbeb +_gde ,_egg );_ffe !=nil {return nil ,_ffe ;};};};};return _ebc ,nil ;};func _effe ()(_bcd [256]uint64 ){for _fea :=0;
_fea < 256;_fea ++{if _fea &0x01!=0{_bcd [_fea ]|=0xff;};if _fea &0x02!=0{_bcd [_fea ]|=0xff00;};if _fea &0x04!=0{_bcd [_fea ]|=0xff0000;};if _fea &0x08!=0{_bcd [_fea ]|=0xff000000;};if _fea &0x10!=0{_bcd [_fea ]|=0xff00000000;};if _fea &0x20!=0{_bcd [_fea ]|=0xff0000000000;
};if _fea &0x40!=0{_bcd [_fea ]|=0xff000000000000;};if _fea &0x80!=0{_bcd [_fea ]|=0xff00000000000000;};};return _bcd ;};var _ Gray =&Monochrome {};func (_degb *Gray2 )SetGray (x ,y int ,gray _da .Gray ){_cac :=_eafb (gray );_ddccf :=y *_degb .BytesPerLine ;
_bdg :=_ddccf +(x >>2);if _bdg >=len (_degb .Data ){return ;};_dgfgd :=_cac .Y >>6;_degb .Data [_bdg ]=(_degb .Data [_bdg ]&(^(0xc0>>uint (2*((x )&3)))))|(_dgfgd <<uint (6-2*(x &3)));};var _ Image =&Gray2 {};func (_bbcc *RGBA32 )Set (x ,y int ,c _da .Color ){_edaf :=y *_bbcc .Width +x ;
_gcbce :=3*_edaf ;if _gcbce +2>=len (_bbcc .Data ){return ;};_cgcb :=_da .RGBAModel .Convert (c ).(_da .RGBA );_bbcc .setRGBA (_edaf ,_cgcb );};func _effc (_dggc _da .NRGBA )_da .Gray {var _baadf _da .NRGBA ;if _dggc ==_baadf {return _da .Gray {Y :0xff};
};_gdea ,_afbf ,_fge ,_ :=_dggc .RGBA ();_acef :=(19595*_gdea +38470*_afbf +7471*_fge +1<<15)>>24;return _da .Gray {Y :uint8 (_acef )};};func _ebee (_eeaf _da .NRGBA64 )_da .Gray {var _efac _da .NRGBA64 ;if _eeaf ==_efac {return _da .Gray {Y :0xff};};_gcf ,_abc ,_eceg ,_ :=_eeaf .RGBA ();
_dgcg :=(19595*_gcf +38470*_abc +7471*_eceg +1<<15)>>24;return _da .Gray {Y :uint8 (_dgcg )};};func _aga (_ecef _da .Gray )_da .NRGBA {return _da .NRGBA {R :_ecef .Y ,G :_ecef .Y ,B :_ecef .Y ,A :0xff}};func (_gdbe *Gray16 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtGray16BPC (x ,y ,_gdbe .BytesPerLine ,_gdbe .Data ,_gdbe .Decode );
};func _bee (){for _ddcb :=0;_ddcb < 256;_ddcb ++{_dbg [_ddcb ]=uint8 (_ddcb &0x1)+(uint8 (_ddcb >>1)&0x1)+(uint8 (_ddcb >>2)&0x1)+(uint8 (_ddcb >>3)&0x1)+(uint8 (_ddcb >>4)&0x1)+(uint8 (_ddcb >>5)&0x1)+(uint8 (_ddcb >>6)&0x1)+(uint8 (_ddcb >>7)&0x1);};
};func _cedf (_adgg RGBA ,_eefa Gray ,_ffbgc _e .Rectangle ){for _bfeg :=0;_bfeg < _ffbgc .Max .X ;_bfeg ++{for _bgcge :=0;_bgcge < _ffbgc .Max .Y ;_bgcge ++{_cbaf :=_fdbc (_adgg .RGBAAt (_bfeg ,_bgcge ));_eefa .SetGray (_bfeg ,_bgcge ,_cbaf );};};};type RGBA32 struct{ImageBase };
func IsPowerOf2 (n uint )bool {return n > 0&&(n &(n -1))==0};func (_bgfe *ImageBase )setEightFullBytes (_aaaa int ,_effac uint64 )error {if _aaaa +7> len (_bgfe .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_bgfe .Data [_aaaa ]=byte ((_effac &0xff00000000000000)>>56);_bgfe .Data [_aaaa +1]=byte ((_effac &0xff000000000000)>>48);_bgfe .Data [_aaaa +2]=byte ((_effac &0xff0000000000)>>40);_bgfe .Data [_aaaa +3]=byte ((_effac &0xff00000000)>>32);_bgfe .Data [_aaaa +4]=byte ((_effac &0xff000000)>>24);
_bgfe .Data [_aaaa +5]=byte ((_effac &0xff0000)>>16);_bgfe .Data [_aaaa +6]=byte ((_effac &0xff00)>>8);_bgfe .Data [_aaaa +7]=byte (_effac &0xff);return nil ;};func (_bgcg *Gray4 )SetGray (x ,y int ,g _da .Gray ){if x >=_bgcg .Width ||y >=_bgcg .Height {return ;
};g =_cfcd (g );_bgcg .setGray (x ,y ,g );};func RasterOperation (dest *Monochrome ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _dbbb (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );};func _aaf (_bbac *Monochrome ,_agf ...int )(_dag *Monochrome ,_gf error ){if _bbac ==nil {return nil ,_b .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if len (_agf )==0{return nil ,_b .New ("\u0074h\u0065\u0072e\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006f\u0066 \u0072\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e");
};_gcg :=_bed ();_dag =_bbac ;for _ ,_efaa :=range _agf {if _efaa <=0{break ;};_dag ,_gf =_eadc (_dag ,_efaa ,_gcg );if _gf !=nil {return nil ,_gf ;};};return _dag ,nil ;};func (_cfad *Gray16 )Set (x ,y int ,c _da .Color ){_agfc :=(y *_cfad .BytesPerLine /2+x )*2;
if _agfc +1>=len (_cfad .Data ){return ;};_fdfa :=_da .Gray16Model .Convert (c ).(_da .Gray16 );_cfad .Data [_agfc ],_cfad .Data [_agfc +1]=uint8 (_fdfa .Y >>8),uint8 (_fdfa .Y &0xff);};func _ebfb (_egbbd _da .Color )_da .Color {_gfd :=_da .GrayModel .Convert (_egbbd ).(_da .Gray );
return _cfcd (_gfd );};var (Gray2Model =_da .ModelFunc (_gged );Gray4Model =_da .ModelFunc (_ebfb );NRGBA16Model =_da .ModelFunc (_dcaa ););func (_cgba *Gray8 )Copy ()Image {return &Gray8 {ImageBase :_cgba .copy ()}};func (_egda *Gray2 )GrayAt (x ,y int )_da .Gray {_efbd ,_ :=ColorAtGray2BPC (x ,y ,_egda .BytesPerLine ,_egda .Data ,_egda .Decode );
return _efbd ;};var _ _e .Image =&NRGBA16 {};func _daaad (_gbcd _e .Image ,_efbed uint8 )*_e .Gray {_ggbf :=_gbcd .Bounds ();_bcgd :=_e .NewGray (_ggbf );var (_abdeg _da .Color ;_fafe _da .Gray ;);for _eabe :=0;_eabe < _ggbf .Max .X ;_eabe ++{for _ggcgd :=0;
_ggcgd < _ggbf .Max .Y ;_ggcgd ++{_abdeg =_gbcd .At (_eabe ,_ggcgd );_bcgd .Set (_eabe ,_ggcgd ,_abdeg );_fafe =_bcgd .GrayAt (_eabe ,_ggcgd );_bcgd .SetGray (_eabe ,_ggcgd ,_da .Gray {Y :_cdaf (_fafe .Y ,_efbed )});};};return _bcgd ;};func (_egdf *Gray4 )ColorModel ()_da .Model {return Gray4Model };
func _bed ()(_bbaa []byte ){_bbaa =make ([]byte ,256);for _bdcf :=0;_bdcf < 256;_bdcf ++{_bgd :=byte (_bdcf );_bbaa [_bgd ]=(_bgd &0x01)|((_bgd &0x04)>>1)|((_bgd &0x10)>>2)|((_bgd &0x40)>>3)|((_bgd &0x02)<<3)|((_bgd &0x08)<<2)|((_bgd &0x20)<<1)|(_bgd &0x80);
};return _bbaa ;};func _aaacf (_bdce _e .Image )(Image ,error ){if _bdbae ,_ecaf :=_bdce .(*NRGBA16 );_ecaf {return _bdbae .Copy (),nil ;};_beff :=_bdce .Bounds ();_agb ,_gcbc :=NewImage (_beff .Max .X ,_beff .Max .Y ,4,3,nil ,nil ,nil );if _gcbc !=nil {return nil ,_gcbc ;
};_eefaa (_bdce ,_agb ,_beff );return _agb ,nil ;};func GrayHistogram (g Gray )(_dcad [256]int ){switch _bfcbf :=g .(type ){case Histogramer :return _bfcbf .Histogram ();case _e .Image :_dade :=_bfcbf .Bounds ();for _cegg :=0;_cegg < _dade .Max .X ;_cegg ++{for _fafg :=0;
_fafg < _dade .Max .Y ;_fafg ++{_dcad [g .GrayAt (_cegg ,_fafg ).Y ]++;};};return _dcad ;default:return [256]int {};};};func (_add *Monochrome )clearBit (_ged ,_ddgd int ){_add .Data [_ged ]&=^(0x80>>uint (_ddgd &7))};func _aaga (_bbdb _e .Image )(Image ,error ){if _gefe ,_ebcg :=_bbdb .(*NRGBA32 );
_ebcg {return _gefe .Copy (),nil ;};_ggfb ,_beag ,_eaae :=_gag (_bbdb ,1);_ececg ,_cbdbc :=NewImage (_ggfb .Max .X ,_ggfb .Max .Y ,8,3,nil ,_eaae ,nil );if _cbdbc !=nil {return nil ,_cbdbc ;};_eefaa (_bbdb ,_ececg ,_ggfb );if len (_eaae )!=0&&!_beag {if _aaef :=_fcea (_eaae ,_ececg );
_aaef !=nil {return nil ,_aaef ;};};return _ececg ,nil ;};func ImgToBinary (i _e .Image ,threshold uint8 )*_e .Gray {switch _bffdb :=i .(type ){case *_e .Gray :if _egafb (_bffdb ){return _bffdb ;};return _aedef (_bffdb ,threshold );case *_e .Gray16 :return _dbde (_bffdb ,threshold );
default:return _daaad (_bffdb ,threshold );};};func (_dabc *RGBA32 )setRGBA (_egeed int ,_dafe _da .RGBA ){_bgdd :=3*_egeed ;_dabc .Data [_bgdd ]=_dafe .R ;_dabc .Data [_bgdd +1]=_dafe .G ;_dabc .Data [_bgdd +2]=_dafe .B ;if _egeed < len (_dabc .Alpha ){_dabc .Alpha [_egeed ]=_dafe .A ;
};};func (_fdfe *Gray16 )Copy ()Image {return &Gray16 {ImageBase :_fdfe .copy ()}};var _ Image =&RGBA32 {};func (_egc *Gray16 )ColorModel ()_da .Model {return _da .Gray16Model };func (_gbba *NRGBA16 )Copy ()Image {return &NRGBA16 {ImageBase :_gbba .copy ()}};
func (_geadaa *NRGBA64 )Base ()*ImageBase {return &_geadaa .ImageBase };func _gdef (_cdc ,_dfc int ,_bda []byte )*Monochrome {_fabe :=_cagd (_cdc ,_dfc );_fabe .Data =_bda ;return _fabe ;};func _db (_ede *Monochrome ,_cd int )(*Monochrome ,error ){if _ede ==nil {return nil ,_b .New ("\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _cd ==1{return _ede .copy (),nil ;};if !IsPowerOf2 (uint (_cd )){return nil ,_ef .Errorf ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006ci\u0064 \u0065x\u0070a\u006e\u0064\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",_cd );
};_cbd :=_ffb (_cd );return _cf (_ede ,_cd ,_cbd );};func _def (_fdaa Gray ,_aaggf CMYK ,_gbb _e .Rectangle ){for _efe :=0;_efe < _gbb .Max .X ;_efe ++{for _fdc :=0;_fdc < _gbb .Max .Y ;_fdc ++{_dcf :=_fdaa .GrayAt (_efe ,_fdc );_aaggf .SetCMYK (_efe ,_fdc ,_efd (_dcf ));
};};};type CMYK interface{CMYKAt (_ebg ,_eaab int )_da .CMYK ;SetCMYK (_dgge ,_fee int ,_eefc _da .CMYK );};func MonochromeThresholdConverter (threshold uint8 )ColorConverter {return &monochromeThresholdConverter {Threshold :threshold };};func (_ega *Monochrome )setGray (_cbef int ,_baabc _da .Gray ,_dfdb int ){if _baabc .Y ==0{_ega .clearBit (_dfdb ,_cbef );
}else {_ega .setGrayBit (_dfdb ,_cbef );};};func _gag (_beec _e .Image ,_dceg int )(_e .Rectangle ,bool ,[]byte ){_cceg :=_beec .Bounds ();var (_bcag bool ;_gdcg []byte ;);switch _edagd :=_beec .(type ){case SMasker :_bcag =_edagd .HasAlpha ();case NRGBA ,RGBA ,*_e .RGBA64 ,nrgba64 ,*_e .NYCbCrA :_gdcg =make ([]byte ,_cceg .Max .X *_cceg .Max .Y *_dceg );
case *_e .Paletted :var _bdcb bool ;for _ ,_fbfe :=range _edagd .Palette {_egde ,_bfbc ,_fabd ,_fefd :=_fbfe .RGBA ();if _egde ==0&&_bfbc ==0&&_fabd ==0&&_fefd !=0{_bdcb =true ;break ;};};if _bdcb {_gdcg =make ([]byte ,_cceg .Max .X *_cceg .Max .Y *_dceg );
};};return _cceg ,_bcag ,_gdcg ;};func _bfbf (_cacc _e .Image )(Image ,error ){if _edeg ,_ebcef :=_cacc .(*Gray4 );_ebcef {return _edeg .Copy (),nil ;};_dgcgc :=_cacc .Bounds ();_bcgg ,_ced :=NewImage (_dgcgc .Max .X ,_dgcgc .Max .Y ,4,1,nil ,nil ,nil );
if _ced !=nil {return nil ,_ced ;};_eggb (_cacc ,_bcgg ,_dgcgc );return _bcgg ,nil ;};func (_baea *Monochrome )setIndexedBit (_gbdg int ){_baea .Data [(_gbdg >>3)]|=0x80>>uint (_gbdg &7)};func (_fdge *NRGBA32 )Base ()*ImageBase {return &_fdge .ImageBase };
func (_efedb *NRGBA16 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtNRGBA16 (x ,y ,_efedb .Width ,_efedb .BytesPerLine ,_efedb .Data ,_efedb .Alpha ,_efedb .Decode );};func (_efec *ImageBase )newAlpha (){_cgga :=BytesPerLine (_efec .Width ,_efec .BitsPerComponent ,1);
_efec .Alpha =make ([]byte ,_efec .Height *_cgga );};func (_dadag *NRGBA16 )Validate ()error {if len (_dadag .Data )!=3*_dadag .Width *_dadag .Height /2{return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _dgcaa (_gfac *Monochrome ,_bbd ,_bfgd int ,_gbfe ,_bcfg int ,_bgag RasterOperator ){var (_fcde bool ;_cfdb bool ;_caba int ;_edef int ;_abb int ;_beed int ;_fdaaf bool ;_ddac byte ;);_bgeg :=8-(_bbd &7);_deag :=_baf [_bgeg ];_dgac :=_gfac .BytesPerLine *_bfgd +(_bbd >>3);
if _gbfe < _bgeg {_fcde =true ;_deag &=_cgda [8-_bgeg +_gbfe ];};if !_fcde {_caba =(_gbfe -_bgeg )>>3;if _caba !=0{_cfdb =true ;_edef =_dgac +1;};};_abb =(_bbd +_gbfe )&7;if !(_fcde ||_abb ==0){_fdaaf =true ;_ddac =_cgda [_abb ];_beed =_dgac +1+_caba ;
};var _fffe ,_dffa int ;switch _bgag {case PixClr :for _fffe =0;_fffe < _bcfg ;_fffe ++{_gfac .Data [_dgac ]=_ggaf (_gfac .Data [_dgac ],0x0,_deag );_dgac +=_gfac .BytesPerLine ;};if _cfdb {for _fffe =0;_fffe < _bcfg ;_fffe ++{for _dffa =0;_dffa < _caba ;
_dffa ++{_gfac .Data [_edef +_dffa ]=0x0;};_edef +=_gfac .BytesPerLine ;};};if _fdaaf {for _fffe =0;_fffe < _bcfg ;_fffe ++{_gfac .Data [_beed ]=_ggaf (_gfac .Data [_beed ],0x0,_ddac );_beed +=_gfac .BytesPerLine ;};};case PixSet :for _fffe =0;_fffe < _bcfg ;
_fffe ++{_gfac .Data [_dgac ]=_ggaf (_gfac .Data [_dgac ],0xff,_deag );_dgac +=_gfac .BytesPerLine ;};if _cfdb {for _fffe =0;_fffe < _bcfg ;_fffe ++{for _dffa =0;_dffa < _caba ;_dffa ++{_gfac .Data [_edef +_dffa ]=0xff;};_edef +=_gfac .BytesPerLine ;};
};if _fdaaf {for _fffe =0;_fffe < _bcfg ;_fffe ++{_gfac .Data [_beed ]=_ggaf (_gfac .Data [_beed ],0xff,_ddac );_beed +=_gfac .BytesPerLine ;};};case PixNotDst :for _fffe =0;_fffe < _bcfg ;_fffe ++{_gfac .Data [_dgac ]=_ggaf (_gfac .Data [_dgac ],^_gfac .Data [_dgac ],_deag );
_dgac +=_gfac .BytesPerLine ;};if _cfdb {for _fffe =0;_fffe < _bcfg ;_fffe ++{for _dffa =0;_dffa < _caba ;_dffa ++{_gfac .Data [_edef +_dffa ]=^(_gfac .Data [_edef +_dffa ]);};_edef +=_gfac .BytesPerLine ;};};if _fdaaf {for _fffe =0;_fffe < _bcfg ;_fffe ++{_gfac .Data [_beed ]=_ggaf (_gfac .Data [_beed ],^_gfac .Data [_beed ],_ddac );
_beed +=_gfac .BytesPerLine ;};};};};func _fffd (_cbff *Monochrome ,_bgbd ,_bdfa ,_fdcab ,_ggb int ,_daab RasterOperator ,_cgee *Monochrome ,_dee ,_bdggb int )error {var (_cdcg bool ;_abecf bool ;_fecc int ;_cecb int ;_cedd int ;_gbac bool ;_dffe byte ;
_afgg int ;_bagbf int ;_aeff int ;_gcdd ,_ccba int ;);_ebeb :=8-(_bgbd &7);_bcdg :=_baf [_ebeb ];_cadf :=_cbff .BytesPerLine *_bdfa +(_bgbd >>3);_dgag :=_cgee .BytesPerLine *_bdggb +(_dee >>3);if _fdcab < _ebeb {_cdcg =true ;_bcdg &=_cgda [8-_ebeb +_fdcab ];
};if !_cdcg {_fecc =(_fdcab -_ebeb )>>3;if _fecc > 0{_abecf =true ;_cecb =_cadf +1;_cedd =_dgag +1;};};_afgg =(_bgbd +_fdcab )&7;if !(_cdcg ||_afgg ==0){_gbac =true ;_dffe =_cgda [_afgg ];_bagbf =_cadf +1+_fecc ;_aeff =_dgag +1+_fecc ;};switch _daab {case PixSrc :for _gcdd =0;
_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],_cgee .Data [_dgag ],_bcdg );_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]=_cgee .Data [_cedd +_ccba ];
};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],_cgee .Data [_aeff ],_dffe );_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};
case PixNotSrc :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],^_cgee .Data [_dgag ],_bcdg );_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;
_ccba ++{_cbff .Data [_cecb +_ccba ]=^_cgee .Data [_cedd +_ccba ];};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],^_cgee .Data [_aeff ],_dffe );
_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixSrcOrDst :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],_cgee .Data [_dgag ]|_cbff .Data [_cadf ],_bcdg );_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;
};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]|=_cgee .Data [_cedd +_ccba ];};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],_cgee .Data [_aeff ]|_cbff .Data [_bagbf ],_dffe );
_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixSrcAndDst :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],_cgee .Data [_dgag ]&_cbff .Data [_cadf ],_bcdg );_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;
};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]&=_cgee .Data [_cedd +_ccba ];};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],_cgee .Data [_aeff ]&_cbff .Data [_bagbf ],_dffe );
_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixSrcXorDst :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],_cgee .Data [_dgag ]^_cbff .Data [_cadf ],_bcdg );_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;
};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]^=_cgee .Data [_cedd +_ccba ];};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],_cgee .Data [_aeff ]^_cbff .Data [_bagbf ],_dffe );
_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixNotSrcOrDst :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],^(_cgee .Data [_dgag ])|_cbff .Data [_cadf ],_bcdg );_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;
};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]|=^(_cgee .Data [_cedd +_ccba ]);};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],^(_cgee .Data [_aeff ])|_cbff .Data [_bagbf ],_dffe );
_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixNotSrcAndDst :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],^(_cgee .Data [_dgag ])&_cbff .Data [_cadf ],_bcdg );_cadf +=_cbff .BytesPerLine ;
_dgag +=_cgee .BytesPerLine ;};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]&=^_cgee .Data [_cedd +_ccba ];};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;
_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],^(_cgee .Data [_aeff ])&_cbff .Data [_bagbf ],_dffe );_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixSrcOrNotDst :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],_cgee .Data [_dgag ]|^(_cbff .Data [_cadf ]),_bcdg );
_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]=_cgee .Data [_cedd +_ccba ]|^(_cbff .Data [_cecb +_ccba ]);};_cecb +=_cbff .BytesPerLine ;
_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],_cgee .Data [_aeff ]|^(_cbff .Data [_bagbf ]),_dffe );_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixSrcAndNotDst :for _gcdd =0;
_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],_cgee .Data [_dgag ]&^(_cbff .Data [_cadf ]),_bcdg );_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;
_ccba ++{_cbff .Data [_cecb +_ccba ]=_cgee .Data [_cedd +_ccba ]&^(_cbff .Data [_cecb +_ccba ]);};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],_cgee .Data [_aeff ]&^(_cbff .Data [_bagbf ]),_dffe );
_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixNotPixSrcOrDst :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],^(_cgee .Data [_dgag ]|_cbff .Data [_cadf ]),_bcdg );_cadf +=_cbff .BytesPerLine ;
_dgag +=_cgee .BytesPerLine ;};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]=^(_cgee .Data [_cedd +_ccba ]|_cbff .Data [_cecb +_ccba ]);};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;
};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],^(_cgee .Data [_aeff ]|_cbff .Data [_bagbf ]),_dffe );_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixNotPixSrcAndDst :for _gcdd =0;
_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],^(_cgee .Data [_dgag ]&_cbff .Data [_cadf ]),_bcdg );_cadf +=_cbff .BytesPerLine ;_dgag +=_cgee .BytesPerLine ;};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;
_ccba ++{_cbff .Data [_cecb +_ccba ]=^(_cgee .Data [_cedd +_ccba ]&_cbff .Data [_cecb +_ccba ]);};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],^(_cgee .Data [_aeff ]&_cbff .Data [_bagbf ]),_dffe );
_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};case PixNotPixSrcXorDst :for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_cadf ]=_ggaf (_cbff .Data [_cadf ],^(_cgee .Data [_dgag ]^_cbff .Data [_cadf ]),_bcdg );_cadf +=_cbff .BytesPerLine ;
_dgag +=_cgee .BytesPerLine ;};if _abecf {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{for _ccba =0;_ccba < _fecc ;_ccba ++{_cbff .Data [_cecb +_ccba ]=^(_cgee .Data [_cedd +_ccba ]^_cbff .Data [_cecb +_ccba ]);};_cecb +=_cbff .BytesPerLine ;_cedd +=_cgee .BytesPerLine ;
};};if _gbac {for _gcdd =0;_gcdd < _ggb ;_gcdd ++{_cbff .Data [_bagbf ]=_ggaf (_cbff .Data [_bagbf ],^(_cgee .Data [_aeff ]^_cbff .Data [_bagbf ]),_dffe );_bagbf +=_cbff .BytesPerLine ;_aeff +=_cgee .BytesPerLine ;};};default:_ee .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_daab );
return _b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_cee *Monochrome )IsUnpadded ()bool {return (_cee .Width *_cee .Height )==len (_cee .Data )};
func (_bebac *ImageBase )setEightPartlyBytes (_geea ,_ccb int ,_agdde uint64 )(_cgea error ){var (_adbbg byte ;_egef int ;);for _bce :=1;_bce <=_ccb ;_bce ++{_egef =64-_bce *8;_adbbg =byte (_agdde >>uint (_egef )&0xff);if _cgea =_bebac .setByte (_geea +_bce -1,_adbbg );
_cgea !=nil {return _cgea ;};};_aaee :=_bebac .BytesPerLine *8-_bebac .Width ;if _aaee ==0{return nil ;};_egef -=8;_adbbg =byte (_agdde >>uint (_egef )&0xff)<<uint (_aaee );if _cgea =_bebac .setByte (_geea +_ccb ,_adbbg );_cgea !=nil {return _cgea ;};return nil ;
};func _bfg (_geada _da .Gray )_da .RGBA {return _da .RGBA {R :_geada .Y ,G :_geada .Y ,B :_geada .Y ,A :0xff}};type Gray8 struct{ImageBase };func (_aafb *Monochrome )Base ()*ImageBase {return &_aafb .ImageBase };func _fbf (_ba ,_ag *Monochrome )(_ge error ){_fc :=_ag .BytesPerLine ;
_cfb :=_ba .BytesPerLine ;var _acb ,_bbf ,_bde ,_abd ,_ca int ;for _bde =0;_bde < _ag .Height ;_bde ++{_acb =_bde *_fc ;_bbf =8*_bde *_cfb ;for _abd =0;_abd < _fc ;_abd ++{if _ge =_ba .setEightBytes (_bbf +_abd *8,_ec [_ag .Data [_acb +_abd ]]);_ge !=nil {return _ge ;
};};for _ca =1;_ca < 8;_ca ++{for _abd =0;_abd < _cfb ;_abd ++{if _ge =_ba .setByte (_bbf +_ca *_cfb +_abd ,_ba .Data [_bbf +_abd ]);_ge !=nil {return _ge ;};};};};return nil ;};func (_adeb *Gray16 )SetGray (x ,y int ,g _da .Gray ){_gcec :=(y *_adeb .BytesPerLine /2+x )*2;
if _gcec +1>=len (_adeb .Data ){return ;};_adeb .Data [_gcec ]=g .Y ;_adeb .Data [_gcec +1]=g .Y ;};type NRGBA interface{NRGBAAt (_acga ,_ebcb int )_da .NRGBA ;SetNRGBA (_defd ,_eacaa int ,_afga _da .NRGBA );};func ColorAtGray4BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_da .Gray ,error ){_edf :=y *bytesPerLine +x >>1;
if _edf >=len (data ){return _da .Gray {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_fgce :=data [_edf ]>>uint (4-(x &1)*4)&0xf;if len (decode )==2{_fgce =uint8 (uint32 (LinearInterpolate (float64 (_fgce ),0,15,decode [0],decode [1]))&0xf);};return _da .Gray {Y :_fgce *17&0xff},nil ;};type SMasker interface{HasAlpha ()bool ;GetAlpha ()[]byte ;
MakeAlpha ();};func _cced (_gggf _da .NRGBA )_da .NRGBA {_gggf .R =_gggf .R >>4|(_gggf .R >>4)<<4;_gggf .G =_gggf .G >>4|(_gggf .G >>4)<<4;_gggf .B =_gggf .B >>4|(_gggf .B >>4)<<4;return _gggf ;};func ColorAtCMYK (x ,y ,width int ,data []byte ,decode []float64 )(_da .CMYK ,error ){_fga :=4*(y *width +x );
if _fga +3>=len (data ){return _da .CMYK {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};C :=data [_fga ]&0xff;M :=data [_fga +1]&0xff;Y :=data [_fga +2]&0xff;K :=data [_fga +3]&0xff;if len (decode )==8{C =uint8 (uint32 (LinearInterpolate (float64 (C ),0,255,decode [0],decode [1]))&0xff);M =uint8 (uint32 (LinearInterpolate (float64 (M ),0,255,decode [2],decode [3]))&0xff);
Y =uint8 (uint32 (LinearInterpolate (float64 (Y ),0,255,decode [4],decode [5]))&0xff);K =uint8 (uint32 (LinearInterpolate (float64 (K ),0,255,decode [6],decode [7]))&0xff);};return _da .CMYK {C :C ,M :M ,Y :Y ,K :K },nil ;};func (_dbgf *RGBA32 )At (x ,y int )_da .Color {_ebgfd ,_ :=_dbgf .ColorAt (x ,y );
return _ebgfd };func _babg (_bgcgg Gray ,_fafd NRGBA ,_bgdc _e .Rectangle ){for _aead :=0;_aead < _bgdc .Max .X ;_aead ++{for _dgdb :=0;_dgdb < _bgdc .Max .Y ;_dgdb ++{_ebfg :=_bgcgg .GrayAt (_aead ,_dgdb );_fafd .SetNRGBA (_aead ,_dgdb ,_aga (_ebfg ));
};};};func init (){_bee ()};func (_ddff *Gray8 )Histogram ()(_ccgf [256]int ){for _abec :=0;_abec < len (_ddff .Data );_abec ++{_ccgf [_ddff .Data [_abec ]]++;};return _ccgf ;};func (_acbd *Gray2 )ColorModel ()_da .Model {return Gray2Model };func (_eceag *NRGBA32 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtNRGBA32 (x ,y ,_eceag .Width ,_eceag .Data ,_eceag .Alpha ,_eceag .Decode );
};func (_daaf *Gray8 )ColorModel ()_da .Model {return _da .GrayModel };func (_eebd *Gray8 )Validate ()error {if len (_eebd .Data )!=_eebd .Height *_eebd .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_fdff *NRGBA32 )Copy ()Image {return &NRGBA32 {ImageBase :_fdff .copy ()}};
func _acbf (_ebf _da .NRGBA )_da .Gray {_fcae ,_fef ,_bdb ,_ :=_ebf .RGBA ();_dfa :=(19595*_fcae +38470*_fef +7471*_bdb +1<<15)>>24;return _da .Gray {Y :uint8 (_dfa )};};func _bgb (_cgb _da .NRGBA64 )_da .NRGBA {return _da .NRGBA {R :uint8 (_cgb .R >>8),G :uint8 (_cgb .G >>8),B :uint8 (_cgb .B >>8),A :uint8 (_cgb .A >>8)};
};func _fgbeg (_dabe NRGBA ,_egbcc RGBA ,_eadeg _e .Rectangle ){for _abbb :=0;_abbb < _eadeg .Max .X ;_abbb ++{for _efdc :=0;_efdc < _eadeg .Max .Y ;_efdc ++{_ecgcb :=_dabe .NRGBAAt (_abbb ,_efdc );_egbcc .SetRGBA (_abbb ,_efdc ,_acf (_ecgcb ));};};};func (_ggd *Gray2 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_ggd .Width ,Y :_ggd .Height }};
};func (_cage *Monochrome )Copy ()Image {return &Monochrome {ImageBase :_cage .ImageBase .copy (),ModelThreshold :_cage .ModelThreshold };};func _cagd (_fab ,_cbbc int )*Monochrome {return &Monochrome {ImageBase :NewImageBase (_fab ,_cbbc ,1,1,nil ,nil ,nil ),ModelThreshold :0x0f};
};func (_dbf *ImageBase )getByte (_adaf int )(byte ,error ){if _adaf > len (_dbf .Data )-1||_adaf < 0{return 0,_ef .Errorf ("\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",_adaf );
};return _dbf .Data [_adaf ],nil ;};func (_ggdc *Gray4 )Base ()*ImageBase {return &_ggdc .ImageBase };func ConverterFunc (converterFunc func (_ebd _e .Image )(Image ,error ))ColorConverter {return colorConverter {_dda :converterFunc };};func _ggef (_cgde *Monochrome ,_bef ,_cfg int ,_ebdg ,_bbba int ,_dadd RasterOperator ,_geaa *Monochrome ,_bdbb ,_bbffg int )error {var _cfac ,_bbbf ,_eggcd ,_edcc int ;
if _bef < 0{_bdbb -=_bef ;_ebdg +=_bef ;_bef =0;};if _bdbb < 0{_bef -=_bdbb ;_ebdg +=_bdbb ;_bdbb =0;};_cfac =_bef +_ebdg -_cgde .Width ;if _cfac > 0{_ebdg -=_cfac ;};_bbbf =_bdbb +_ebdg -_geaa .Width ;if _bbbf > 0{_ebdg -=_bbbf ;};if _cfg < 0{_bbffg -=_cfg ;
_bbba +=_cfg ;_cfg =0;};if _bbffg < 0{_cfg -=_bbffg ;_bbba +=_bbffg ;_bbffg =0;};_eggcd =_cfg +_bbba -_cgde .Height ;if _eggcd > 0{_bbba -=_eggcd ;};_edcc =_bbffg +_bbba -_geaa .Height ;if _edcc > 0{_bbba -=_edcc ;};if _ebdg <=0||_bbba <=0{return nil ;
};var _gdeecd error ;switch {case _bef &7==0&&_bdbb &7==0:_gdeecd =_ecfa (_cgde ,_bef ,_cfg ,_ebdg ,_bbba ,_dadd ,_geaa ,_bdbb ,_bbffg );case _bef &7==_bdbb &7:_gdeecd =_fffd (_cgde ,_bef ,_cfg ,_ebdg ,_bbba ,_dadd ,_geaa ,_bdbb ,_bbffg );default:_gdeecd =_cfbgb (_cgde ,_bef ,_cfg ,_ebdg ,_bbba ,_dadd ,_geaa ,_bdbb ,_bbffg );
};if _gdeecd !=nil {return _gdeecd ;};return nil ;};func _bdad (_cbg _da .RGBA )_da .NRGBA {switch _cbg .A {case 0xff:return _da .NRGBA {R :_cbg .R ,G :_cbg .G ,B :_cbg .B ,A :0xff};case 0x00:return _da .NRGBA {};default:_baaf ,_ddc ,_bbga ,_gad :=_cbg .RGBA ();
_baaf =(_baaf *0xffff)/_gad ;_ddc =(_ddc *0xffff)/_gad ;_bbga =(_bbga *0xffff)/_gad ;return _da .NRGBA {R :uint8 (_baaf >>8),G :uint8 (_ddc >>8),B :uint8 (_bbga >>8),A :uint8 (_gad >>8)};};};func (_eed *Monochrome )setBit (_dgaa ,_egag int ){_eed .Data [_dgaa +(_egag >>3)]|=0x80>>uint (_egag &7);
};func ScaleAlphaToMonochrome (data []byte ,width ,height int )([]byte ,error ){_cb :=BytesPerLine (width ,8,1);if len (data )< _cb *height {return nil ,nil ;};_ed :=&Gray8 {NewImageBase (width ,height ,8,1,data ,nil ,nil )};_bd ,_a :=MonochromeConverter .Convert (_ed );
if _a !=nil {return nil ,_a ;};return _bd .Base ().Data ,nil ;};type ImageBase struct{Width ,Height int ;BitsPerComponent ,ColorComponents int ;Data ,Alpha []byte ;Decode []float64 ;BytesPerLine int ;};func (_ceac *Gray16 )GrayAt (x ,y int )_da .Gray {_bccd ,_ :=_ceac .ColorAt (x ,y );
return _da .Gray {Y :uint8 (_bccd .(_da .Gray16 ).Y >>8)};};func (_ecbf *NRGBA16 )NRGBAAt (x ,y int )_da .NRGBA {_cgaa ,_ :=ColorAtNRGBA16 (x ,y ,_ecbf .Width ,_ecbf .BytesPerLine ,_ecbf .Data ,_ecbf .Alpha ,_ecbf .Decode );return _cgaa ;};func _dgdc (_fgea Gray ,_gdf nrgba64 ,_aff _e .Rectangle ){for _face :=0;
_face < _aff .Max .X ;_face ++{for _eac :=0;_eac < _aff .Max .Y ;_eac ++{_gcb :=_ebee (_gdf .NRGBA64At (_face ,_eac ));_fgea .SetGray (_face ,_eac ,_gcb );};};};var _ Image =&NRGBA32 {};func ColorAtNRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_da .NRGBA ,error ){_adad :=y *width +x ;
_beeg :=3*_adad ;if _beeg +2>=len (data ){return _da .NRGBA {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_bcec :=uint8 (0xff);if alpha !=nil &&len (alpha )> _adad {_bcec =alpha [_adad ];};_aede ,_befg ,_dbggd :=data [_beeg ],data [_beeg +1],data [_beeg +2];if len (decode )==6{_aede =uint8 (uint32 (LinearInterpolate (float64 (_aede ),0,255,decode [0],decode [1]))&0xff);
_befg =uint8 (uint32 (LinearInterpolate (float64 (_befg ),0,255,decode [2],decode [3]))&0xff);_dbggd =uint8 (uint32 (LinearInterpolate (float64 (_dbggd ),0,255,decode [4],decode [5]))&0xff);};return _da .NRGBA {R :_aede ,G :_befg ,B :_dbggd ,A :_bcec },nil ;
};type monochromeThresholdConverter struct{Threshold uint8 ;};func _abgdb (_dgcag _e .Image ,_bafg Image ,_gagd _e .Rectangle ){if _edafb ,_cgge :=_dgcag .(SMasker );_cgge &&_edafb .HasAlpha (){_bafg .(SMasker ).MakeAlpha ();};switch _adbf :=_dgcag .(type ){case Gray :_deeb (_adbf ,_bafg .(RGBA ),_gagd );
case NRGBA :_fgbeg (_adbf ,_bafg .(RGBA ),_gagd );case *_e .NYCbCrA :_faea (_adbf ,_bafg .(RGBA ),_gagd );case CMYK :_acbea (_adbf ,_bafg .(RGBA ),_gagd );case RGBA :_edac (_adbf ,_bafg .(RGBA ),_gagd );case nrgba64 :_gfggc (_adbf ,_bafg .(RGBA ),_gagd );
default:_ccg (_dgcag ,_bafg ,_gagd );};};func (_gdde *Monochrome )At (x ,y int )_da .Color {_dbbc ,_ :=_gdde .ColorAt (x ,y );return _dbbc };func _afcf (_acbe _e .Image ,_eebge Image ,_dbdg _e .Rectangle ){if _egfb ,_abef :=_acbe .(SMasker );_abef &&_egfb .HasAlpha (){_eebge .(SMasker ).MakeAlpha ();
};_ccg (_acbe ,_eebge ,_dbdg );};func (_bcdd *NRGBA64 )Validate ()error {if len (_bcdd .Data )!=3*2*_bcdd .Width *_bcdd .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func (_ebgf *NRGBA16 )ColorModel ()_da .Model {return NRGBA16Model };func _fdef (_ccea RGBA ,_ccebg NRGBA ,_dgadc _e .Rectangle ){for _fgeb :=0;_fgeb < _dgadc .Max .X ;_fgeb ++{for _aaaf :=0;_aaaf < _dgadc .Max .Y ;_aaaf ++{_ebdf :=_ccea .RGBAAt (_fgeb ,_aaaf );
_ccebg .SetNRGBA (_fgeb ,_aaaf ,_bdad (_ebdf ));};};};func _fdbc (_gba _da .RGBA )_da .Gray {_efad :=(19595*uint32 (_gba .R )+38470*uint32 (_gba .G )+7471*uint32 (_gba .B )+1<<7)>>16;return _da .Gray {Y :uint8 (_efad )};};func _eefaa (_afac _e .Image ,_adfg Image ,_ffdcg _e .Rectangle ){if _aacd ,_egaf :=_afac .(SMasker );
_egaf &&_aacd .HasAlpha (){_adfg .(SMasker ).MakeAlpha ();};switch _fceac :=_afac .(type ){case Gray :_babg (_fceac ,_adfg .(NRGBA ),_ffdcg );case NRGBA :_cddd (_fceac ,_adfg .(NRGBA ),_ffdcg );case *_e .NYCbCrA :_cffg (_fceac ,_adfg .(NRGBA ),_ffdcg );
case CMYK :_ffeg (_fceac ,_adfg .(NRGBA ),_ffdcg );case RGBA :_fdef (_fceac ,_adfg .(NRGBA ),_ffdcg );case nrgba64 :_bbbfa (_fceac ,_adfg .(NRGBA ),_ffdcg );default:_ccg (_afac ,_adfg ,_ffdcg );};};func AutoThresholdTriangle (histogram [256]int )uint8 {var _caac ,_fbbbg ,_dgdef ,_bgaga int ;
for _bbgg :=0;_bbgg < len (histogram );_bbgg ++{if histogram [_bbgg ]> 0{_caac =_bbgg ;break ;};};if _caac > 0{_caac --;};for _ceg :=255;_ceg > 0;_ceg --{if histogram [_ceg ]> 0{_bgaga =_ceg ;break ;};};if _bgaga < 255{_bgaga ++;};for _cfdad :=0;_cfdad < 256;
_cfdad ++{if histogram [_cfdad ]> _fbbbg {_dgdef =_cfdad ;_fbbbg =histogram [_cfdad ];};};var _gdfef bool ;if (_dgdef -_caac )< (_bgaga -_dgdef ){_gdfef =true ;var _aaeeg int ;_ggbc :=255;for _aaeeg < _ggbc {_afbc :=histogram [_aaeeg ];histogram [_aaeeg ]=histogram [_ggbc ];
histogram [_ggbc ]=_afbc ;_aaeeg ++;_ggbc --;};_caac =255-_bgaga ;_dgdef =255-_dgdef ;};if _caac ==_dgdef {return uint8 (_caac );};_ggcf :=float64 (histogram [_dgdef ]);_gefec :=float64 (_caac -_dgdef );_ebfbg :=_d .Sqrt (_ggcf *_ggcf +_gefec *_gefec );
_ggcf /=_ebfbg ;_gefec /=_ebfbg ;_ebfbg =_ggcf *float64 (_caac )+_gefec *float64 (histogram [_caac ]);_gbag :=_caac ;var _fecd float64 ;for _edge :=_caac +1;_edge <=_dgdef ;_edge ++{_aegg :=_ggcf *float64 (_edge )+_gefec *float64 (histogram [_edge ])-_ebfbg ;
if _aegg > _fecd {_gbag =_edge ;_fecd =_aegg ;};};_gbag --;if _gdfef {var _adab int ;_ebgb :=255;for _adab < _ebgb {_bfdb :=histogram [_adab ];histogram [_adab ]=histogram [_ebgb ];histogram [_ebgb ]=_bfdb ;_adab ++;_ebgb --;};return uint8 (255-_gbag );
};return uint8 (_gbag );};func NewImageBase (width int ,height int ,bitsPerComponent int ,colorComponents int ,data []byte ,alpha []byte ,decode []float64 )ImageBase {_gdfe :=ImageBase {Width :width ,Height :height ,BitsPerComponent :bitsPerComponent ,ColorComponents :colorComponents ,Data :data ,Alpha :alpha ,Decode :decode ,BytesPerLine :BytesPerLine (width ,bitsPerComponent ,colorComponents )};
if data ==nil {_gdfe .Data =make ([]byte ,height *_gdfe .BytesPerLine );};return _gdfe ;};func (_agd *CMYK32 )Copy ()Image {return &CMYK32 {ImageBase :_agd .copy ()}};type shift int ;func _fcea (_faebc []byte ,_defae Image )error {_ebef :=true ;for _bcac :=0;
_bcac < len (_faebc );_bcac ++{if _faebc [_bcac ]!=0xff{_ebef =false ;break ;};};if _ebef {switch _egbc :=_defae .(type ){case *NRGBA32 :_egbc .Alpha =nil ;case *NRGBA64 :_egbc .Alpha =nil ;default:return _ef .Errorf ("i\u006ete\u0072n\u0061l\u0020\u0065\u0072\u0072\u006fr\u0020\u002d\u0020i\u006d\u0061\u0067\u0065\u0020s\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070e\u0020\u002a\u004eRGB\u0041\u0033\u0032\u0020\u006f\u0072 \u002a\u004e\u0052\u0047\u0042\u0041\u0036\u0034\u0020\u0062\u0075\u0074 \u0069s\u003a\u0020\u0025\u0054",_defae );
};};return nil ;};func (_bac *CMYK32 )CMYKAt (x ,y int )_da .CMYK {_bfde ,_ :=ColorAtCMYK (x ,y ,_bac .Width ,_bac .Data ,_bac .Decode );return _bfde ;};func NextPowerOf2 (n uint )uint {if IsPowerOf2 (n ){return n ;};return 1<<(_dcdf (n )+1);};func NewImage (width ,height ,bitsPerComponent ,colorComponents int ,data ,alpha []byte ,decode []float64 )(Image ,error ){_aafd :=NewImageBase (width ,height ,bitsPerComponent ,colorComponents ,data ,alpha ,decode );
var _eagc Image ;switch colorComponents {case 1:switch bitsPerComponent {case 1:_eagc =&Monochrome {ImageBase :_aafd ,ModelThreshold :0x0f};case 2:_eagc =&Gray2 {ImageBase :_aafd };case 4:_eagc =&Gray4 {ImageBase :_aafd };case 8:_eagc =&Gray8 {ImageBase :_aafd };
case 16:_eagc =&Gray16 {ImageBase :_aafd };};case 3:switch bitsPerComponent {case 4:_eagc =&NRGBA16 {ImageBase :_aafd };case 8:_eagc =&NRGBA32 {ImageBase :_aafd };case 16:_eagc =&NRGBA64 {ImageBase :_aafd };};case 4:_eagc =&CMYK32 {ImageBase :_aafd };};
if _eagc ==nil {return nil ,ErrInvalidImage ;};return _eagc ,nil ;};var _ _e .Image =&Gray8 {};func _ffeg (_ccec CMYK ,_dgeb NRGBA ,_gbcgc _e .Rectangle ){for _ccef :=0;_ccef < _gbcgc .Max .X ;_ccef ++{for _efc :=0;_efc < _gbcgc .Max .Y ;_efc ++{_agbg :=_ccec .CMYKAt (_ccef ,_efc );
_dgeb .SetNRGBA (_ccef ,_efc ,_aced (_agbg ));};};};func (_cfc *Monochrome )Set (x ,y int ,c _da .Color ){_dbef :=y *_cfc .BytesPerLine +x >>3;if _dbef > len (_cfc .Data )-1{return ;};_ccdg :=_cfc .ColorModel ().Convert (c ).(_da .Gray );_cfc .setGray (x ,_ccdg ,_dbef );
};func (_dbaa *Gray8 )Base ()*ImageBase {return &_dbaa .ImageBase };var (_cgda =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_baf =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func _cfcd (_cdea _da .Gray )_da .Gray {_cdea .Y >>=4;_cdea .Y |=_cdea .Y <<4;
return _cdea };func (_ffd colorConverter )Convert (src _e .Image )(Image ,error ){return _ffd ._dda (src )};func _fcg (_bgf _da .NYCbCrA )_da .RGBA {_bcg ,_agg ,_cafa ,_gbaa :=_gbf (_bgf ).RGBA ();return _da .RGBA {R :uint8 (_bcg >>8),G :uint8 (_agg >>8),B :uint8 (_cafa >>8),A :uint8 (_gbaa >>8)};
};func _deeb (_bdaf Gray ,_bdag RGBA ,_aeee _e .Rectangle ){for _cdga :=0;_cdga < _aeee .Max .X ;_cdga ++{for _ggce :=0;_ggce < _aeee .Max .Y ;_ggce ++{_bcecd :=_bdaf .GrayAt (_cdga ,_ggce );_bdag .SetRGBA (_cdga ,_ggce ,_bfg (_bcecd ));};};};func _dfe (_cefd _da .CMYK )_da .RGBA {_bad ,_ffab ,_bgg :=_da .CMYKToRGB (_cefd .C ,_cefd .M ,_cefd .Y ,_cefd .K );
return _da .RGBA {R :_bad ,G :_ffab ,B :_bgg ,A :0xff};};func (_gfcda *NRGBA32 )Set (x ,y int ,c _da .Color ){_acbdg :=y *_gfcda .Width +x ;_dedd :=3*_acbdg ;if _dedd +2>=len (_gfcda .Data ){return ;};_dbgd :=_da .NRGBAModel .Convert (c ).(_da .NRGBA );
_gfcda .setRGBA (_acbdg ,_dbgd );};var _ Gray =&Gray2 {};func (_ffbf *Gray8 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtGray8BPC (x ,y ,_ffbf .BytesPerLine ,_ffbf .Data ,_ffbf .Decode );};func ColorAtGray2BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_da .Gray ,error ){_fffg :=y *bytesPerLine +x >>2;
if _fffg >=len (data ){return _da .Gray {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_edee :=data [_fffg ]>>uint (6-(x &3)*2)&3;if len (decode )==2{_edee =uint8 (uint32 (LinearInterpolate (float64 (_edee ),0,3.0,decode [0],decode [1]))&3);};return _da .Gray {Y :_edee *85},nil ;};func _gac (_beb _da .NRGBA64 )_da .RGBA {_fdd ,_aeg ,_dgfg ,_bea :=_beb .RGBA ();
return _da .RGBA {R :uint8 (_fdd >>8),G :uint8 (_aeg >>8),B :uint8 (_dgfg >>8),A :uint8 (_bea >>8)};};func _ggaf (_dcb ,_bcfgg ,_gacg byte )byte {return (_dcb &^(_gacg ))|(_bcfgg &_gacg )};func (_ddbcc *NRGBA32 )At (x ,y int )_da .Color {_cdgc ,_ :=_ddbcc .ColorAt (x ,y );
return _cdgc };type RGBA interface{RGBAAt (_dfce ,_dfdf int )_da .RGBA ;SetRGBA (_cdcbe ,_ggga int ,_dfcd _da .RGBA );};var _ Gray =&Gray4 {};func (_gcgc *NRGBA16 )At (x ,y int )_da .Color {_fdg ,_ :=_gcgc .ColorAt (x ,y );return _fdg };type NRGBA64 struct{ImageBase };
func MonochromeModel (threshold uint8 )_da .Model {return monochromeModel (threshold )};type Gray4 struct{ImageBase };func FromGoImage (i _e .Image )(Image ,error ){switch _eeaa :=i .(type ){case Image :return _eeaa .Copy (),nil ;case Gray :return GrayConverter .Convert (i );
case *_e .Gray16 :return Gray16Converter .Convert (i );case CMYK :return CMYKConverter .Convert (i );case *_e .NRGBA64 :return NRGBA64Converter .Convert (i );default:return NRGBAConverter .Convert (i );};};func (_bca *Gray2 )Copy ()Image {return &Gray2 {ImageBase :_bca .copy ()}};
var _ Image =&Gray16 {};func _dcdf (_bagb uint )uint {var _gfeb uint ;for _bagb !=0{_bagb >>=1;_gfeb ++;};return _gfeb -1;};type monochromeModel uint8 ;func (_deaf *Monochrome )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Monochrome ,sx ,sy int )error {return _dbbb (_deaf ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_dfge *NRGBA64 )setNRGBA64 (_ffgff int ,_eeefe _da .NRGBA64 ,_dbd int ){_dfge .Data [_ffgff ]=uint8 (_eeefe .R >>8);_dfge .Data [_ffgff +1]=uint8 (_eeefe .R &0xff);_dfge .Data [_ffgff +2]=uint8 (_eeefe .G >>8);_dfge .Data [_ffgff +3]=uint8 (_eeefe .G &0xff);
_dfge .Data [_ffgff +4]=uint8 (_eeefe .B >>8);_dfge .Data [_ffgff +5]=uint8 (_eeefe .B &0xff);if _dbd +1< len (_dfge .Alpha ){_dfge .Alpha [_dbd ]=uint8 (_eeefe .A >>8);_dfge .Alpha [_dbd +1]=uint8 (_eeefe .A &0xff);};};func LinearInterpolate (x ,xmin ,xmax ,ymin ,ymax float64 )float64 {if _d .Abs (xmax -xmin )< 0.000001{return ymin ;
};_gfbf :=ymin +(x -xmin )*(ymax -ymin )/(xmax -xmin );return _gfbf ;};var _ Image =&NRGBA16 {};func BytesPerLine (width ,bitsPerComponent ,colorComponents int )int {return ((width *bitsPerComponent )*colorComponents +7)>>3;};var _ NRGBA =&NRGBA16 {};func (_edd *Gray16 )Validate ()error {if len (_edd .Data )!=_edd .Height *_edd .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func (_fgfb *Gray8 )At (x ,y int )_da .Color {_daeae ,_ :=_fgfb .ColorAt (x ,y );return _daeae };func (_cead *Monochrome )setGrayBit (_dada ,_dgad int ){_cead .Data [_dada ]|=0x80>>uint (_dgad &7)};func (_cdfg *RGBA32 )Base ()*ImageBase {return &_cdfg .ImageBase };
type Image interface{_bb .Image ;Base ()*ImageBase ;Copy ()Image ;Pix ()[]byte ;ColorAt (_ddcg ,_dbed int )(_da .Color ,error );Validate ()error ;};type Gray interface{GrayAt (_gabg ,_dgd int )_da .Gray ;SetGray (_agff ,_gdb int ,_efg _da .Gray );};func (_ffgae *NRGBA32 )SetNRGBA (x ,y int ,c _da .NRGBA ){_dgde :=y *_ffgae .Width +x ;
_gae :=3*_dgde ;if _gae +2>=len (_ffgae .Data ){return ;};_ffgae .setRGBA (_dgde ,c );};func (_bgbc *Monochrome )Validate ()error {if len (_bgbc .Data )!=_bgbc .Height *_bgbc .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_gebf *NRGBA64 )NRGBA64At (x ,y int )_da .NRGBA64 {_baca ,_ :=ColorAtNRGBA64 (x ,y ,_gebf .Width ,_gebf .Data ,_gebf .Alpha ,_gebf .Decode );
return _baca ;};func _dbbcb (_fgda int ,_ecfe int )int {if _fgda < _ecfe {return _fgda ;};return _ecfe ;};func ColorAtGray16BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_da .Gray16 ,error ){_gccg :=(y *bytesPerLine /2+x )*2;if _gccg +1>=len (data ){return _da .Gray16 {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cccc :=uint16 (data [_gccg ])<<8|uint16 (data [_gccg +1]);if len (decode )==2{_cccc =uint16 (uint64 (LinearInterpolate (float64 (_cccc ),0,65535,decode [0],decode [1])));};return _da .Gray16 {Y :_cccc },nil ;};func (_cebe *NRGBA32 )Validate ()error {if len (_cebe .Data )!=3*_cebe .Width *_cebe .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _edc (_abf ,_dec *Monochrome ,_eag []byte ,_agc int )(_cae error ){var (_gfa ,_eeea ,_fbb ,_eab ,_fgf ,_ffbg ,_ada ,_dgc int ;_fgd ,_ebe uint32 ;_eef ,_agfa byte ;_ggec uint16 ;);_cgd :=make ([]byte ,4);_afe :=make ([]byte ,4);for _fbb =0;
_fbb < _abf .Height -1;_fbb ,_eab =_fbb +2,_eab +1{_gfa =_fbb *_abf .BytesPerLine ;_eeea =_eab *_dec .BytesPerLine ;for _fgf ,_ffbg =0,0;_fgf < _agc ;_fgf ,_ffbg =_fgf +4,_ffbg +1{for _ada =0;_ada < 4;_ada ++{_dgc =_gfa +_fgf +_ada ;if _dgc <=len (_abf .Data )-1&&_dgc < _gfa +_abf .BytesPerLine {_cgd [_ada ]=_abf .Data [_dgc ];
}else {_cgd [_ada ]=0x00;};_dgc =_gfa +_abf .BytesPerLine +_fgf +_ada ;if _dgc <=len (_abf .Data )-1&&_dgc < _gfa +(2*_abf .BytesPerLine ){_afe [_ada ]=_abf .Data [_dgc ];}else {_afe [_ada ]=0x00;};};_fgd =_fa .BigEndian .Uint32 (_cgd );_ebe =_fa .BigEndian .Uint32 (_afe );
_ebe |=_fgd ;_ebe |=_ebe <<1;_ebe &=0xaaaaaaaa;_fgd =_ebe |(_ebe <<7);_eef =byte (_fgd >>24);_agfa =byte ((_fgd >>8)&0xff);_dgc =_eeea +_ffbg ;if _dgc +1==len (_dec .Data )-1||_dgc +1>=_eeea +_dec .BytesPerLine {_dec .Data [_dgc ]=_eag [_eef ];}else {_ggec =(uint16 (_eag [_eef ])<<8)|uint16 (_eag [_agfa ]);
if _cae =_dec .setTwoBytes (_dgc ,_ggec );_cae !=nil {return _ef .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dgc );
};_ffbg ++;};};};return nil ;};func (_adbb *Monochrome )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_adbb .Width ,Y :_adbb .Height }};};func (_cfda *Monochrome )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtGray1BPC (x ,y ,_cfda .BytesPerLine ,_cfda .Data ,_cfda .Decode );
};func (_bbc *NRGBA16 )Set (x ,y int ,c _da .Color ){_egcb :=y *_bbc .BytesPerLine +x *3/2;if _egcb +1>=len (_bbc .Data ){return ;};_babb :=NRGBA16Model .Convert (c ).(_da .NRGBA );_bbc .setNRGBA (x ,y ,_egcb ,_babb );};func _feaf (_efgd _e .Image )(Image ,error ){if _ccdb ,_edfg :=_efgd .(*Gray8 );
_edfg {return _ccdb .Copy (),nil ;};_abcd :=_efgd .Bounds ();_dbaaa ,_agfe :=NewImage (_abcd .Max .X ,_abcd .Max .Y ,8,1,nil ,nil ,nil );if _agfe !=nil {return nil ,_agfe ;};_eggb (_efgd ,_dbaaa ,_abcd );return _dbaaa ,nil ;};var _ _e .Image =&Gray16 {};
func _gcd (_bag Gray ,_cbedf NRGBA ,_gfgg _e .Rectangle ){for _badb :=0;_badb < _gfgg .Max .X ;_badb ++{for _edca :=0;_edca < _gfgg .Max .Y ;_edca ++{_cggf :=_effc (_cbedf .NRGBAAt (_badb ,_edca ));_bag .SetGray (_badb ,_edca ,_cggf );};};};func _dca (_cbdb *Monochrome ,_fddc ,_cfca int ,_abdd ,_fdbe int ,_eebg RasterOperator ){var (_cdcb int ;
_gdadb byte ;_edeeb ,_cbcd int ;_fgae int ;);_eadad :=_abdd >>3;_ecffc :=_abdd &7;if _ecffc > 0{_gdadb =_cgda [_ecffc ];};_cdcb =_cbdb .BytesPerLine *_cfca +(_fddc >>3);switch _eebg {case PixClr :for _edeeb =0;_edeeb < _fdbe ;_edeeb ++{_fgae =_cdcb +_edeeb *_cbdb .BytesPerLine ;
for _cbcd =0;_cbcd < _eadad ;_cbcd ++{_cbdb .Data [_fgae ]=0x0;_fgae ++;};if _ecffc > 0{_cbdb .Data [_fgae ]=_ggaf (_cbdb .Data [_fgae ],0x0,_gdadb );};};case PixSet :for _edeeb =0;_edeeb < _fdbe ;_edeeb ++{_fgae =_cdcb +_edeeb *_cbdb .BytesPerLine ;for _cbcd =0;
_cbcd < _eadad ;_cbcd ++{_cbdb .Data [_fgae ]=0xff;_fgae ++;};if _ecffc > 0{_cbdb .Data [_fgae ]=_ggaf (_cbdb .Data [_fgae ],0xff,_gdadb );};};case PixNotDst :for _edeeb =0;_edeeb < _fdbe ;_edeeb ++{_fgae =_cdcb +_edeeb *_cbdb .BytesPerLine ;for _cbcd =0;
_cbcd < _eadad ;_cbcd ++{_cbdb .Data [_fgae ]=^_cbdb .Data [_fgae ];_fgae ++;};if _ecffc > 0{_cbdb .Data [_fgae ]=_ggaf (_cbdb .Data [_fgae ],^_cbdb .Data [_fgae ],_gdadb );};};};};type NRGBA32 struct{ImageBase };func _faf (_geda int ,_fgbee int )error {return _ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",_geda ,_fgbee );
};var _ _e .Image =&NRGBA64 {};func (_cebd *Gray2 )Set (x ,y int ,c _da .Color ){if x >=_cebd .Width ||y >=_cebd .Height {return ;};_ddcf :=Gray2Model .Convert (c ).(_da .Gray );_afcg :=y *_cebd .BytesPerLine ;_ebdb :=_afcg +(x >>2);_acefe :=_ddcf .Y >>6;
_cebd .Data [_ebdb ]=(_cebd .Data [_ebdb ]&(^(0xc0>>uint (2*((x )&3)))))|(_acefe <<uint (6-2*(x &3)));};func (_bgbcb *Gray16 )Base ()*ImageBase {return &_bgbcb .ImageBase };var ErrInvalidImage =_b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
func ColorAtGray8BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_da .Gray ,error ){_bdba :=y *bytesPerLine +x ;if _bdba >=len (data ){return _da .Gray {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cbea :=data [_bdba ];if len (decode )==2{_cbea =uint8 (uint32 (LinearInterpolate (float64 (_cbea ),0,255,decode [0],decode [1]))&0xff);};return _da .Gray {Y :_cbea },nil ;};func _gged (_dgaag _da .Color )_da .Color {_egba :=_da .GrayModel .Convert (_dgaag ).(_da .Gray );
return _eafb (_egba );};func (_abgg *CMYK32 )At (x ,y int )_da .Color {_bab ,_ :=_abgg .ColorAt (x ,y );return _bab };func (_dbgg *ImageBase )GetAlpha ()[]byte {return _dbgg .Alpha };func _eggb (_cbbg _e .Image ,_bbaab Image ,_bffd _e .Rectangle ){switch _cccbc :=_cbbg .(type ){case Gray :_aeac (_cccbc ,_bbaab .(Gray ),_bffd );
case NRGBA :_dgaac (_cccbc ,_bbaab .(Gray ),_bffd );case CMYK :_eebdd (_cccbc ,_bbaab .(Gray ),_bffd );case RGBA :_cedf (_cccbc ,_bbaab .(Gray ),_bffd );default:_ccg (_cbbg ,_bbaab ,_bffd );};};func _cffg (_adfa *_e .NYCbCrA ,_efdg NRGBA ,_ffff _e .Rectangle ){for _gbeg :=0;
_gbeg < _ffff .Max .X ;_gbeg ++{for _eddf :=0;_eddf < _ffff .Max .Y ;_eddf ++{_dggcg :=_adfa .NYCbCrAAt (_gbeg ,_eddf );_efdg .SetNRGBA (_gbeg ,_eddf ,_gbf (_dggcg ));};};};func (_adee *Monochrome )Histogram ()(_aefa [256]int ){for _ ,_gda :=range _adee .Data {_aefa [0xff]+=int (_dbg [_adee .Data [_gda ]]);
};return _aefa ;};func (_fabbd *Monochrome )GrayAt (x ,y int )_da .Gray {_fcb ,_ :=ColorAtGray1BPC (x ,y ,_fabbd .BytesPerLine ,_fabbd .Data ,_fabbd .Decode );return _fcb ;};func (_abfdd *RGBA32 )ColorModel ()_da .Model {return _da .NRGBAModel };func _eadc (_cag *Monochrome ,_afc int ,_efff []byte )(_fae *Monochrome ,_fcdd error ){const _be ="\u0072\u0065d\u0075\u0063\u0065R\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079";
if _cag ==nil {return nil ,_b .New ("\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _afc < 1||_afc > 4{return nil ,_b .New ("\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _cag .Height <=1{return nil ,_b .New ("\u0073\u006f\u0075rc\u0065\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020m\u0075s\u0074 \u0062e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027");};_fae =_cagd (_cag .Width /2,_cag .Height /2);
if _efff ==nil {_efff =_bed ();};_fbc :=_dbbcb (_cag .BytesPerLine ,2*_fae .BytesPerLine );switch _afc {case 1:_fcdd =_edc (_cag ,_fae ,_efff ,_fbc );case 2:_fcdd =_gbcf (_cag ,_fae ,_efff ,_fbc );case 3:_fcdd =_cge (_cag ,_fae ,_efff ,_fbc );case 4:_fcdd =_aee (_cag ,_fae ,_efff ,_fbc );
};if _fcdd !=nil {return nil ,_fcdd ;};return _fae ,nil ;};func (_cgff *NRGBA16 )Base ()*ImageBase {return &_cgff .ImageBase };func (_ccee *NRGBA16 )SetNRGBA (x ,y int ,c _da .NRGBA ){_eaec :=y *_ccee .BytesPerLine +x *3/2;if _eaec +1>=len (_ccee .Data ){return ;
};c =_cced (c );_ccee .setNRGBA (x ,y ,_eaec ,c );};func (_fbcd *Gray4 )Histogram ()(_bbgd [256]int ){for _cgc :=0;_cgc < _fbcd .Width ;_cgc ++{for _efed :=0;_efed < _fbcd .Height ;_efed ++{_bbgd [_fbcd .GrayAt (_cgc ,_efed ).Y ]++;};};return _bbgd ;};
func (_gadc *NRGBA16 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_gadc .Width ,Y :_gadc .Height }};};func (_ggcc *Gray4 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_ggcc .Width ,Y :_ggcc .Height }};};func (_afb *CMYK32 )Set (x ,y int ,c _da .Color ){_ffc :=4*(y *_afb .Width +x );
if _ffc +3>=len (_afb .Data ){return ;};_bcc :=_da .CMYKModel .Convert (c ).(_da .CMYK );_afb .Data [_ffc ]=_bcc .C ;_afb .Data [_ffc +1]=_bcc .M ;_afb .Data [_ffc +2]=_bcc .Y ;_afb .Data [_ffc +3]=_bcc .K ;};var _dbg [256]uint8 ;var _ Image =&Monochrome {};
func ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine int ,data []byte ,decode []float64 )(_da .Color ,error ){switch bitsPerColor {case 1:return ColorAtGray1BPC (x ,y ,bytesPerLine ,data ,decode );case 2:return ColorAtGray2BPC (x ,y ,bytesPerLine ,data ,decode );
case 4:return ColorAtGray4BPC (x ,y ,bytesPerLine ,data ,decode );case 8:return ColorAtGray8BPC (x ,y ,bytesPerLine ,data ,decode );case 16:return ColorAtGray16BPC (x ,y ,bytesPerLine ,data ,decode );default:return nil ,_ef .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0067\u0072\u0061\u0079\u0020\u0073c\u0061\u006c\u0065\u0020\u0062\u0069\u0074s\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020a\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};func (_fec *ImageBase )setTwoBytes (_ecec int ,_ecggd uint16 )error {if _ecec +1> len (_fec .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fec .Data [_ecec ]=byte ((_ecggd &0xff00)>>8);
_fec .Data [_ecec +1]=byte (_ecggd &0xff);return nil ;};func _fcdg (_cdcc _da .NRGBA )_da .CMYK {_dad ,_bggd ,_deg ,_ :=_cdcc .RGBA ();_bega ,_ccd ,_bbg ,_ebed :=_da .RGBToCMYK (uint8 (_dad >>8),uint8 (_bggd >>8),uint8 (_deg >>8));return _da .CMYK {C :_bega ,M :_ccd ,Y :_bbg ,K :_ebed };
};var _ RGBA =&RGBA32 {};func (_gcab *Gray16 )Histogram ()(_gbge [256]int ){for _edag :=0;_edag < _gcab .Width ;_edag ++{for _gefc :=0;_gefc < _gcab .Height ;_gefc ++{_gbge [_gcab .GrayAt (_edag ,_gefc ).Y ]++;};};return _gbge ;};func _dcaa (_fddcf _da .Color )_da .Color {_dgfc :=_da .NRGBAModel .Convert (_fddcf ).(_da .NRGBA );
return _cced (_dgfc );};func (_bbag *Gray4 )Validate ()error {if len (_bbag .Data )!=_bbag .Height *_bbag .BytesPerLine {return ErrInvalidImage ;};return nil ;};func (_ccf *NRGBA64 )Set (x ,y int ,c _da .Color ){_bacb :=(y *_ccf .Width +x )*2;_adeee :=_bacb *3;
if _adeee +5>=len (_ccf .Data ){return ;};_abde :=_da .NRGBA64Model .Convert (c ).(_da .NRGBA64 );_ccf .setNRGBA64 (_adeee ,_abde ,_bacb );};func (_fbca *CMYK32 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_fbca .Width ,Y :_fbca .Height }};
};type RasterOperator int ;func _ccbca (_eeda uint8 )bool {if _eeda ==0||_eeda ==255{return true ;};return false ;};func _agaac (_gfga _e .Image )(Image ,error ){if _ebca ,_egbe :=_gfga .(*NRGBA64 );_egbe {return _ebca .Copy (),nil ;};_gggc ,_fbd ,_deaed :=_gag (_gfga ,2);
_cfaa ,_ddbg :=NewImage (_gggc .Max .X ,_gggc .Max .Y ,16,3,nil ,_deaed ,nil );if _ddbg !=nil {return nil ,_ddbg ;};_afcf (_gfga ,_cfaa ,_gggc );if len (_deaed )!=0&&!_fbd {if _daba :=_fcea (_deaed ,_cfaa );_daba !=nil {return nil ,_daba ;};};return _cfaa ,nil ;
};func (_bcacf *NRGBA64 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_bcacf .Width ,Y :_bcacf .Height }};};func (_ecgc *Monochrome )ScaleLow (width ,height int )(*Monochrome ,error ){if width < 0||height < 0{return nil ,_b .New ("\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0077\u0069\u0064t\u0068\u0020\u0061\u006e\u0064\u0020\u0068e\u0069\u0067\u0068\u0074");
};_dfdd :=_cagd (width ,height );_bgab :=make ([]int ,height );_ebac :=make ([]int ,width );_gaae :=float64 (_ecgc .Width )/float64 (width );_cbc :=float64 (_ecgc .Height )/float64 (height );for _gfff :=0;_gfff < height ;_gfff ++{_bgab [_gfff ]=int (_d .Min (_cbc *float64 (_gfff )+0.5,float64 (_ecgc .Height -1)));
};for _cbaa :=0;_cbaa < width ;_cbaa ++{_ebac [_cbaa ]=int (_d .Min (_gaae *float64 (_cbaa )+0.5,float64 (_ecgc .Width -1)));};_aecc :=-1;_bcf :=byte (0);for _faac :=0;_faac < height ;_faac ++{_dfg :=_bgab [_faac ]*_ecgc .BytesPerLine ;_ecgcf :=_faac *_dfdd .BytesPerLine ;
for _baab :=0;_baab < width ;_baab ++{_cdfc :=_ebac [_baab ];if _cdfc !=_aecc {_bcf =_ecgc .getBit (_dfg ,_cdfc );if _bcf !=0{_dfdd .setBit (_ecgcf ,_baab );};_aecc =_cdfc ;}else {if _bcf !=0{_dfdd .setBit (_ecgcf ,_baab );};};};};return _dfdd ,nil ;};
func _ffabe (_afd _da .CMYK )_da .Gray {_agaa ,_fac ,_gcea :=_da .CMYKToRGB (_afd .C ,_afd .M ,_afd .Y ,_afd .K );_egee :=(19595*uint32 (_agaa )+38470*uint32 (_fac )+7471*uint32 (_gcea )+1<<7)>>16;return _da .Gray {Y :uint8 (_egee )};};func _dbde (_ebeg *_e .Gray16 ,_fbcg uint8 )*_e .Gray {_beade :=_ebeg .Bounds ();
_fcbg :=_e .NewGray (_beade );for _aaeg :=0;_aaeg < _beade .Dx ();_aaeg ++{for _effg :=0;_effg < _beade .Dy ();_effg ++{_feda :=_ebeg .Gray16At (_aaeg ,_effg );_fcbg .SetGray (_aaeg ,_effg ,_da .Gray {Y :_cdaf (uint8 (_feda .Y /256),_fbcg )});};};return _fcbg ;
};var _ _e .Image =&NRGBA32 {};func (_gaf *Gray4 )GrayAt (x ,y int )_da .Gray {_aggf ,_ :=ColorAtGray4BPC (x ,y ,_gaf .BytesPerLine ,_gaf .Data ,_gaf .Decode );return _aggf ;};func (_bbge monochromeModel )Convert (c _da .Color )_da .Color {_cdfd :=_da .GrayModel .Convert (c ).(_da .Gray );
return _gaaf (_cdfd ,_bbge );};func _faea (_bdfe *_e .NYCbCrA ,_fabg RGBA ,_bcgef _e .Rectangle ){for _fgad :=0;_fgad < _bcgef .Max .X ;_fgad ++{for _fbbb :=0;_fbbb < _bcgef .Max .Y ;_fbbb ++{_aagf :=_bdfe .NYCbCrAAt (_fgad ,_fbbb );_fabg .SetRGBA (_fgad ,_fbbb ,_fcg (_aagf ));
};};};var _ Image =&NRGBA64 {};func _gec (_aage ,_fcee CMYK ,_egbb _e .Rectangle ){for _gcc :=0;_gcc < _egbb .Max .X ;_gcc ++{for _abe :=0;_abe < _egbb .Max .Y ;_abe ++{_fcee .SetCMYK (_gcc ,_abe ,_aage .CMYKAt (_gcc ,_abe ));};};};func _gbf (_cea _da .NYCbCrA )_da .NRGBA {_bbe :=int32 (_cea .Y )*0x10101;
_fgc :=int32 (_cea .Cb )-128;_cbed :=int32 (_cea .Cr )-128;_cafe :=_bbe +91881*_cbed ;if uint32 (_cafe )&0xff000000==0{_cafe >>=8;}else {_cafe =^(_cafe >>31)&0xffff;};_agdd :=_bbe -22554*_fgc -46802*_cbed ;if uint32 (_agdd )&0xff000000==0{_agdd >>=8;}else {_agdd =^(_agdd >>31)&0xffff;
};_bcb :=_bbe +116130*_fgc ;if uint32 (_bcb )&0xff000000==0{_bcb >>=8;}else {_bcb =^(_bcb >>31)&0xffff;};return _da .NRGBA {R :uint8 (_cafe >>8),G :uint8 (_agdd >>8),B :uint8 (_bcb >>8),A :_cea .A };};func _ffb (_gbc int )[]uint {var _aa []uint ;_ead :=_gbc ;
_dde :=_ead /8;if _dde !=0{for _bba :=0;_bba < _dde ;_bba ++{_aa =append (_aa ,8);};_fda :=_ead %8;_ead =0;if _fda !=0{_ead =_fda ;};};_ffad :=_ead /4;if _ffad !=0{for _de :=0;_de < _ffad ;_de ++{_aa =append (_aa ,4);};_dce :=_ead %4;_ead =0;if _dce !=0{_ead =_dce ;
};};_fg :=_ead /2;if _fg !=0{for _bbad :=0;_bbad < _fg ;_bbad ++{_aa =append (_aa ,2);};};return _aa ;};func _afec (_gddg _e .Image )(Image ,error ){if _fba ,_beba :=_gddg .(*Gray16 );_beba {return _fba .Copy (),nil ;};_bcge :=_gddg .Bounds ();_feeb ,_eabaf :=NewImage (_bcge .Max .X ,_bcge .Max .Y ,16,1,nil ,nil ,nil );
if _eabaf !=nil {return nil ,_eabaf ;};_eggb (_gddg ,_feeb ,_bcge );return _feeb ,nil ;};func (_fff *Monochrome )Scale (scale float64 )(*Monochrome ,error ){var _cba bool ;_dcgb :=scale ;if scale < 1{_dcgb =1/scale ;_cba =true ;};_ecbg :=NextPowerOf2 (uint (_dcgb ));
if InDelta (float64 (_ecbg ),_dcgb ,0.001){if _cba {return _fff .ReduceBinary (_dcgb );};return _fff .ExpandBinary (int (_ecbg ));};_aefc :=int (_d .RoundToEven (float64 (_fff .Width )*scale ));_ffdc :=int (_d .RoundToEven (float64 (_fff .Height )*scale ));
return _fff .ScaleLow (_aefc ,_ffdc );};func (_fefb *ImageBase )setEightBytes (_eggg int ,_fgeac uint64 )error {_bacf :=_fefb .BytesPerLine -(_eggg %_fefb .BytesPerLine );if _fefb .BytesPerLine !=_fefb .Width >>3{_bacf --;};if _bacf >=8{return _fefb .setEightFullBytes (_eggg ,_fgeac );
};return _fefb .setEightPartlyBytes (_eggg ,_bacf ,_fgeac );};func (_egad *Gray8 )GrayAt (x ,y int )_da .Gray {_gcef ,_ :=ColorAtGray8BPC (x ,y ,_egad .BytesPerLine ,_egad .Data ,_egad .Decode );return _gcef ;};func (_cggg *Gray16 )At (x ,y int )_da .Color {_bgbf ,_ :=_cggg .ColorAt (x ,y );
return _bgbf };func _gfb (_cefb _e .Image )(Image ,error ){if _aea ,_cgg :=_cefb .(*Monochrome );_cgg {return _aea ,nil ;};_egd :=_cefb .Bounds ();var _adge Gray ;switch _ecb :=_cefb .(type ){case Gray :_adge =_ecb ;case NRGBA :_adge =&Gray8 {ImageBase :NewImageBase (_egd .Max .X ,_egd .Max .Y ,8,1,nil ,nil ,nil )};
_gcd (_adge ,_ecb ,_egd );case nrgba64 :_adge =&Gray8 {ImageBase :NewImageBase (_egd .Max .X ,_egd .Max .Y ,8,1,nil ,nil ,nil )};_dgdc (_adge ,_ecb ,_egd );default:_cca ,_ddcc :=GrayConverter .Convert (_cefb );if _ddcc !=nil {return nil ,_ddcc ;};_adge =_cca .(Gray );
};_bebb ,_fdadd :=NewImage (_egd .Max .X ,_egd .Max .Y ,1,1,nil ,nil ,nil );if _fdadd !=nil {return nil ,_fdadd ;};_dfd :=_bebb .(*Monochrome );_aae :=AutoThresholdTriangle (GrayHistogram (_adge ));for _cbbb :=0;_cbbb < _egd .Max .X ;_cbbb ++{for _bbfb :=0;
_bbfb < _egd .Max .Y ;_bbfb ++{_gbd :=_gaaf (_adge .GrayAt (_cbbb ,_bbfb ),monochromeModel (_aae ));_dfd .SetGray (_cbbb ,_bbfb ,_gbd );};};return _bebb ,nil ;};type Gray2 struct{ImageBase };func (_cefbg *Monochrome )SetGray (x ,y int ,g _da .Gray ){_fgdd :=y *_cefbg .BytesPerLine +x >>3;
if _fgdd > len (_cefbg .Data )-1{return ;};g =_gaaf (g ,monochromeModel (_cefbg .ModelThreshold ));_cefbg .setGray (x ,g ,_fgdd );};const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;
PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;
PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_daddf *RGBA32 )Validate ()error {if len (_daddf .Data )!=3*_daddf .Width *_daddf .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};func _df ()(_ffa [256]uint16 ){for _cdf :=0;_cdf < 256;_cdf ++{if _cdf &0x01!=0{_ffa [_cdf ]|=0x3;};if _cdf &0x02!=0{_ffa [_cdf ]|=0xc;};if _cdf &0x04!=0{_ffa [_cdf ]|=0x30;};if _cdf &0x08!=0{_ffa [_cdf ]|=0xc0;};if _cdf &0x10!=0{_ffa [_cdf ]|=0x300;
};if _cdf &0x20!=0{_ffa [_cdf ]|=0xc00;};if _cdf &0x40!=0{_ffa [_cdf ]|=0x3000;};if _cdf &0x80!=0{_ffa [_cdf ]|=0xc000;};};return _ffa ;};type nrgba64 interface{NRGBA64At (_bfee ,_cedc int )_da .NRGBA64 ;SetNRGBA64 (_feebd ,_dbeac int ,_bbdf _da .NRGBA64 );
};func (_ecea *ImageBase )copy ()ImageBase {_dcdad :=*_ecea ;_dcdad .Data =make ([]byte ,len (_ecea .Data ));copy (_dcdad .Data ,_ecea .Data );return _dcdad ;};func GetConverter (bitsPerComponent ,colorComponents int )(ColorConverter ,error ){switch colorComponents {case 1:switch bitsPerComponent {case 1:return MonochromeConverter ,nil ;
case 2:return Gray2Converter ,nil ;case 4:return Gray4Converter ,nil ;case 8:return GrayConverter ,nil ;case 16:return Gray16Converter ,nil ;};case 3:switch bitsPerComponent {case 4:return NRGBA16Converter ,nil ;case 8:return NRGBAConverter ,nil ;case 16:return NRGBA64Converter ,nil ;
};case 4:return CMYKConverter ,nil ;};return nil ,_ef .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006c\u006f\u0072\u0043o\u006e\u0076\u0065\u0072\u0074\u0065\u0072\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072\u0073\u002e\u0020\u0042\u0069\u0074\u0073\u0050\u0065\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u003a\u0020\u0025\u0064\u002c\u0020\u0043\u006f\u006co\u0072\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006et\u0073\u003a \u0025\u0064",bitsPerComponent ,colorComponents );
};func (_fcbd *Monochrome )getBit (_aged ,_cbgf int )uint8 {return _fcbd .Data [_aged +(_cbgf >>3)]>>uint (7-(_cbgf &7))&1;};func (_gdeec *Gray4 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtGray4BPC (x ,y ,_gdeec .BytesPerLine ,_gdeec .Data ,_gdeec .Decode );
};func (_ecde *RGBA32 )Copy ()Image {return &RGBA32 {ImageBase :_ecde .copy ()}};func _fedb (_fabb _e .Image )(Image ,error ){if _fcf ,_dga :=_fabb .(*CMYK32 );_dga {return _fcf .Copy (),nil ;};_cbdg :=_fabb .Bounds ();_adf ,_dcc :=NewImage (_cbdg .Max .X ,_cbdg .Max .Y ,8,4,nil ,nil ,nil );
if _dcc !=nil {return nil ,_dcc ;};switch _gaa :=_fabb .(type ){case CMYK :_gec (_gaa ,_adf .(CMYK ),_cbdg );case Gray :_def (_gaa ,_adf .(CMYK ),_cbdg );case NRGBA :_baad (_gaa ,_adf .(CMYK ),_cbdg );case RGBA :_ebb (_gaa ,_adf .(CMYK ),_cbdg );default:_ccg (_fabb ,_adf ,_cbdg );
};return _adf ,nil ;};type CMYK32 struct{ImageBase };func _cge (_fega ,_baa *Monochrome ,_eda []byte ,_fag int )(_ddg error ){var (_daea ,_fdad ,_aag ,_afcb ,_ecgg ,_eba ,_afg ,_ggeb int ;_bfc ,_gfe ,_bbb ,_eeef uint32 ;_aaa ,_dcgg byte ;_gbcg uint16 ;
);_dgg :=make ([]byte ,4);_egb :=make ([]byte ,4);for _aag =0;_aag < _fega .Height -1;_aag ,_afcb =_aag +2,_afcb +1{_daea =_aag *_fega .BytesPerLine ;_fdad =_afcb *_baa .BytesPerLine ;for _ecgg ,_eba =0,0;_ecgg < _fag ;_ecgg ,_eba =_ecgg +4,_eba +1{for _afg =0;
_afg < 4;_afg ++{_ggeb =_daea +_ecgg +_afg ;if _ggeb <=len (_fega .Data )-1&&_ggeb < _daea +_fega .BytesPerLine {_dgg [_afg ]=_fega .Data [_ggeb ];}else {_dgg [_afg ]=0x00;};_ggeb =_daea +_fega .BytesPerLine +_ecgg +_afg ;if _ggeb <=len (_fega .Data )-1&&_ggeb < _daea +(2*_fega .BytesPerLine ){_egb [_afg ]=_fega .Data [_ggeb ];
}else {_egb [_afg ]=0x00;};};_bfc =_fa .BigEndian .Uint32 (_dgg );_gfe =_fa .BigEndian .Uint32 (_egb );_bbb =_bfc &_gfe ;_bbb |=_bbb <<1;_eeef =_bfc |_gfe ;_eeef &=_eeef <<1;_gfe =_bbb &_eeef ;_gfe &=0xaaaaaaaa;_bfc =_gfe |(_gfe <<7);_aaa =byte (_bfc >>24);
_dcgg =byte ((_bfc >>8)&0xff);_ggeb =_fdad +_eba ;if _ggeb +1==len (_baa .Data )-1||_ggeb +1>=_fdad +_baa .BytesPerLine {if _ddg =_baa .setByte (_ggeb ,_eda [_aaa ]);_ddg !=nil {return _ef .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_ggeb );
};}else {_gbcg =(uint16 (_eda [_aaa ])<<8)|uint16 (_eda [_dcgg ]);if _ddg =_baa .setTwoBytes (_ggeb ,_gbcg );_ddg !=nil {return _ef .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_ggeb );
};_eba ++;};};};return nil ;};func (_badab *Gray4 )At (x ,y int )_da .Color {_ceed ,_ :=_badab .ColorAt (x ,y );return _ceed };func (_eeg *NRGBA16 )setNRGBA (_facd ,_gebg ,_cafb int ,_fcc _da .NRGBA ){if _facd *3%2==0{_eeg .Data [_cafb ]=(_fcc .R >>4)<<4|(_fcc .G >>4);
_eeg .Data [_cafb +1]=(_fcc .B >>4)<<4|(_eeg .Data [_cafb +1]&0xf);}else {_eeg .Data [_cafb ]=(_eeg .Data [_cafb ]&0xf0)|(_fcc .R >>4);_eeg .Data [_cafb +1]=(_fcc .G >>4)<<4|(_fcc .B >>4);};if _eeg .Alpha !=nil {_adc :=_gebg *BytesPerLine (_eeg .Width ,4,1);
if _adc < len (_eeg .Alpha ){if _facd %2==0{_eeg .Alpha [_adc ]=(_fcc .A >>uint (4))<<uint (4)|(_eeg .Alpha [_cafb ]&0xf);}else {_eeg .Alpha [_adc ]=(_eeg .Alpha [_adc ]&0xf0)|(_fcc .A >>uint (4));};};};};func IsGrayImgBlackAndWhite (i *_e .Gray )bool {return _egafb (i )};
func (_ggebf *NRGBA64 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtNRGBA64 (x ,y ,_ggebf .Width ,_ggebf .Data ,_ggebf .Alpha ,_ggebf .Decode );};func (_cebg *RGBA32 )SetRGBA (x ,y int ,c _da .RGBA ){_cbcg :=y *_cebg .Width +x ;_cefe :=3*_cbcg ;
if _cefe +2>=len (_cebg .Data ){return ;};_cebg .setRGBA (_cbcg ,c );};func _ebb (_fde RGBA ,_cde CMYK ,_cefa _e .Rectangle ){for _dea :=0;_dea < _cefa .Max .X ;_dea ++{for _gbg :=0;_gbg < _cefa .Max .Y ;_gbg ++{_gcgg :=_fde .RGBAAt (_dea ,_gbg );_cde .SetCMYK (_dea ,_gbg ,_eagg (_gcgg ));
};};};func _dgaac (_adfd NRGBA ,_geaf Gray ,_cccae _e .Rectangle ){for _cefbb :=0;_cefbb < _cccae .Max .X ;_cefbb ++{for _gdad :=0;_gdad < _cccae .Max .Y ;_gdad ++{_dadab :=_acbf (_adfd .NRGBAAt (_cefbb ,_gdad ));_geaf .SetGray (_cefbb ,_gdad ,_dadab );
};};};func (_dabf *NRGBA32 )NRGBAAt (x ,y int )_da .NRGBA {_fdeb ,_ :=ColorAtNRGBA32 (x ,y ,_dabf .Width ,_dabf .Data ,_dabf .Alpha ,_dabf .Decode );return _fdeb ;};func (_eade *ImageBase )Pix ()[]byte {return _eade .Data };func ColorAtRGBA32 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_da .RGBA ,error ){_cfgg :=y *width +x ;
_bdfga :=3*_cfgg ;if _bdfga +2>=len (data ){return _da .RGBA {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_caga :=uint8 (0xff);if alpha !=nil &&len (alpha )> _cfgg {_caga =alpha [_cfgg ];};_cgfcd ,_gfda ,_efdd :=data [_bdfga ],data [_bdfga +1],data [_bdfga +2];if len (decode )==6{_cgfcd =uint8 (uint32 (LinearInterpolate (float64 (_cgfcd ),0,255,decode [0],decode [1]))&0xff);
_gfda =uint8 (uint32 (LinearInterpolate (float64 (_gfda ),0,255,decode [2],decode [3]))&0xff);_efdd =uint8 (uint32 (LinearInterpolate (float64 (_efdd ),0,255,decode [4],decode [5]))&0xff);};return _da .RGBA {R :_cgfcd ,G :_gfda ,B :_efdd ,A :_caga },nil ;
};func (_aacg *NRGBA64 )At (x ,y int )_da .Color {_bceg ,_ :=_aacg .ColorAt (x ,y );return _bceg };func _cf (_cfd *Monochrome ,_eff int ,_dd []uint )(*Monochrome ,error ){_bf :=_eff *_cfd .Width ;_eg :=_eff *_cfd .Height ;_ea :=_cagd (_bf ,_eg );for _ab ,_af :=range _dd {var _g error ;
switch _af {case 2:_g =_bdf (_ea ,_cfd );case 4:_g =_feg (_ea ,_cfd );case 8:_g =_fbf (_ea ,_cfd );};if _g !=nil {return nil ,_g ;};if _ab !=len (_dd )-1{_cfd =_ea .copy ();};};return _ea ,nil ;};func AddDataPadding (width ,height ,bitsPerComponent ,colorComponents int ,data []byte )([]byte ,error ){_fbfb :=BytesPerLine (width ,bitsPerComponent ,colorComponents );
if _fbfb ==width *colorComponents *bitsPerComponent /8{return data ,nil ;};_cgbac :=width *colorComponents *bitsPerComponent ;_dgca :=_fbfb *8;_cabe :=8-(_dgca -_cgbac );_eaca :=_c .NewReader (data );_faeb :=_fbfb -1;_bge :=make ([]byte ,_faeb );_eeafe :=make ([]byte ,height *_fbfb );
_cbba :=_c .NewWriterMSB (_eeafe );var _daeb uint64 ;var _ffg error ;for _acfd :=0;_acfd < height ;_acfd ++{_ ,_ffg =_eaca .Read (_bge );if _ffg !=nil {return nil ,_ffg ;};_ ,_ffg =_cbba .Write (_bge );if _ffg !=nil {return nil ,_ffg ;};_daeb ,_ffg =_eaca .ReadBits (byte (_cabe ));
if _ffg !=nil {return nil ,_ffg ;};_ ,_ffg =_cbba .WriteBits (_daeb ,_cabe );if _ffg !=nil {return nil ,_ffg ;};_cbba .FinishByte ();};return _eeafe ,nil ;};func (_adec *Monochrome )InverseData ()error {return _adec .RasterOperation (0,0,_adec .Width ,_adec .Height ,PixNotDst ,nil ,0,0);
};func (_aeef *Gray2 )At (x ,y int )_da .Color {_gcff ,_ :=_aeef .ColorAt (x ,y );return _gcff };func _cddd (_fdce ,_fad NRGBA ,_abga _e .Rectangle ){for _dfdde :=0;_dfdde < _abga .Max .X ;_dfdde ++{for _afegd :=0;_afegd < _abga .Max .Y ;_afegd ++{_fad .SetNRGBA (_dfdde ,_afegd ,_fdce .NRGBAAt (_dfdde ,_afegd ));
};};};func (_cdee *Monochrome )getBitAt (_ecegd ,_eccc int )bool {_faaf :=_eccc *_cdee .BytesPerLine +(_ecegd >>3);_gcgb :=_ecegd &0x07;_bgbb :=uint (7-_gcgb );if _faaf > len (_cdee .Data )-1{return false ;};if (_cdee .Data [_faaf ]>>_bgbb )&0x01>=1{return true ;
};return false ;};func ColorAt (x ,y ,width ,bitsPerColor ,colorComponents ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_da .Color ,error ){switch colorComponents {case 1:return ColorAtGrayscale (x ,y ,bitsPerColor ,bytesPerLine ,data ,decode );
case 3:return ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor ,data ,alpha ,decode );case 4:return ColorAtCMYK (x ,y ,width ,data ,decode );default:return nil ,_ef .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063o\u006c\u006f\u0072\u0020\u0063\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0074h\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0064",colorComponents );
};};func _aedef (_cbfd *_e .Gray ,_eggd uint8 )*_e .Gray {_agbgb :=_cbfd .Bounds ();_ccbc :=_e .NewGray (_agbgb );for _afcc :=0;_afcc < _agbgb .Dx ();_afcc ++{for _agfb :=0;_agfb < _agbgb .Dy ();_agfb ++{_efcb :=_cbfd .GrayAt (_afcc ,_agfb );_ccbc .SetGray (_afcc ,_agfb ,_da .Gray {Y :_cdaf (_efcb .Y ,_eggd )});
};};return _ccbc ;};func _acec (_ddf _e .Image )(Image ,error ){if _ceaf ,_dgcc :=_ddf .(*Gray2 );_dgcc {return _ceaf .Copy (),nil ;};_gefae :=_ddf .Bounds ();_dbab ,_dadg :=NewImage (_gefae .Max .X ,_gefae .Max .Y ,2,1,nil ,nil ,nil );if _dadg !=nil {return nil ,_dadg ;
};_eggb (_ddf ,_dbab ,_gefae );return _dbab ,nil ;};func (_ecff *Gray8 )Set (x ,y int ,c _da .Color ){_ebba :=y *_ecff .BytesPerLine +x ;if _ebba > len (_ecff .Data )-1{return ;};_gdce :=_da .GrayModel .Convert (c );_ecff .Data [_ebba ]=_gdce .(_da .Gray ).Y ;
};const (_abgf shift =iota ;_gceg ;);func _gaaf (_ffae _da .Gray ,_ggg monochromeModel )_da .Gray {if _ffae .Y > uint8 (_ggg ){return _da .Gray {Y :_d .MaxUint8 };};return _da .Gray {};};func _acf (_ffdb _da .NRGBA )_da .RGBA {_ade ,_fbg ,_ecac ,_feab :=_ffdb .RGBA ();
return _da .RGBA {R :uint8 (_ade >>8),G :uint8 (_fbg >>8),B :uint8 (_ecac >>8),A :uint8 (_feab >>8)};};func ColorAtNRGBA (x ,y ,width ,bytesPerLine ,bitsPerColor int ,data ,alpha []byte ,decode []float64 )(_da .Color ,error ){switch bitsPerColor {case 4:return ColorAtNRGBA16 (x ,y ,width ,bytesPerLine ,data ,alpha ,decode );
case 8:return ColorAtNRGBA32 (x ,y ,width ,data ,alpha ,decode );case 16:return ColorAtNRGBA64 (x ,y ,width ,data ,alpha ,decode );default:return nil ,_ef .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074\u0065\u0064 \u0072\u0067\u0062\u0020b\u0069\u0074\u0073\u0020\u0070\u0065\u0072\u0020\u0063\u006f\u006c\u006f\u0072\u0020\u0061\u006d\u006f\u0075\u006e\u0074\u003a\u0020\u0027\u0025\u0064\u0027",bitsPerColor );
};};type Gray16 struct{ImageBase };func _acbea (_bfbe CMYK ,_ebfgf RGBA ,_fgebc _e .Rectangle ){for _bdfae :=0;_bdfae < _fgebc .Max .X ;_bdfae ++{for _dfac :=0;_dfac < _fgebc .Max .Y ;_dfac ++{_dagg :=_bfbe .CMYKAt (_bdfae ,_dfac );_ebfgf .SetRGBA (_bdfae ,_dfac ,_dfe (_dagg ));
};};};func ColorAtNRGBA16 (x ,y ,width ,bytesPerLine int ,data ,alpha []byte ,decode []float64 )(_da .NRGBA ,error ){_bddc :=y *bytesPerLine +x *3/2;if _bddc +1>=len (data ){return _da .NRGBA {},_faf (x ,y );};const (_fgg =0xf;_gfdc =uint8 (0xff););_ffgf :=_gfdc ;
if alpha !=nil {_acc :=y *BytesPerLine (width ,4,1);if _acc < len (alpha ){if x %2==0{_ffgf =(alpha [_acc ]>>uint (4))&_fgg ;}else {_ffgf =alpha [_acc ]&_fgg ;};_ffgf |=_ffgf <<4;};};var _dbag ,_ddag ,_dbec uint8 ;if x *3%2==0{_dbag =(data [_bddc ]>>uint (4))&_fgg ;
_ddag =data [_bddc ]&_fgg ;_dbec =(data [_bddc +1]>>uint (4))&_fgg ;}else {_dbag =data [_bddc ]&_fgg ;_ddag =(data [_bddc +1]>>uint (4))&_fgg ;_dbec =data [_bddc +1]&_fgg ;};if len (decode )==6{_dbag =uint8 (uint32 (LinearInterpolate (float64 (_dbag ),0,15,decode [0],decode [1]))&0xf);
_ddag =uint8 (uint32 (LinearInterpolate (float64 (_ddag ),0,15,decode [2],decode [3]))&0xf);_dbec =uint8 (uint32 (LinearInterpolate (float64 (_dbec ),0,15,decode [4],decode [5]))&0xf);};return _da .NRGBA {R :(_dbag <<4)|(_dbag &0xf),G :(_ddag <<4)|(_ddag &0xf),B :(_dbec <<4)|(_dbec &0xf),A :_ffgf },nil ;
};type ColorConverter interface{Convert (_aed _e .Image )(Image ,error );};type Monochrome struct{ImageBase ;ModelThreshold uint8 ;};func (_defa *Gray2 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtGray2BPC (x ,y ,_defa .BytesPerLine ,_defa .Data ,_defa .Decode );
};var _ _e .Image =&Gray4 {};func (_dgfb *Gray16 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_dgfb .Width ,Y :_dgfb .Height }};};func (_eca *CMYK32 )Base ()*ImageBase {return &_eca .ImageBase };func (_cdd *Gray2 )Base ()*ImageBase {return &_cdd .ImageBase };
func (_edg *NRGBA32 )setRGBA (_dgbb int ,_fcffa _da .NRGBA ){_gafa :=3*_dgbb ;_edg .Data [_gafa ]=_fcffa .R ;_edg .Data [_gafa +1]=_fcffa .G ;_edg .Data [_gafa +2]=_fcffa .B ;if _dgbb < len (_edg .Alpha ){_edg .Alpha [_dgbb ]=_fcffa .A ;};};var _ _e .Image =&Monochrome {};
func (_ddcfe *Gray4 )Set (x ,y int ,c _da .Color ){if x >=_ddcfe .Width ||y >=_ddcfe .Height {return ;};_bgfb :=Gray4Model .Convert (c ).(_da .Gray );_ddcfe .setGray (x ,y ,_bgfb );};func _edac (_cfef ,_gacc RGBA ,_dfag _e .Rectangle ){for _befgd :=0;_befgd < _dfag .Max .X ;
_befgd ++{for _cbcdf :=0;_cbcdf < _dfag .Max .Y ;_cbcdf ++{_gacc .SetRGBA (_befgd ,_cbcdf ,_cfef .RGBAAt (_befgd ,_cbcdf ));};};};func (_dcef *Gray2 )Histogram ()(_gade [256]int ){for _edcb :=0;_edcb < _dcef .Width ;_edcb ++{for _feag :=0;_feag < _dcef .Height ;
_feag ++{_gade [_dcef .GrayAt (_edcb ,_feag ).Y ]++;};};return _gade ;};var _ Image =&CMYK32 {};func (_ecf *CMYK32 )SetCMYK (x ,y int ,c _da .CMYK ){_ace :=4*(y *_ecf .Width +x );if _ace +3>=len (_ecf .Data ){return ;};_ecf .Data [_ace ]=c .C ;_ecf .Data [_ace +1]=c .M ;
_ecf .Data [_ace +2]=c .Y ;_ecf .Data [_ace +3]=c .K ;};func (_gccgg *ImageBase )setByte (_eagb int ,_badc byte )error {if _eagb > len (_gccgg .Data )-1{return _b .New ("\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_gccgg .Data [_eagb ]=_badc ;return nil ;};func (_cgfc *NRGBA64 )ColorModel ()_da .Model {return _da .NRGBA64Model };func ColorAtGray1BPC (x ,y ,bytesPerLine int ,data []byte ,decode []float64 )(_da .Gray ,error ){_aegf :=y *bytesPerLine +x >>3;if _aegf >=len (data ){return _da .Gray {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};_cad :=data [_aegf ]>>uint (7-(x &7))&1;if len (decode )==2{_cad =uint8 (LinearInterpolate (float64 (_cad ),0.0,1.0,decode [0],decode [1]))&1;};return _da .Gray {Y :_cad *255},nil ;};func _cdaf (_gffc ,_abcf uint8 )uint8 {if _gffc < _abcf {return 255;
};return 0;};func (_ddfa *Gray4 )Copy ()Image {return &Gray4 {ImageBase :_ddfa .copy ()}};func _baad (_adgc NRGBA ,_gce CMYK ,_gefa _e .Rectangle ){for _gee :=0;_gee < _gefa .Max .X ;_gee ++{for _dced :=0;_dced < _gefa .Max .Y ;_dced ++{_eadf :=_adgc .NRGBAAt (_gee ,_dced );
_gce .SetCMYK (_gee ,_dced ,_fcdg (_eadf ));};};};func (_bagd *RGBA32 )RGBAAt (x ,y int )_da .RGBA {_eefb ,_ :=ColorAtRGBA32 (x ,y ,_bagd .Width ,_bagd .Data ,_bagd .Alpha ,_bagd .Decode );return _eefb ;};func _fddf (_aggc _e .Image )(Image ,error ){if _ddge ,_deda :=_aggc .(*RGBA32 );
_deda {return _ddge .Copy (),nil ;};_aedf ,_gdg ,_dfdff :=_gag (_aggc ,1);_bcgf :=&RGBA32 {ImageBase :NewImageBase (_aedf .Max .X ,_aedf .Max .Y ,8,3,nil ,_dfdff ,nil )};_abgdb (_aggc ,_bcgf ,_aedf );if len (_dfdff )!=0&&!_gdg {if _bdbe :=_fcea (_dfdff ,_bcgf );
_bdbe !=nil {return nil ,_bdbe ;};};return _bcgf ,nil ;};func (_eefg *NRGBA32 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_eefg .Width ,Y :_eefg .Height }};};func (_aab *NRGBA32 )ColorModel ()_da .Model {return _da .NRGBAModel };var _ _e .Image =&RGBA32 {};
func (_fgb *ImageBase )MakeAlpha (){_fgb .newAlpha ()};func _adb ()(_efbe [256]uint32 ){for _ffac :=0;_ffac < 256;_ffac ++{if _ffac &0x01!=0{_efbe [_ffac ]|=0xf;};if _ffac &0x02!=0{_efbe [_ffac ]|=0xf0;};if _ffac &0x04!=0{_efbe [_ffac ]|=0xf00;};if _ffac &0x08!=0{_efbe [_ffac ]|=0xf000;
};if _ffac &0x10!=0{_efbe [_ffac ]|=0xf0000;};if _ffac &0x20!=0{_efbe [_ffac ]|=0xf00000;};if _ffac &0x40!=0{_efbe [_ffac ]|=0xf000000;};if _ffac &0x80!=0{_efbe [_ffac ]|=0xf0000000;};};return _efbe ;};var _ Gray =&Gray16 {};func (_dggcc *Gray2 )Validate ()error {if len (_dggcc .Data )!=_dggcc .Height *_dggcc .BytesPerLine {return ErrInvalidImage ;
};return nil ;};func _bbbfa (_fcba nrgba64 ,_gagg NRGBA ,_ecbfb _e .Rectangle ){for _edcf :=0;_edcf < _ecbfb .Max .X ;_edcf ++{for _dgbbg :=0;_dgbbg < _ecbfb .Max .Y ;_dgbbg ++{_egcbd :=_fcba .NRGBA64At (_edcf ,_dgbbg );_gagg .SetNRGBA (_edcf ,_dgbbg ,_bgb (_egcbd ));
};};};var (_fcd =_df ();_efb =_adb ();_ec =_effe (););func (_ddffc *RGBA32 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtRGBA32 (x ,y ,_ddffc .Width ,_ddffc .Data ,_ddffc .Alpha ,_ddffc .Decode );};func (_abgd *monochromeThresholdConverter )Convert (img _e .Image )(Image ,error ){if _gcfc ,_afeg :=img .(*Monochrome );
_afeg {return _gcfc .Copy (),nil ;};_cgf :=img .Bounds ();_eabda ,_eeb :=NewImage (_cgf .Max .X ,_cgf .Max .Y ,1,1,nil ,nil ,nil );if _eeb !=nil {return nil ,_eeb ;};_eabda .(*Monochrome ).ModelThreshold =_abgd .Threshold ;for _bdcd :=0;_bdcd < _cgf .Max .X ;
_bdcd ++{for _eae :=0;_eae < _cgf .Max .Y ;_eae ++{_cda :=img .At (_bdcd ,_eae );_eabda .Set (_bdcd ,_eae ,_cda );};};return _eabda ,nil ;};func (_eaea *RGBA32 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_eaea .Width ,Y :_eaea .Height }};
};type NRGBA16 struct{ImageBase };func (_ddbc *ImageBase )setFourBytes (_eaaf int ,_aaac uint32 )error {if _eaaf +3> len (_ddbc .Data )-1{return _ef .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_eaaf );
};_ddbc .Data [_eaaf ]=byte ((_aaac &0xff000000)>>24);_ddbc .Data [_eaaf +1]=byte ((_aaac &0xff0000)>>16);_ddbc .Data [_eaaf +2]=byte ((_aaac &0xff00)>>8);_ddbc .Data [_eaaf +3]=byte (_aaac &0xff);return nil ;};func _eagg (_dbbg _da .RGBA )_da .CMYK {_deae ,_geb ,_gfca ,_egge :=_da .RGBToCMYK (_dbbg .R ,_dbbg .G ,_dbbg .B );
return _da .CMYK {C :_deae ,M :_geb ,Y :_gfca ,K :_egge };};var (MonochromeConverter =ConverterFunc (_gfb );Gray2Converter =ConverterFunc (_acec );Gray4Converter =ConverterFunc (_bfbf );GrayConverter =ConverterFunc (_feaf );Gray16Converter =ConverterFunc (_afec );
NRGBA16Converter =ConverterFunc (_aaacf );NRGBAConverter =ConverterFunc (_aaga );NRGBA64Converter =ConverterFunc (_agaac );RGBAConverter =ConverterFunc (_fddf );CMYKConverter =ConverterFunc (_fedb ););func _efd (_eaf _da .Gray )_da .CMYK {return _da .CMYK {K :0xff-_eaf .Y }};
type Histogramer interface{Histogram ()[256]int ;};func _dbbb (_bdgd *Monochrome ,_efbg ,_agecf ,_fcff ,_bbgdb int ,_gfaaa RasterOperator ,_dbea *Monochrome ,_cceb ,_fgbe int )error {if _bdgd ==nil {return _b .New ("\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _gfaaa ==PixDst {return nil ;};switch _gfaaa {case PixClr ,PixSet ,PixNotDst :_edab (_bdgd ,_efbg ,_agecf ,_fcff ,_bbgdb ,_gfaaa );return nil ;};if _dbea ==nil {_ee .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _b .New ("\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _eadce :=_ggef (_bdgd ,_efbg ,_agecf ,_fcff ,_bbgdb ,_gfaaa ,_dbea ,_cceb ,_fgbe );_eadce !=nil {return _eadce ;};return nil ;};func (_cdg *Gray8 )SetGray (x ,y int ,g _da .Gray ){_fdac :=y *_cdg .BytesPerLine +x ;
if _fdac > len (_cdg .Data )-1{return ;};_cdg .Data [_fdac ]=g .Y ;};func (_bbda *NRGBA64 )Copy ()Image {return &NRGBA64 {ImageBase :_bbda .copy ()}};func (_dff *Monochrome )ReduceBinary (factor float64 )(*Monochrome ,error ){_bae :=_dcdf (uint (factor ));
if !IsPowerOf2 (uint (factor )){_bae ++;};_cccb :=make ([]int ,_bae );for _ceba :=range _cccb {_cccb [_ceba ]=4;};_bfe ,_acfg :=_aaf (_dff ,_cccb ...);if _acfg !=nil {return nil ,_acfg ;};return _bfe ,nil ;};func (_dge *CMYK32 )ColorModel ()_da .Model {return _da .CMYKModel };
func (_bgdf *Monochrome )copy ()*Monochrome {_bdd :=_cagd (_bgdf .Width ,_bgdf .Height );_bdd .ModelThreshold =_bgdf .ModelThreshold ;_bdd .Data =make ([]byte ,len (_bgdf .Data ));copy (_bdd .Data ,_bgdf .Data );if len (_bgdf .Decode )!=0{_bdd .Decode =make ([]float64 ,len (_bgdf .Decode ));
copy (_bdd .Decode ,_bgdf .Decode );};if len (_bgdf .Alpha )!=0{_bdd .Alpha =make ([]byte ,len (_bgdf .Alpha ));copy (_bdd .Alpha ,_bgdf .Alpha );};return _bdd ;};func _aced (_ceb _da .CMYK )_da .NRGBA {_begc ,_dcfe ,_dbe :=_da .CMYKToRGB (_ceb .C ,_ceb .M ,_ceb .Y ,_ceb .K );
return _da .NRGBA {R :_begc ,G :_dcfe ,B :_dbe ,A :0xff};};func _edab (_bffa *Monochrome ,_cgfg ,_gedg ,_edfgc ,_acee int ,_faba RasterOperator ){if _cgfg < 0{_edfgc +=_cgfg ;_cgfg =0;};_edda :=_cgfg +_edfgc -_bffa .Width ;if _edda > 0{_edfgc -=_edda ;
};if _gedg < 0{_acee +=_gedg ;_gedg =0;};_ecdc :=_gedg +_acee -_bffa .Height ;if _ecdc > 0{_acee -=_ecdc ;};if _edfgc <=0||_acee <=0{return ;};if (_cgfg &7)==0{_dca (_bffa ,_cgfg ,_gedg ,_edfgc ,_acee ,_faba );}else {_dgcaa (_bffa ,_cgfg ,_gedg ,_edfgc ,_acee ,_faba );
};};func (_ccca *Monochrome )ExpandBinary (factor int )(*Monochrome ,error ){if !IsPowerOf2 (uint (factor )){return nil ,_ef .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0065\u0078\u0070\u0061\u006e\u0064\u0020b\u0069n\u0061\u0072\u0079\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020\u0025\u0064",factor );
};return _db (_ccca ,factor );};func (_ffba *CMYK32 )Validate ()error {if len (_ffba .Data )!=4*_ffba .Width *_ffba .Height {return _b .New ("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0069\u006da\u0067\u0065\u0020\u0064\u0061\u0074\u0061 s\u0069\u007a\u0065\u0020f\u006f\u0072\u0020\u0070\u0072\u006f\u0076\u0069\u0064ed\u0020\u0064i\u006d\u0065\u006e\u0073\u0069\u006f\u006e\u0073");
};return nil ;};var _ Image =&Gray8 {};func _ccg (_ddbf _e .Image ,_dcda Image ,_eaac _e .Rectangle ){for _gead :=0;_gead < _eaac .Max .X ;_gead ++{for _caf :=0;_caf < _eaac .Max .Y ;_caf ++{_abfd :=_ddbf .At (_gead ,_caf );_dcda .Set (_gead ,_caf ,_abfd );
};};};func (_aebb *ImageBase )HasAlpha ()bool {if _aebb .Alpha ==nil {return false ;};for _gga :=range _aebb .Alpha {if _aebb .Alpha [_gga ]!=0xff{return true ;};};return false ;};func _feg (_dc ,_dg *Monochrome )(_daf error ){_cbb :=_dg .BytesPerLine ;
_gd :=_dc .BytesPerLine ;_adg :=_dg .BytesPerLine *4-_dc .BytesPerLine ;var (_eee ,_gdd byte ;_cg uint32 ;_bg ,_cfa ,_aeb ,_bga ,_ce ,_gb ,_abg int ;);for _aeb =0;_aeb < _dg .Height ;_aeb ++{_bg =_aeb *_cbb ;_cfa =4*_aeb *_gd ;for _bga =0;_bga < _cbb ;
_bga ++{_eee =_dg .Data [_bg +_bga ];_cg =_efb [_eee ];_gb =_cfa +_bga *4;if _adg !=0&&(_bga +1)*4> _dc .BytesPerLine {for _ce =_adg ;_ce > 0;_ce --{_gdd =byte ((_cg >>uint (_ce *8))&0xff);_abg =_gb +(_adg -_ce );if _daf =_dc .setByte (_abg ,_gdd );_daf !=nil {return _daf ;
};};}else if _daf =_dc .setFourBytes (_gb ,_cg );_daf !=nil {return _daf ;};if _daf =_dc .setFourBytes (_cfa +_bga *4,_efb [_dg .Data [_bg +_bga ]]);_daf !=nil {return _daf ;};};for _ce =1;_ce < 4;_ce ++{for _bga =0;_bga < _gd ;_bga ++{if _daf =_dc .setByte (_cfa +_ce *_gd +_bga ,_dc .Data [_cfa +_bga ]);
_daf !=nil {return _daf ;};};};};return nil ;};func (_efbf *Monochrome )AddPadding ()(_effa error ){if _faa :=((_efbf .Width *_efbf .Height )+7)>>3;len (_efbf .Data )< _faa {return _ef .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (_efbf .Data ),_faa );
};_ffaf :=_efbf .Width %8;if _ffaf ==0{return nil ;};_fead :=_efbf .Width /8;_bada :=_c .NewReader (_efbf .Data );_cce :=make ([]byte ,_efbf .Height *_efbf .BytesPerLine );_fdf :=_c .NewWriterMSB (_cce );_bgc :=make ([]byte ,_fead );var (_gdc int ;_bdfg uint64 ;
);for _gdc =0;_gdc < _efbf .Height ;_gdc ++{if _ ,_effa =_bada .Read (_bgc );_effa !=nil {return _effa ;};if _ ,_effa =_fdf .Write (_bgc );_effa !=nil {return _effa ;};if _bdfg ,_effa =_bada .ReadBits (byte (_ffaf ));_effa !=nil {return _effa ;};if _effa =_fdf .WriteByte (byte (_bdfg )<<uint (8-_ffaf ));
_effa !=nil {return _effa ;};};_efbf .Data =_fdf .Data ();return nil ;};var _ _e .Image =&Gray2 {};func _gbcf (_eabd ,_gff *Monochrome ,_aac []byte ,_dcg int )(_fce error ){var (_gca ,_ebce ,_ecc ,_ddee ,_gef ,_bfb ,_cbbcc ,_eggc int ;_eada ,_gfg ,_fca ,_ege uint32 ;
_ecg ,_cbf byte ;_afa uint16 ;);_ga :=make ([]byte ,4);_geac :=make ([]byte ,4);for _ecc =0;_ecc < _eabd .Height -1;_ecc ,_ddee =_ecc +2,_ddee +1{_gca =_ecc *_eabd .BytesPerLine ;_ebce =_ddee *_gff .BytesPerLine ;for _gef ,_bfb =0,0;_gef < _dcg ;_gef ,_bfb =_gef +4,_bfb +1{for _cbbcc =0;
_cbbcc < 4;_cbbcc ++{_eggc =_gca +_gef +_cbbcc ;if _eggc <=len (_eabd .Data )-1&&_eggc < _gca +_eabd .BytesPerLine {_ga [_cbbcc ]=_eabd .Data [_eggc ];}else {_ga [_cbbcc ]=0x00;};_eggc =_gca +_eabd .BytesPerLine +_gef +_cbbcc ;if _eggc <=len (_eabd .Data )-1&&_eggc < _gca +(2*_eabd .BytesPerLine ){_geac [_cbbcc ]=_eabd .Data [_eggc ];
}else {_geac [_cbbcc ]=0x00;};};_eada =_fa .BigEndian .Uint32 (_ga );_gfg =_fa .BigEndian .Uint32 (_geac );_fca =_eada &_gfg ;_fca |=_fca <<1;_ege =_eada |_gfg ;_ege &=_ege <<1;_gfg =_fca |_ege ;_gfg &=0xaaaaaaaa;_eada =_gfg |(_gfg <<7);_ecg =byte (_eada >>24);
_cbf =byte ((_eada >>8)&0xff);_eggc =_ebce +_bfb ;if _eggc +1==len (_gff .Data )-1||_eggc +1>=_ebce +_gff .BytesPerLine {if _fce =_gff .setByte (_eggc ,_aac [_ecg ]);_fce !=nil {return _ef .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eggc );
};}else {_afa =(uint16 (_aac [_ecg ])<<8)|uint16 (_aac [_cbf ]);if _fce =_gff .setTwoBytes (_eggc ,_afa );_fce !=nil {return _ef .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eggc );
};_bfb ++;};};};return nil ;};var _ Image =&Gray4 {};func _aee (_fcec ,_fed *Monochrome ,_feaa []byte ,_gab int )(_bfd error ){var (_ecgb ,_cga ,_effb ,_cfe ,_cec ,_geg ,_aagg ,_eaba int ;_dba ,_age uint32 ;_decb ,_ddb byte ;_bdc uint16 ;);_gfc :=make ([]byte ,4);
_beg :=make ([]byte ,4);for _effb =0;_effb < _fcec .Height -1;_effb ,_cfe =_effb +2,_cfe +1{_ecgb =_effb *_fcec .BytesPerLine ;_cga =_cfe *_fed .BytesPerLine ;for _cec ,_geg =0,0;_cec < _gab ;_cec ,_geg =_cec +4,_geg +1{for _aagg =0;_aagg < 4;_aagg ++{_eaba =_ecgb +_cec +_aagg ;
if _eaba <=len (_fcec .Data )-1&&_eaba < _ecgb +_fcec .BytesPerLine {_gfc [_aagg ]=_fcec .Data [_eaba ];}else {_gfc [_aagg ]=0x00;};_eaba =_ecgb +_fcec .BytesPerLine +_cec +_aagg ;if _eaba <=len (_fcec .Data )-1&&_eaba < _ecgb +(2*_fcec .BytesPerLine ){_beg [_aagg ]=_fcec .Data [_eaba ];
}else {_beg [_aagg ]=0x00;};};_dba =_fa .BigEndian .Uint32 (_gfc );_age =_fa .BigEndian .Uint32 (_beg );_age &=_dba ;_age &=_age <<1;_age &=0xaaaaaaaa;_dba =_age |(_age <<7);_decb =byte (_dba >>24);_ddb =byte ((_dba >>8)&0xff);_eaba =_cga +_geg ;if _eaba +1==len (_fed .Data )-1||_eaba +1>=_cga +_fed .BytesPerLine {_fed .Data [_eaba ]=_feaa [_decb ];
if _bfd =_fed .setByte (_eaba ,_feaa [_decb ]);_bfd !=nil {return _ef .Errorf ("\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_eaba );};}else {_bdc =(uint16 (_feaa [_decb ])<<8)|uint16 (_feaa [_ddb ]);if _bfd =_fed .setTwoBytes (_eaba ,_bdc );_bfd !=nil {return _ef .Errorf ("s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_eaba );
};_geg ++;};};};return nil ;};func _gfggc (_aafdf nrgba64 ,_bfdc RGBA ,_ccefg _e .Rectangle ){for _fbae :=0;_fbae < _ccefg .Max .X ;_fbae ++{for _eafa :=0;_eafa < _ccefg .Max .Y ;_eafa ++{_abfg :=_aafdf .NRGBA64At (_fbae ,_eafa );_bfdc .SetRGBA (_fbae ,_eafa ,_gac (_abfg ));
};};};func _eafb (_eaed _da .Gray )_da .Gray {_aebe :=_eaed .Y >>6;_aebe |=_aebe <<2;_eaed .Y =_aebe |_aebe <<4;return _eaed ;};func ImgToGray (i _e .Image )*_e .Gray {if _fgcee ,_cegf :=i .(*_e .Gray );_cegf {return _fgcee ;};_adfge :=i .Bounds ();_dbgc :=_e .NewGray (_adfge );
for _gcege :=0;_gcege < _adfge .Max .X ;_gcege ++{for _caff :=0;_caff < _adfge .Max .Y ;_caff ++{_fcbb :=i .At (_gcege ,_caff );_dbgc .Set (_gcege ,_caff ,_fcbb );};};return _dbgc ;};func _egafb (_bade *_e .Gray )bool {for _acad :=0;_acad < len (_bade .Pix );
_acad ++{if !_ccbca (_bade .Pix [_acad ]){return false ;};};return true ;};func _eebdd (_cab CMYK ,_daaa Gray ,_ddeg _e .Rectangle ){for _bbffb :=0;_bbffb < _ddeg .Max .X ;_bbffb ++{for _ddbb :=0;_ddbb < _ddeg .Max .Y ;_ddbb ++{_agde :=_ffabe (_cab .CMYKAt (_bbffb ,_ddbb ));
_daaa .SetGray (_bbffb ,_ddbb ,_agde );};};};func InDelta (expected ,current ,delta float64 )bool {_gcaa :=expected -current ;if _gcaa <=-delta ||_gcaa >=delta {return false ;};return true ;};type colorConverter struct{_dda func (_bfcb _e .Image )(Image ,error );
};func ColorAtNRGBA64 (x ,y ,width int ,data ,alpha []byte ,decode []float64 )(_da .NRGBA64 ,error ){_fgag :=(y *width +x )*2;_cdeea :=_fgag *3;if _cdeea +5>=len (data ){return _da .NRGBA64 {},_ef .Errorf ("\u0069\u006d\u0061\u0067\u0065\u0020\u0063\u006f\u006f\u0072\u0064\u0069\u006ea\u0074\u0065\u0073\u0020\u006f\u0075t\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0028\u0025\u0064,\u0020\u0025\u0064\u0029",x ,y );
};const _gfbd =0xffff;_aebfc :=uint16 (_gfbd );if alpha !=nil &&len (alpha )> _fgag +1{_aebfc =uint16 (alpha [_fgag ])<<8|uint16 (alpha [_fgag +1]);};_afge :=uint16 (data [_cdeea ])<<8|uint16 (data [_cdeea +1]);_cfeg :=uint16 (data [_cdeea +2])<<8|uint16 (data [_cdeea +3]);
_cgdb :=uint16 (data [_cdeea +4])<<8|uint16 (data [_cdeea +5]);if len (decode )==6{_afge =uint16 (uint64 (LinearInterpolate (float64 (_afge ),0,65535,decode [0],decode [1]))&_gfbd );_cfeg =uint16 (uint64 (LinearInterpolate (float64 (_cfeg ),0,65535,decode [2],decode [3]))&_gfbd );
_cgdb =uint16 (uint64 (LinearInterpolate (float64 (_cgdb ),0,65535,decode [4],decode [5]))&_gfbd );};return _da .NRGBA64 {R :_afge ,G :_cfeg ,B :_cgdb ,A :_aebfc },nil ;};var _ Gray =&Gray8 {};var _ NRGBA =&NRGBA32 {};func _ecfa (_feea *Monochrome ,_cabb ,_bead ,_dcca ,_cgfa int ,_bfca RasterOperator ,_ebgc *Monochrome ,_gfcd ,_dgef int )error {var (_cafaa byte ;
_agea int ;_caa int ;_bgabe ,_bbbb int ;_ffga ,_eadfg int ;);_acfc :=_dcca >>3;_egf :=_dcca &7;if _egf > 0{_cafaa =_cgda [_egf ];};_agea =_ebgc .BytesPerLine *_dgef +(_gfcd >>3);_caa =_feea .BytesPerLine *_bead +(_cabb >>3);switch _bfca {case PixSrc :for _ffga =0;
_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]=_ebgc .Data [_bgabe ];_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],_ebgc .Data [_bgabe ],_cafaa );
};};case PixNotSrc :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]=^(_ebgc .Data [_bgabe ]);_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],^_ebgc .Data [_bgabe ],_cafaa );
};};case PixSrcOrDst :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]|=_ebgc .Data [_bgabe ];_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],_ebgc .Data [_bgabe ]|_feea .Data [_bbbb ],_cafaa );
};};case PixSrcAndDst :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]&=_ebgc .Data [_bgabe ];_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],_ebgc .Data [_bgabe ]&_feea .Data [_bbbb ],_cafaa );
};};case PixSrcXorDst :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]^=_ebgc .Data [_bgabe ];_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],_ebgc .Data [_bgabe ]^_feea .Data [_bbbb ],_cafaa );
};};case PixNotSrcOrDst :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]|=^(_ebgc .Data [_bgabe ]);_bbbb ++;_bgabe ++;
};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],^(_ebgc .Data [_bgabe ])|_feea .Data [_bbbb ],_cafaa );};};case PixNotSrcAndDst :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;
for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]&=^(_ebgc .Data [_bgabe ]);_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],^(_ebgc .Data [_bgabe ])&_feea .Data [_bbbb ],_cafaa );};};case PixSrcOrNotDst :for _ffga =0;
_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]=_ebgc .Data [_bgabe ]|^(_feea .Data [_bbbb ]);_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],_ebgc .Data [_bgabe ]|^(_feea .Data [_bbbb ]),_cafaa );
};};case PixSrcAndNotDst :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]=_ebgc .Data [_bgabe ]&^(_feea .Data [_bbbb ]);
_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],_ebgc .Data [_bgabe ]&^(_feea .Data [_bbbb ]),_cafaa );};};case PixNotPixSrcOrDst :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;
for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]=^(_ebgc .Data [_bgabe ]|_feea .Data [_bbbb ]);_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],^(_ebgc .Data [_bgabe ]|_feea .Data [_bbbb ]),_cafaa );};};case PixNotPixSrcAndDst :for _ffga =0;
_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]=^(_ebgc .Data [_bgabe ]&_feea .Data [_bbbb ]);_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],^(_ebgc .Data [_bgabe ]&_feea .Data [_bbbb ]),_cafaa );
};};case PixNotPixSrcXorDst :for _ffga =0;_ffga < _cgfa ;_ffga ++{_bgabe =_agea +_ffga *_ebgc .BytesPerLine ;_bbbb =_caa +_ffga *_feea .BytesPerLine ;for _eadfg =0;_eadfg < _acfc ;_eadfg ++{_feea .Data [_bbbb ]=^(_ebgc .Data [_bgabe ]^_feea .Data [_bbbb ]);
_bbbb ++;_bgabe ++;};if _egf > 0{_feea .Data [_bbbb ]=_ggaf (_feea .Data [_bbbb ],^(_ebgc .Data [_bgabe ]^_feea .Data [_bbbb ]),_cafaa );};};default:_ee .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_bfca );
return _b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};return nil ;};func (_fabc *NRGBA64 )SetNRGBA64 (x ,y int ,c _da .NRGBA64 ){_bdcbg :=(y *_fabc .Width +x )*2;
_aebf :=_bdcbg *3;if _aebf +5>=len (_fabc .Data ){return ;};_fabc .setNRGBA64 (_aebf ,c ,_bdcbg );};func (_ggc *Monochrome )ResolveDecode ()error {if len (_ggc .Decode )!=2{return nil ;};if _ggc .Decode [0]==1&&_ggc .Decode [1]==0{if _egbg :=_ggc .InverseData ();
_egbg !=nil {return _egbg ;};_ggc .Decode =nil ;};return nil ;};func (_adef *Monochrome )ColorModel ()_da .Model {return MonochromeModel (_adef .ModelThreshold )};func _aeac (_fegb ,_bdgg Gray ,_cfeb _e .Rectangle ){for _gbe :=0;_gbe < _cfeb .Max .X ;_gbe ++{for _ecd :=0;
_ecd < _cfeb .Max .Y ;_ecd ++{_bdgg .SetGray (_gbe ,_ecd ,_fegb .GrayAt (_gbe ,_ecd ));};};};func (_ceef *Gray8 )Bounds ()_e .Rectangle {return _e .Rectangle {Max :_e .Point {X :_ceef .Width ,Y :_ceef .Height }};};func (_adac *CMYK32 )ColorAt (x ,y int )(_da .Color ,error ){return ColorAtCMYK (x ,y ,_adac .Width ,_adac .Data ,_adac .Decode );
};func (_fceb *Gray4 )setGray (_daa int ,_fgac int ,_gfaa _da .Gray ){_ddca :=_fgac *_fceb .BytesPerLine ;_ggcg :=_ddca +(_daa >>1);if _ggcg >=len (_fceb .Data ){return ;};_fdca :=_gfaa .Y >>4;_fceb .Data [_ggcg ]=(_fceb .Data [_ggcg ]&(^(0xf0>>uint (4*(_daa &1)))))|(_fdca <<uint (4-4*(_daa &1)));
};