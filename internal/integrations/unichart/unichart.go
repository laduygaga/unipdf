//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_d "bytes";_dd "fmt";_a "github.com/unidoc/unichart/render";_e "github.com/laduygaga/unipdf/v3/common";_gg "github.com/laduygaga/unipdf/v3/contentstream";_eg "github.com/laduygaga/unipdf/v3/contentstream/draw";_ec "github.com/laduygaga/unipdf/v3/core";
_ab "github.com/laduygaga/unipdf/v3/model";_c "image/color";_g "io";_db "math";);func NewRenderer (cc *_gg .ContentCreator ,res *_ab .PdfPageResources )func (int ,int )(_a .Renderer ,error ){return func (_cd ,_ba int )(_a .Renderer ,error ){_aa :=&Renderer {_bf :_cd ,_abe :_ba ,_ef :72,_ce :cc ,_efc :res ,_bc :map[*_ab .PdfFont ]_ec .PdfObjectName {}};
_aa .ResetStyle ();return _aa ,nil ;};};func (_agb *Renderer )ClearTextRotation (){_agb ._f =0};func (_dc *Renderer )ResetStyle (){_dc .SetFillColor (_c .Black );_dc .SetStrokeColor (_c .Transparent );_dc .SetStrokeWidth (0);_dc .SetFont (_ab .DefaultFont ());
_dc .SetFontColor (_c .Black );_dc .SetFontSize (12);_dc .SetTextRotation (0);};func (_ae *Renderer )SetClassName (name string ){};func _caf (_daa string ,_ebcg int ,_egb func (_ec .PdfObjectName )bool )_ec .PdfObjectName {_fe :=_ec .PdfObjectName (_dd .Sprintf ("\u0025\u0073\u0025\u0064",_daa ,_ebcg ));
for _de :=_ebcg ;_egb (_fe );{_de ++;_fe =_ec .PdfObjectName (_dd .Sprintf ("\u0025\u0073\u0025\u0064",_daa ,_de ));};return _fe ;};func (_ecc *Renderer )Fill (){_ecc ._ce .Add_f ()};func _ece (_caag float64 )float64 {return _caag *180/_db .Pi };func (_abd *Renderer )SetStrokeDashArray (dashArray []float64 ){_fc :=make ([]int64 ,len (dashArray ));
for _ddg ,_bcg :=range dashArray {_fc [_ddg ]=int64 (_bcg );};_abd ._ce .Add_d (_fc ,0);};func (_ag *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_ag ._ce .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func (_dbeg *Renderer )MoveTo (x ,y int ){_dbeg ._ce .Add_m (float64 (x ),float64 (y ))};
func (_fb *Renderer )SetStrokeColor (color _c .Color ){_fb ._ecf =color ;_bce ,_ed ,_edc ,_ :=_add (color );_fb ._ce .Add_RG (_bce ,_ed ,_edc );};func (_ace *Renderer )SetFontColor (color _c .Color ){_ace ._ad =color };func (_cea *Renderer )Circle (radius float64 ,x ,y int ){_gac :=radius ;
if _ade :=_cea ._gc ;_ade !=0{_gac -=_ade /2;};_gf :=_gac *0.551784;_gacd :=_eg .CubicBezierPath {Curves :[]_eg .CubicBezierCurve {_eg .NewCubicBezierCurve (-_gac ,0,-_gac ,_gf ,-_gf ,_gac ,0,_gac ),_eg .NewCubicBezierCurve (0,_gac ,_gf ,_gac ,_gac ,_gf ,_gac ,0),_eg .NewCubicBezierCurve (_gac ,0,_gac ,-_gf ,_gf ,-_gac ,0,-_gac ),_eg .NewCubicBezierCurve (0,-_gac ,-_gf ,-_gac ,-_gac ,-_gf ,-_gac ,0)}};
if _gfe :=_cea ._gc ;_gfe !=0{_gacd =_gacd .Offset (_gfe /2,_gfe /2);};_gacd =_gacd .Offset (float64 (x ),float64 (y ));_eg .DrawBezierPathWithCreator (_gacd ,_cea ._ce );};func (_bb *Renderer )Stroke (){_bb ._ce .Add_S ()};func (_bff *Renderer )SetFontSize (size float64 ){_bff ._ga =size };
func (_dba *Renderer )SetTextRotation (radians float64 ){_dba ._f =_ece (-radians )};func (_cae *Renderer )Close (){_cae ._ce .Add_h ()};func (_eb *Renderer )SetStrokeWidth (width float64 ){_eb ._gc =width ;_eb ._ce .Add_w (width )};func (_dg *Renderer )GetDPI ()float64 {return _dg ._ef };
func (_egd *Renderer )LineTo (x ,y int ){_egd ._ce .Add_l (float64 (x ),float64 (y ))};func (_ge *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_ece (2.0*_db .Pi -startAngle );deltaAngle =_ece (-deltaAngle );_gec ,_cg :=deltaAngle ,1;
if _db .Abs (deltaAngle )> 90.0{_cg =int (_db .Ceil (_db .Abs (deltaAngle )/90.0));_gec =deltaAngle /float64 (_cg );};var (_cfd =_gbe (_gec /2);_ebc =_db .Abs (4.0/3.0*(1.0-_db .Cos (_cfd ))/_db .Sin (_cfd ));_ee =float64 (cx );_gdbg =float64 (cy ););for _ff :=0;
_ff < _cg ;_ff ++{_cec :=_gbe (startAngle +float64 (_ff )*_gec );_cc :=_gbe (startAngle +float64 (_ff +1)*_gec );_dca :=_db .Cos (_cec );_ca :=_db .Cos (_cc );_gca :=_db .Sin (_cec );_caa :=_db .Sin (_cc );var _da []float64 ;if _gec > 0{_da =[]float64 {_ee +rx *_dca ,_gdbg -ry *_gca ,_ee +rx *(_dca -_ebc *_gca ),_gdbg -ry *(_gca +_ebc *_dca ),_ee +rx *(_ca +_ebc *_caa ),_gdbg -ry *(_caa -_ebc *_ca ),_ee +rx *_ca ,_gdbg -ry *_caa };
}else {_da =[]float64 {_ee +rx *_dca ,_gdbg -ry *_gca ,_ee +rx *(_dca +_ebc *_gca ),_gdbg -ry *(_gca -_ebc *_dca ),_ee +rx *(_ca -_ebc *_caa ),_gdbg -ry *(_caa +_ebc *_ca ),_ee +rx *_ca ,_gdbg -ry *_caa };};if _ff ==0{_ge ._ce .Add_l (_da [0],_da [1]);
};_ge ._ce .Add_c (_da [2],_da [3],_da [4],_da [5],_da [6],_da [7]);};};func (_ggd *Renderer )Save (w _g .Writer )error {if w ==nil {return nil ;};_ ,_bgd :=_g .Copy (w ,_d .NewBuffer (_ggd ._ce .Bytes ()));return _bgd ;};func (_edcf *Renderer )MeasureText (text string )_a .Box {_ccf :=_edcf ._ga ;
_fad ,_cac :=_edcf ._df .GetFontDescriptor ();if _cac !=nil {_e .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_ea ,_dag :=_fad .GetCapHeight ();if _dag !=nil {_e .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_dag );
}else {_ccf =_ea /1000.0*_edcf ._ga ;};};var (_cfda =0.0;_fgg =_edcf .wrapText (text ););for _ ,_ead :=range _fgg {if _fge :=_edcf .getTextWidth (_ead );_fge > _cfda {_cfda =_fge ;};};_cgc :=_a .NewBox (0,0,int (_cfda ),int (_ccf ));if _eag :=_edcf ._f ;
_eag !=0{_cgc =_cgc .Corners ().Rotate (_eag ).Box ();};return _cgc ;};func (_cfdc *Renderer )getTextWidth (_af string )float64 {var _cge float64 ;for _ ,_aec :=range _af {_egg ,_fbf :=_cfdc ._df .GetRuneMetrics (_aec );if !_fbf {_e .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_aec );
};_cge +=_egg .Wx ;};return _cfdc ._ga *_cge /1000.0;};func _fga (_acd _c .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_dgc ,_cfc ,_cag ,_cff :=_acd .RGBA ();return uint8 (_dgc >>8),uint8 (_cfc >>8),uint8 (_cag >>8),uint8 (_cff >>8);};type Renderer struct{_bf int ;
_abe int ;_ef float64 ;_ce *_gg .ContentCreator ;_efc *_ab .PdfPageResources ;_gd _c .Color ;_ecf _c .Color ;_gc float64 ;_df *_ab .PdfFont ;_ga float64 ;_ad _c .Color ;_f float64 ;_bc map[*_ab .PdfFont ]_ec .PdfObjectName ;};func (_ddc *Renderer )SetDPI (dpi float64 ){_ddc ._ef =dpi };
func (_geg *Renderer )FillStroke (){_geg ._ce .Add_B ()};func _add (_aag _c .Color )(float64 ,float64 ,float64 ,float64 ){_gfg ,_gfc ,_fgd ,_acb :=_fga (_aag );return float64 (_gfg )/255,float64 (_gfc )/255,float64 (_fgd )/255,float64 (_acb )/255;};func (_ged *Renderer )wrapText (_gcc string )[]string {var (_bcb []string ;
_gb []rune ;);for _ ,_fbb :=range _gcc {if _fbb =='\n'{_bcb =append (_bcb ,string (_gb ));_gb =[]rune {};continue ;};_gb =append (_gb ,_fbb );};if len (_gb )> 0{_bcb =append (_bcb ,string (_gb ));};return _bcb ;};func (_fbc *Renderer )SetFillColor (color _c .Color ){_fbc ._gd =color ;
_gdb ,_bfa ,_cf ,_ :=_add (color );_fbc ._ce .Add_rg (_gdb ,_bfa ,_cf );};func _gbe (_gag float64 )float64 {return _gag *_db .Pi /180.0};func (_fa *Renderer )Text (text string ,x ,y int ){_fa ._ce .Add_q ();_fa .SetFont (_fa ._df );_bg ,_acf ,_edcd ,_ :=_add (_fa ._ad );
_fa ._ce .Add_rg (_bg ,_acf ,_edcd );_fa ._ce .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _cga :=_fa ._f ;_cga !=0{_fa ._ce .RotateDeg (_cga );};_fa ._ce .Add_BT ().Add_TL (_fa ._ga );var (_cfdg =_fa ._df .Encoder ();_fba =_fa .wrapText (text );
_acg =len (_fba ););for _adc ,_gcf :=range _fba {_fa ._ce .Add_TJ (_ec .MakeStringFromBytes (_cfdg .Encode (_gcf )));if _adc !=_acg -1{_fa ._ce .Add_Tstar ();};};_fa ._ce .Add_ET ();_fa ._ce .Add_Q ();};func (_dad *Renderer )SetFont (font _a .Font ){_dadc ,_eccg :=font .(*_ab .PdfFont );
if !_eccg {_e .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");return ;};_dce ,_eccg :=_dad ._bc [_dadc ];if !_eccg {_dce =_caf ("\u0046\u006f\u006e\u0074",1,_dad ._efc .HasFontByName );
if _ac :=_dad ._efc .SetFontByName (_dce ,_dadc .ToPdfObject ());_ac !=nil {_e .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_dadc );
};_dad ._bc [_dadc ]=_dce ;};_dad ._ce .Add_Tf (_dce ,_dad ._ga );_dad ._df =_dadc ;};