//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_f "errors";_de "github.com/laduygaga/unipdf/v3/internal/bitwise";_c "io";_a "math";);var _fa =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func init (){_aa =&treeNode {_gdg :true ,_afb :_cf };_e =&treeNode {_afb :_cef ,_cbb :_aa };_e ._feeb =_e ;_fc =&tree {_aef :&treeNode {}};if _ed :=_fc .fillWithNode (12,0,_e );_ed !=nil {panic (_ed .Error ());};if _ec :=_fc .fillWithNode (12,1,_aa );_ec !=nil {panic (_ec .Error ());
};_dd =&tree {_aef :&treeNode {}};for _ddf :=0;_ddf < len (_eg );_ddf ++{for _fb :=0;_fb < len (_eg [_ddf ]);_fb ++{if _gc :=_dd .fill (_ddf +2,int (_eg [_ddf ][_fb ]),int (_fa [_ddf ][_fb ]));_gc !=nil {panic (_gc .Error ());};};};if _b :=_dd .fillWithNode (12,0,_e );
_b !=nil {panic (_b .Error ());};if _bc :=_dd .fillWithNode (12,1,_aa );_bc !=nil {panic (_bc .Error ());};_ac =&tree {_aef :&treeNode {}};for _bd :=0;_bd < len (_ca );_bd ++{for _cd :=0;_cd < len (_ca [_bd ]);_cd ++{if _gd :=_ac .fill (_bd +4,int (_ca [_bd ][_cd ]),int (_ea [_bd ][_cd ]));
_gd !=nil {panic (_gd .Error ());};};};if _ba :=_ac .fillWithNode (12,0,_e );_ba !=nil {panic (_ba .Error ());};if _ae :=_ac .fillWithNode (12,1,_aa );_ae !=nil {panic (_ae .Error ());};_ce =&tree {_aef :&treeNode {}};if _bg :=_ce .fill (4,1,_fg );_bg !=nil {panic (_bg .Error ());
};if _ag :=_ce .fill (3,1,_g );_ag !=nil {panic (_ag .Error ());};if _eb :=_ce .fill (1,1,0);_eb !=nil {panic (_eb .Error ());};if _cg :=_ce .fill (3,3,1);_cg !=nil {panic (_cg .Error ());};if _bgd :=_ce .fill (6,3,2);_bgd !=nil {panic (_bgd .Error ());
};if _aeg :=_ce .fill (7,3,3);_aeg !=nil {panic (_aeg .Error ());};if _fe :=_ce .fill (3,2,-1);_fe !=nil {panic (_fe .Error ());};if _db :=_ce .fill (6,2,-2);_db !=nil {panic (_db .Error ());};if _df :=_ce .fill (7,2,-3);_df !=nil {panic (_df .Error ());
};};var _ca =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_fbc :=&Decoder {_fd :_de .NewReader (data ),_ecg :options .Columns ,_efa :options .Rows ,_fcf :options .DamagedRowsBeforeError ,_ecc :make ([]byte ,(options .Columns +7)/8),_bdb :make ([]int ,options .Columns +2),_ced :make ([]int ,options .Columns +2),_bbb :options .EncodedByteAligned ,_fag :options .BlackIsOne ,_bag :options .EndOfLine ,_caf :options .EndOfBlock };
switch {case options .K ==0:_fbc ._bf =_aacc ;if len (data )< 20{return nil ,_f .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_gbe :=data [:20];if _gbe [0]!=0||(_gbe [1]>>4!=1&&_gbe [1]!=1){_fbc ._bf =_cgc ;
_be :=(uint16 (_gbe [0])<<8+uint16 (_gbe [1]&0xff))>>4;for _aff :=12;_aff < 160;_aff ++{_be =(_be <<1)+uint16 ((_gbe [_aff /8]>>uint16 (7-(_aff %8)))&0x01);if _be &0xfff==1{_fbc ._bf =_aacc ;break ;};};};case options .K < 0:_fbc ._bf =_bde ;case options .K > 0:_fbc ._bf =_aacc ;
_fbc ._gg =true ;};switch _fbc ._bf {case _cgc ,_aacc ,_bde :default:return nil ,_f .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _fbc ,nil ;};func (_cea *Decoder )decodeG32D ()error {_cea ._aea =_cea ._aaca ;_cea ._ced ,_cea ._bdb =_cea ._bdb ,_cea ._ced ;_bcdc :=true ;var (_cdc bool ;_fbd int ;_cdcf error ;);_cea ._aaca =0;_eag :for _fbd < _cea ._ecg {_cdb :=_ce ._aef ;
for {_cdc ,_cdcf =_cea ._fd .ReadBool ();if _cdcf !=nil {return _cdcf ;};_cdb =_cdb .walk (_cdc );if _cdb ==nil {continue _eag ;};if !_cdb ._gdg {continue ;};switch _cdb ._afb {case _g :var _ace int ;if _bcdc {_ace ,_cdcf =_cea .decodeRun (_ac );}else {_ace ,_cdcf =_cea .decodeRun (_dd );
};if _cdcf !=nil {return _cdcf ;};_fbd +=_ace ;_cea ._ced [_cea ._aaca ]=_fbd ;_cea ._aaca ++;if _bcdc {_ace ,_cdcf =_cea .decodeRun (_dd );}else {_ace ,_cdcf =_cea .decodeRun (_ac );};if _cdcf !=nil {return _cdcf ;};_fbd +=_ace ;_cea ._ced [_cea ._aaca ]=_fbd ;
_cea ._aaca ++;case _fg :_fga :=_cea .getNextChangingElement (_fbd ,_bcdc )+1;if _fga >=_cea ._aea {_fbd =_cea ._ecg ;}else {_fbd =_cea ._bdb [_fga ];};default:_egg :=_cea .getNextChangingElement (_fbd ,_bcdc );if _egg >=_cea ._aea ||_egg ==-1{_fbd =_cea ._ecg +_cdb ._afb ;
}else {_fbd =_cea ._bdb [_egg ]+_cdb ._afb ;};_cea ._ced [_cea ._aaca ]=_fbd ;_cea ._aaca ++;_bcdc =!_bcdc ;};continue _eag ;};};return nil ;};func (_fff *tree )fill (_fcb ,_ecd ,_dbd int )error {_dfdf :=_fff ._aef ;for _dfa :=0;_dfa < _fcb ;_dfa ++{_gfg :=_fcb -1-_dfa ;
_edfc :=((_ecd >>uint (_gfg ))&1)!=0;_ggfa :=_dfdf .walk (_edfc );if _ggfa !=nil {if _ggfa ._gdg {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_dfdf =_ggfa ;continue ;};_ggfa =&treeNode {};if _dfa ==_fcb -1{_ggfa ._afb =_dbd ;_ggfa ._gdg =true ;};if _ecd ==0{_ggfa ._ebdb =true ;};_dfdf .set (_edfc ,_ggfa );_dfdf =_ggfa ;};return nil ;};type code struct{Code uint16 ;BitsWritten int ;};var (_cc =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");
_dg =_f .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064"););func init (){_ga =make (map[int ]code );_ga [0]=code {Code :13<<8|3<<6,BitsWritten :10};_ga [1]=code {Code :2<<(5+8),BitsWritten :3};
_ga [2]=code {Code :3<<(6+8),BitsWritten :2};_ga [3]=code {Code :2<<(6+8),BitsWritten :2};_ga [4]=code {Code :3<<(5+8),BitsWritten :3};_ga [5]=code {Code :3<<(4+8),BitsWritten :4};_ga [6]=code {Code :2<<(4+8),BitsWritten :4};_ga [7]=code {Code :3<<(3+8),BitsWritten :5};
_ga [8]=code {Code :5<<(2+8),BitsWritten :6};_ga [9]=code {Code :4<<(2+8),BitsWritten :6};_ga [10]=code {Code :4<<(1+8),BitsWritten :7};_ga [11]=code {Code :5<<(1+8),BitsWritten :7};_ga [12]=code {Code :7<<(1+8),BitsWritten :7};_ga [13]=code {Code :4<<8,BitsWritten :8};
_ga [14]=code {Code :7<<8,BitsWritten :8};_ga [15]=code {Code :12<<8,BitsWritten :9};_ga [16]=code {Code :5<<8|3<<6,BitsWritten :10};_ga [17]=code {Code :6<<8,BitsWritten :10};_ga [18]=code {Code :2<<8,BitsWritten :10};_ga [19]=code {Code :12<<8|7<<5,BitsWritten :11};
_ga [20]=code {Code :13<<8,BitsWritten :11};_ga [21]=code {Code :13<<8|4<<5,BitsWritten :11};_ga [22]=code {Code :6<<8|7<<5,BitsWritten :11};_ga [23]=code {Code :5<<8,BitsWritten :11};_ga [24]=code {Code :2<<8|7<<5,BitsWritten :11};_ga [25]=code {Code :3<<8,BitsWritten :11};
_ga [26]=code {Code :12<<8|10<<4,BitsWritten :12};_ga [27]=code {Code :12<<8|11<<4,BitsWritten :12};_ga [28]=code {Code :12<<8|12<<4,BitsWritten :12};_ga [29]=code {Code :12<<8|13<<4,BitsWritten :12};_ga [30]=code {Code :6<<8|8<<4,BitsWritten :12};_ga [31]=code {Code :6<<8|9<<4,BitsWritten :12};
_ga [32]=code {Code :6<<8|10<<4,BitsWritten :12};_ga [33]=code {Code :6<<8|11<<4,BitsWritten :12};_ga [34]=code {Code :13<<8|2<<4,BitsWritten :12};_ga [35]=code {Code :13<<8|3<<4,BitsWritten :12};_ga [36]=code {Code :13<<8|4<<4,BitsWritten :12};_ga [37]=code {Code :13<<8|5<<4,BitsWritten :12};
_ga [38]=code {Code :13<<8|6<<4,BitsWritten :12};_ga [39]=code {Code :13<<8|7<<4,BitsWritten :12};_ga [40]=code {Code :6<<8|12<<4,BitsWritten :12};_ga [41]=code {Code :6<<8|13<<4,BitsWritten :12};_ga [42]=code {Code :13<<8|10<<4,BitsWritten :12};_ga [43]=code {Code :13<<8|11<<4,BitsWritten :12};
_ga [44]=code {Code :5<<8|4<<4,BitsWritten :12};_ga [45]=code {Code :5<<8|5<<4,BitsWritten :12};_ga [46]=code {Code :5<<8|6<<4,BitsWritten :12};_ga [47]=code {Code :5<<8|7<<4,BitsWritten :12};_ga [48]=code {Code :6<<8|4<<4,BitsWritten :12};_ga [49]=code {Code :6<<8|5<<4,BitsWritten :12};
_ga [50]=code {Code :5<<8|2<<4,BitsWritten :12};_ga [51]=code {Code :5<<8|3<<4,BitsWritten :12};_ga [52]=code {Code :2<<8|4<<4,BitsWritten :12};_ga [53]=code {Code :3<<8|7<<4,BitsWritten :12};_ga [54]=code {Code :3<<8|8<<4,BitsWritten :12};_ga [55]=code {Code :2<<8|7<<4,BitsWritten :12};
_ga [56]=code {Code :2<<8|8<<4,BitsWritten :12};_ga [57]=code {Code :5<<8|8<<4,BitsWritten :12};_ga [58]=code {Code :5<<8|9<<4,BitsWritten :12};_ga [59]=code {Code :2<<8|11<<4,BitsWritten :12};_ga [60]=code {Code :2<<8|12<<4,BitsWritten :12};_ga [61]=code {Code :5<<8|10<<4,BitsWritten :12};
_ga [62]=code {Code :6<<8|6<<4,BitsWritten :12};_ga [63]=code {Code :6<<8|7<<4,BitsWritten :12};_gb =make (map[int ]code );_gb [0]=code {Code :53<<8,BitsWritten :8};_gb [1]=code {Code :7<<(2+8),BitsWritten :6};_gb [2]=code {Code :7<<(4+8),BitsWritten :4};
_gb [3]=code {Code :8<<(4+8),BitsWritten :4};_gb [4]=code {Code :11<<(4+8),BitsWritten :4};_gb [5]=code {Code :12<<(4+8),BitsWritten :4};_gb [6]=code {Code :14<<(4+8),BitsWritten :4};_gb [7]=code {Code :15<<(4+8),BitsWritten :4};_gb [8]=code {Code :19<<(3+8),BitsWritten :5};
_gb [9]=code {Code :20<<(3+8),BitsWritten :5};_gb [10]=code {Code :7<<(3+8),BitsWritten :5};_gb [11]=code {Code :8<<(3+8),BitsWritten :5};_gb [12]=code {Code :8<<(2+8),BitsWritten :6};_gb [13]=code {Code :3<<(2+8),BitsWritten :6};_gb [14]=code {Code :52<<(2+8),BitsWritten :6};
_gb [15]=code {Code :53<<(2+8),BitsWritten :6};_gb [16]=code {Code :42<<(2+8),BitsWritten :6};_gb [17]=code {Code :43<<(2+8),BitsWritten :6};_gb [18]=code {Code :39<<(1+8),BitsWritten :7};_gb [19]=code {Code :12<<(1+8),BitsWritten :7};_gb [20]=code {Code :8<<(1+8),BitsWritten :7};
_gb [21]=code {Code :23<<(1+8),BitsWritten :7};_gb [22]=code {Code :3<<(1+8),BitsWritten :7};_gb [23]=code {Code :4<<(1+8),BitsWritten :7};_gb [24]=code {Code :40<<(1+8),BitsWritten :7};_gb [25]=code {Code :43<<(1+8),BitsWritten :7};_gb [26]=code {Code :19<<(1+8),BitsWritten :7};
_gb [27]=code {Code :36<<(1+8),BitsWritten :7};_gb [28]=code {Code :24<<(1+8),BitsWritten :7};_gb [29]=code {Code :2<<8,BitsWritten :8};_gb [30]=code {Code :3<<8,BitsWritten :8};_gb [31]=code {Code :26<<8,BitsWritten :8};_gb [32]=code {Code :27<<8,BitsWritten :8};
_gb [33]=code {Code :18<<8,BitsWritten :8};_gb [34]=code {Code :19<<8,BitsWritten :8};_gb [35]=code {Code :20<<8,BitsWritten :8};_gb [36]=code {Code :21<<8,BitsWritten :8};_gb [37]=code {Code :22<<8,BitsWritten :8};_gb [38]=code {Code :23<<8,BitsWritten :8};
_gb [39]=code {Code :40<<8,BitsWritten :8};_gb [40]=code {Code :41<<8,BitsWritten :8};_gb [41]=code {Code :42<<8,BitsWritten :8};_gb [42]=code {Code :43<<8,BitsWritten :8};_gb [43]=code {Code :44<<8,BitsWritten :8};_gb [44]=code {Code :45<<8,BitsWritten :8};
_gb [45]=code {Code :4<<8,BitsWritten :8};_gb [46]=code {Code :5<<8,BitsWritten :8};_gb [47]=code {Code :10<<8,BitsWritten :8};_gb [48]=code {Code :11<<8,BitsWritten :8};_gb [49]=code {Code :82<<8,BitsWritten :8};_gb [50]=code {Code :83<<8,BitsWritten :8};
_gb [51]=code {Code :84<<8,BitsWritten :8};_gb [52]=code {Code :85<<8,BitsWritten :8};_gb [53]=code {Code :36<<8,BitsWritten :8};_gb [54]=code {Code :37<<8,BitsWritten :8};_gb [55]=code {Code :88<<8,BitsWritten :8};_gb [56]=code {Code :89<<8,BitsWritten :8};
_gb [57]=code {Code :90<<8,BitsWritten :8};_gb [58]=code {Code :91<<8,BitsWritten :8};_gb [59]=code {Code :74<<8,BitsWritten :8};_gb [60]=code {Code :75<<8,BitsWritten :8};_gb [61]=code {Code :50<<8,BitsWritten :8};_gb [62]=code {Code :51<<8,BitsWritten :8};
_gb [63]=code {Code :52<<8,BitsWritten :8};_af =make (map[int ]code );_af [64]=code {Code :3<<8|3<<6,BitsWritten :10};_af [128]=code {Code :12<<8|8<<4,BitsWritten :12};_af [192]=code {Code :12<<8|9<<4,BitsWritten :12};_af [256]=code {Code :5<<8|11<<4,BitsWritten :12};
_af [320]=code {Code :3<<8|3<<4,BitsWritten :12};_af [384]=code {Code :3<<8|4<<4,BitsWritten :12};_af [448]=code {Code :3<<8|5<<4,BitsWritten :12};_af [512]=code {Code :3<<8|12<<3,BitsWritten :13};_af [576]=code {Code :3<<8|13<<3,BitsWritten :13};_af [640]=code {Code :2<<8|10<<3,BitsWritten :13};
_af [704]=code {Code :2<<8|11<<3,BitsWritten :13};_af [768]=code {Code :2<<8|12<<3,BitsWritten :13};_af [832]=code {Code :2<<8|13<<3,BitsWritten :13};_af [896]=code {Code :3<<8|18<<3,BitsWritten :13};_af [960]=code {Code :3<<8|19<<3,BitsWritten :13};_af [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_af [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_af [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_af [1216]=code {Code :119<<3,BitsWritten :13};_af [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_af [1344]=code {Code :2<<8|19<<3,BitsWritten :13};_af [1408]=code {Code :2<<8|20<<3,BitsWritten :13};
_af [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_af [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_af [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_af [1664]=code {Code :3<<8|4<<3,BitsWritten :13};_af [1728]=code {Code :3<<8|5<<3,BitsWritten :13};
_fcd =make (map[int ]code );_fcd [64]=code {Code :27<<(3+8),BitsWritten :5};_fcd [128]=code {Code :18<<(3+8),BitsWritten :5};_fcd [192]=code {Code :23<<(2+8),BitsWritten :6};_fcd [256]=code {Code :55<<(1+8),BitsWritten :7};_fcd [320]=code {Code :54<<8,BitsWritten :8};
_fcd [384]=code {Code :55<<8,BitsWritten :8};_fcd [448]=code {Code :100<<8,BitsWritten :8};_fcd [512]=code {Code :101<<8,BitsWritten :8};_fcd [576]=code {Code :104<<8,BitsWritten :8};_fcd [640]=code {Code :103<<8,BitsWritten :8};_fcd [704]=code {Code :102<<8,BitsWritten :9};
_fcd [768]=code {Code :102<<8|1<<7,BitsWritten :9};_fcd [832]=code {Code :105<<8,BitsWritten :9};_fcd [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fcd [960]=code {Code :106<<8,BitsWritten :9};_fcd [1024]=code {Code :106<<8|1<<7,BitsWritten :9};_fcd [1088]=code {Code :107<<8,BitsWritten :9};
_fcd [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_fcd [1216]=code {Code :108<<8,BitsWritten :9};_fcd [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fcd [1344]=code {Code :109<<8,BitsWritten :9};_fcd [1408]=code {Code :109<<8|1<<7,BitsWritten :9};_fcd [1472]=code {Code :76<<8,BitsWritten :9};
_fcd [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_fcd [1600]=code {Code :77<<8,BitsWritten :9};_fcd [1664]=code {Code :24<<(2+8),BitsWritten :6};_fcd [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_bdc =make (map[int ]code );_bdc [1792]=code {Code :1<<8,BitsWritten :11};
_bdc [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_bdc [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_bdc [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_bdc [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_bdc [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_bdc [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_bdc [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_bdc [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_bdc [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_bdc [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_bdc [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_bdc [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_ef =make (map[int ]byte );_ef [0]=0xFF;_ef [1]=0xFE;_ef [2]=0xFC;_ef [3]=0xF8;_ef [4]=0xF0;_ef [5]=0xE0;_ef [6]=0xC0;_ef [7]=0x80;_ef [8]=0x00;};func (_aad *Encoder )encodeG31D (_fca [][]byte )[]byte {var _bea []byte ;
_gagc :=0;for _gdd :=range _fca {if _aad .Rows > 0&&!_aad .EndOfBlock &&_gdd ==_aad .Rows {break ;};_dbc ,_agge :=_ebe (_fca [_gdd ],_gagc ,_ab );_bea =_aad .appendEncodedRow (_bea ,_dbc ,_gagc );if _aad .EncodedByteAlign {_agge =0;};_gagc =_agge ;};if _aad .EndOfBlock {_bded ,_ :=_gdee (_gagc );
_bea =_aad .appendEncodedRow (_bea ,_bded ,_gagc );};return _bea ;};func (_cec *Decoder )decode1D ()error {var (_cgf int ;_bgc error ;);_egec :=true ;_cec ._aaca =0;for {var _gbc int ;if _egec {_gbc ,_bgc =_cec .decodeRun (_ac );}else {_gbc ,_bgc =_cec .decodeRun (_dd );
};if _bgc !=nil {return _bgc ;};_cgf +=_gbc ;_cec ._ced [_cec ._aaca ]=_cgf ;_cec ._aaca ++;_egec =!_egec ;if _cgf >=_cec ._ecg {break ;};};return nil ;};func (_bdf *Encoder )encodeG4 (_ffc [][]byte )[]byte {_fae :=make ([][]byte ,len (_ffc ));copy (_fae ,_ffc );
_fae =_eca (_fae );var _cebae []byte ;var _effb int ;for _deac :=1;_deac < len (_fae );_deac ++{if _bdf .Rows > 0&&!_bdf .EndOfBlock &&_deac ==(_bdf .Rows +1){break ;};var _cdcd []byte ;var _fad ,_egeg ,_cdg int ;_ggfd :=_effb ;_ggg :=-1;for _ggg < len (_fae [_deac ]){_fad =_beg (_fae [_deac ],_ggg );
_egeg =_aaff (_fae [_deac ],_fae [_deac -1],_ggg );_cdg =_beg (_fae [_deac -1],_egeg );if _cdg < _fad {_cdcd ,_ggfd =_eadf (_cdcd ,_ggfd ,_cgd );_ggg =_cdg ;}else {if _a .Abs (float64 (_egeg -_fad ))> 3{_cdcd ,_ggfd ,_ggg =_cca (_fae [_deac ],_cdcd ,_ggfd ,_ggg ,_fad );
}else {_cdcd ,_ggfd =_edee (_cdcd ,_ggfd ,_fad ,_egeg );_ggg =_fad ;};};};_cebae =_bdf .appendEncodedRow (_cebae ,_cdcd ,_effb );if _bdf .EncodedByteAlign {_ggfd =0;};_effb =_ggfd %8;};if _bdf .EndOfBlock {_fefc ,_ :=_fgb (_effb );_cebae =_bdf .appendEncodedRow (_cebae ,_fefc ,_effb );
};return _cebae ;};func _egfa (_dfg ,_ffgc int )code {var _cae code ;switch _ffgc -_dfg {case -1:_cae =_aac ;case -2:_cae =_dfd ;case -3:_cae =_gcg ;case 0:_cae =_gf ;case 1:_cae =_dde ;case 2:_cae =_ee ;case 3:_cae =_gff ;};return _cae ;};func (_bdd *Decoder )decodeRowType2 ()error {if _bdd ._bbb {_bdd ._fd .Align ();
};if _ggf :=_bdd .decode1D ();_ggf !=nil {return _ggf ;};return nil ;};func (_effd *Decoder )decodeRun (_gbf *tree )(int ,error ){var _efb int ;_bdca :=_gbf ._aef ;for {_bba ,_bac :=_effd ._fd .ReadBool ();if _bac !=nil {return 0,_bac ;};_bdca =_bdca .walk (_bba );
if _bdca ==nil {return 0,_f .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");};if _bdca ._gdg {_efb +=_bdca ._afb ;switch {case _bdca ._afb >=64:_bdca =_gbf ._aef ;
case _bdca ._afb >=0:return _efb ,nil ;default:return _effd ._ecg ,nil ;};};};};func (_edc *Decoder )getNextChangingElement (_da int ,_aaf bool )int {_cgac :=0;if !_aaf {_cgac =1;};_acd :=int (uint32 (_edc ._fed )&0xFFFFFFFE)+_cgac ;if _acd > 2{_acd -=2;
};if _da ==0{return _acd ;};for _egeb :=_acd ;_egeb < _edc ._aea ;_egeb +=2{if _da < _edc ._bdb [_egeb ]{_edc ._fed =_egeb ;return _egeb ;};};return -1;};func (_cce *treeNode )set (_ceg bool ,_dac *treeNode ){if !_ceg {_cce ._feeb =_dac ;}else {_cce ._cbb =_dac ;
};};type tiffType int ;func (_efaa *Decoder )decoderRowType41D ()error {if _efaa ._bbb {_efaa ._fd .Align ();};_efaa ._fd .Mark ();var (_ggd bool ;_afc error ;);if _efaa ._bag {_ggd ,_afc =_efaa .tryFetchEOL ();if _afc !=nil {return _afc ;};if !_ggd {return _dg ;
};}else {_ggd ,_afc =_efaa .looseFetchEOL ();if _afc !=nil {return _afc ;};};if !_ggd {_efaa ._fd .Reset ();};if _ggd &&_efaa ._caf {_efaa ._fd .Mark ();for _afd :=0;_afd < 5;_afd ++{_ggd ,_afc =_efaa .tryFetchEOL ();if _afc !=nil {if _f .Is (_afc ,_c .EOF ){if _afd ==0{break ;
};return _cc ;};};if _ggd {continue ;};if _afd > 0{return _cc ;};break ;};if _ggd {return _c .EOF ;};_efaa ._fd .Reset ();};if _afc =_efaa .decode1D ();_afc !=nil {return _afc ;};return nil ;};func _gdee (_ffb int )([]byte ,int ){var _abbd []byte ;for _cfc :=0;
_cfc < 6;_cfc ++{_abbd ,_ffb =_eadf (_abbd ,_ffb ,_ab );};return _abbd ,_ffb %8;};var _eg =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_aeb *Decoder )tryFetchEOL ()(bool ,error ){_cbd ,_fdf :=_aeb ._fd .ReadBits (12);if _fdf !=nil {return false ,_fdf ;};return _cbd ==0x1,nil ;};func (_dfb *Decoder )tryFetchEOL1 ()(bool ,error ){_aacad ,_dc :=_dfb ._fd .ReadBits (13);if _dc !=nil {return false ,_dc ;
};return _aacad ==0x3,nil ;};func (_edfd *Decoder )tryFetchRTC2D ()(_cgab error ){_edfd ._fd .Mark ();var _fea bool ;for _adc :=0;_adc < 5;_adc ++{_fea ,_cgab =_edfd .tryFetchEOL1 ();if _cgab !=nil {if _f .Is (_cgab ,_c .EOF ){if _adc ==0{break ;};return _cc ;
};};if _fea {continue ;};if _adc > 0{return _cc ;};break ;};if _fea {return _c .EOF ;};_edfd ._fd .Reset ();return _cgab ;};type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;
};func _ddaa (_efbg []byte ,_dca bool ,_ebab int )(int ,int ){_cfd :=0;for _ebab < len (_efbg ){if _dca {if _efbg [_ebab ]!=_cbe {break ;};}else {if _efbg [_ebab ]!=_acda {break ;};};_cfd ++;_ebab ++;};return _cfd ,_ebab ;};func (_dfab *treeNode )walk (_feb bool )*treeNode {if _feb {return _dfab ._cbb ;
};return _dfab ._feeb ;};func _eadf (_egebc []byte ,_ddac int ,_dgbg code )([]byte ,int ){_fdeb :=0;for _fdeb < _dgbg .BitsWritten {_ddd :=_ddac /8;_feag :=_ddac %8;if _ddd >=len (_egebc ){_egebc =append (_egebc ,0);};_baa :=8-_feag ;_bge :=_dgbg .BitsWritten -_fdeb ;
if _baa > _bge {_baa =_bge ;};if _fdeb < 8{_egebc [_ddd ]=_egebc [_ddd ]|byte (_dgbg .Code >>uint (8+_feag -_fdeb ))&_ef [8-_baa -_feag ];}else {_egebc [_ddd ]=_egebc [_ddd ]|(byte (_dgbg .Code <<uint (_fdeb -8))&_ef [8-_baa ])>>uint (_feag );};_ddac +=_baa ;
_fdeb +=_baa ;};return _egebc ,_ddac ;};func (_ecgd *Encoder )appendEncodedRow (_cdcdb ,_abf []byte ,_gea int )[]byte {if len (_cdcdb )> 0&&_gea !=0&&!_ecgd .EncodedByteAlign {_cdcdb [len (_cdcdb )-1]=_cdcdb [len (_cdcdb )-1]|_abf [0];_cdcdb =append (_cdcdb ,_abf [1:]...);
}else {_cdcdb =append (_cdcdb ,_abf ...);};return _cdcdb ;};func _fead (_fcg []byte ,_eac int )([]byte ,int ){return _eadf (_fcg ,_eac ,_cgd )};func (_bae *Decoder )looseFetchEOL ()(bool ,error ){_ad ,_dga :=_bae ._fd .ReadBits (12);if _dga !=nil {return false ,_dga ;
};switch _ad {case 0x1:return true ,nil ;case 0x0:for {_bgdb ,_agga :=_bae ._fd .ReadBool ();if _agga !=nil {return false ,_agga ;};if _bgdb {return true ,nil ;};};default:return false ,nil ;};};func _aaff (_dfdb ,_ffaa []byte ,_feg int )int {_ede :=_beg (_ffaa ,_feg );
if _ede < len (_ffaa )&&(_feg ==-1&&_ffaa [_ede ]==_cbe ||_feg >=0&&_feg < len (_dfdb )&&_dfdb [_feg ]==_ffaa [_ede ]||_feg >=len (_dfdb )&&_dfdb [_feg -1]!=_ffaa [_ede ]){_ede =_beg (_ffaa ,_ede );};return _ede ;};var (_cbe byte =1;_acda byte =0;);func (_eee *Encoder )encodeG32D (_ceba [][]byte )[]byte {var _dea []byte ;
var _ffa int ;for _eba :=0;_eba < len (_ceba );_eba +=_eee .K {if _eee .Rows > 0&&!_eee .EndOfBlock &&_eba ==_eee .Rows {break ;};_bbad ,_ccd :=_ebe (_ceba [_eba ],_ffa ,_ege );_dea =_eee .appendEncodedRow (_dea ,_bbad ,_ffa );if _eee .EncodedByteAlign {_ccd =0;
};_ffa =_ccd ;for _fef :=_eba +1;_fef < (_eba +_eee .K )&&_fef < len (_ceba );_fef ++{if _eee .Rows > 0&&!_eee .EndOfBlock &&_fef ==_eee .Rows {break ;};_ecgc ,_ebae :=_eadf (nil ,_ffa ,_gag );var _bec ,_gde ,_fbf int ;_eab :=-1;for _eab < len (_ceba [_fef ]){_bec =_beg (_ceba [_fef ],_eab );
_gde =_aaff (_ceba [_fef ],_ceba [_fef -1],_eab );_fbf =_beg (_ceba [_fef -1],_gde );if _fbf < _bec {_ecgc ,_ebae =_fead (_ecgc ,_ebae );_eab =_fbf ;}else {if _a .Abs (float64 (_gde -_bec ))> 3{_ecgc ,_ebae ,_eab =_cca (_ceba [_fef ],_ecgc ,_ebae ,_eab ,_bec );
}else {_ecgc ,_ebae =_edee (_ecgc ,_ebae ,_bec ,_gde );_eab =_bec ;};};};_dea =_eee .appendEncodedRow (_dea ,_ecgc ,_ffa );if _eee .EncodedByteAlign {_ebae =0;};_ffa =_ebae %8;};};if _eee .EndOfBlock {_dgb ,_ :=_bbbf (_ffa );_dea =_eee .appendEncodedRow (_dea ,_dgb ,_ffa );
};return _dea ;};type tree struct{_aef *treeNode };func _cca (_fedf ,_efd []byte ,_aggc ,_bbf ,_egfd int )([]byte ,int ,int ){_aec :=_beg (_fedf ,_egfd );_fdd :=_bbf >=0&&_fedf [_bbf ]==_cbe ||_bbf ==-1;_efd ,_aggc =_eadf (_efd ,_aggc ,_agd );var _dbca int ;
if _bbf > -1{_dbca =_egfd -_bbf ;}else {_dbca =_egfd -_bbf -1;};_efd ,_aggc =_eea (_efd ,_aggc ,_dbca ,_fdd );_fdd =!_fdd ;_bfcbc :=_aec -_egfd ;_efd ,_aggc =_eea (_efd ,_aggc ,_bfcbc ,_fdd );_bbf =_aec ;return _efd ,_aggc ,_bbf ;};var (_ga map[int ]code ;
_gb map[int ]code ;_af map[int ]code ;_fcd map[int ]code ;_bdc map[int ]code ;_ef map[int ]byte ;_ab =code {Code :1<<4,BitsWritten :12};_ege =code {Code :3<<3,BitsWritten :13};_gag =code {Code :2<<3,BitsWritten :13};_cgd =code {Code :1<<12,BitsWritten :4};
_agd =code {Code :1<<13,BitsWritten :3};_gf =code {Code :1<<15,BitsWritten :1};_aac =code {Code :3<<13,BitsWritten :3};_dfd =code {Code :3<<10,BitsWritten :6};_gcg =code {Code :3<<9,BitsWritten :7};_dde =code {Code :2<<13,BitsWritten :3};_ee =code {Code :2<<10,BitsWritten :6};
_gff =code {Code :2<<9,BitsWritten :7};);func (_ebd *Decoder )decode2D ()error {_ebd ._aea =_ebd ._aaca ;_ebd ._ced ,_ebd ._bdb =_ebd ._bdb ,_ebd ._ced ;_fdb :=true ;var (_cead bool ;_gcga int ;_ceb error ;);_ebd ._aaca =0;_dec :for _gcga < _ebd ._ecg {_baf :=_ce ._aef ;
for {_cead ,_ceb =_ebd ._fd .ReadBool ();if _ceb !=nil {return _ceb ;};_baf =_baf .walk (_cead );if _baf ==nil {continue _dec ;};if !_baf ._gdg {continue ;};switch _baf ._afb {case _g :var _abg int ;if _fdb {_abg ,_ceb =_ebd .decodeRun (_ac );}else {_abg ,_ceb =_ebd .decodeRun (_dd );
};if _ceb !=nil {return _ceb ;};_gcga +=_abg ;_ebd ._ced [_ebd ._aaca ]=_gcga ;_ebd ._aaca ++;if _fdb {_abg ,_ceb =_ebd .decodeRun (_dd );}else {_abg ,_ceb =_ebd .decodeRun (_ac );};if _ceb !=nil {return _ceb ;};_gcga +=_abg ;_ebd ._ced [_ebd ._aaca ]=_gcga ;
_ebd ._aaca ++;case _fg :_egf :=_ebd .getNextChangingElement (_gcga ,_fdb )+1;if _egf >=_ebd ._aea {_gcga =_ebd ._ecg ;}else {_gcga =_ebd ._bdb [_egf ];};default:_fbb :=_ebd .getNextChangingElement (_gcga ,_fdb );if _fbb >=_ebd ._aea ||_fbb ==-1{_gcga =_ebd ._ecg +_baf ._afb ;
}else {_gcga =_ebd ._bdb [_fbb ]+_baf ._afb ;};_ebd ._ced [_ebd ._aaca ]=_gcga ;_ebd ._aaca ++;_fdb =!_fdb ;};continue _dec ;};};return nil ;};type treeNode struct{_feeb *treeNode ;_cbb *treeNode ;_afb int ;_ebdb bool ;_gdg bool ;};func (_baae *tree )fillWithNode (_fdge ,_fab int ,_gebd *treeNode )error {_dgd :=_baae ._aef ;
for _ffcg :=0;_ffcg < _fdge ;_ffcg ++{_bdg :=uint (_fdge -1-_ffcg );_gfe :=((_fab >>_bdg )&1)!=0;_dcae :=_dgd .walk (_gfe );if _dcae !=nil {if _dcae ._gdg {return _f .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_dgd =_dcae ;continue ;};if _ffcg ==_fdge -1{_dcae =_gebd ;}else {_dcae =&treeNode {};};if _fab ==0{_dcae ._ebdb =true ;};_dgd .set (_gfe ,_dcae );_dgd =_dcae ;};return nil ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;
BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};func _eea (_fac []byte ,_dedd int ,_gbg int ,_bca bool )([]byte ,int ){var (_fdg code ;_fde bool ;);for !_fde {_fdg ,_gbg ,_fde =_fcae (_gbg ,_bca );_fac ,_dedd =_eadf (_fac ,_dedd ,_fdg );
};return _fac ,_dedd ;};var _ea =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _edee (_ebg []byte ,_ecb ,_acf ,_cba int )([]byte ,int ){_ffbd :=_egfa (_acf ,_cba );_ebg ,_ecb =_eadf (_ebg ,_ecb ,_ffbd );return _ebg ,_ecb ;};type Decoder struct{_ecg int ;_efa int ;_gca int ;_ecc []byte ;_fcf int ;_gg bool ;_ff bool ;_cgcd bool ;
_fag bool ;_bag bool ;_caf bool ;_bbb bool ;_eaf int ;_edf int ;_bdb []int ;_ced []int ;_aea int ;_aaca int ;_cb int ;_fed int ;_fd *_de .Reader ;_bf tiffType ;_gaf error ;};func _beg (_dce []byte ,_dgaa int )int {if _dgaa >=len (_dce ){return _dgaa ;};
if _dgaa < -1{_dgaa =-1;};var _gdeeg byte ;if _dgaa > -1{_gdeeg =_dce [_dgaa ];}else {_gdeeg =_cbe ;};_cff :=_dgaa +1;for _cff < len (_dce ){if _dce [_cff ]!=_gdeeg {break ;};_cff ++;};return _cff ;};func (_caff *Encoder )Encode (pixels [][]byte )[]byte {if _caff .BlackIs1 {_cbe =0;
_acda =1;}else {_cbe =1;_acda =0;};if _caff .K ==0{return _caff .encodeG31D (pixels );};if _caff .K > 0{return _caff .encodeG32D (pixels );};if _caff .K < 0{return _caff .encodeG4 (pixels );};return nil ;};func _bbbf (_bff int )([]byte ,int ){var _bcb []byte ;
for _ffbe :=0;_ffbe < 6;_ffbe ++{_bcb ,_bff =_eadf (_bcb ,_bff ,_ege );};return _bcb ,_bff %8;};func (_abb *Decoder )fetch ()error {if _abb ._eaf ==-1{return nil ;};if _abb ._edf < _abb ._eaf {return nil ;};_abb ._eaf =0;_gda :=_abb .decodeRow ();if _gda !=nil {if !_f .Is (_gda ,_c .EOF ){return _gda ;
};if _abb ._eaf !=0{return _gda ;};_abb ._eaf =-1;};_abb ._edf =0;return nil ;};func _eca (_cadg [][]byte )[][]byte {_bee :=make ([]byte ,len (_cadg [0]));for _ccab :=range _bee {_bee [_ccab ]=_cbe ;};_cadg =append (_cadg ,[]byte {});for _fba :=len (_cadg )-1;
_fba > 0;_fba --{_cadg [_fba ]=_cadg [_fba -1];};_cadg [0]=_bee ;return _cadg ;};var (_aa *treeNode ;_e *treeNode ;_dd *tree ;_ac *tree ;_fc *tree ;_ce *tree ;_cf =-2000;_cef =-1000;_fg =-3000;_g =-4000;);func (_bb tiffType )String ()string {switch _bb {case _cgc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";
case _aacc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";case _bde :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};func _ebe (_bfd []byte ,_edb int ,_eeec code )([]byte ,int ){_affb :=true ;
var _bcc []byte ;_bcc ,_edb =_eadf (nil ,_edb ,_eeec );_dgg :=0;var _afg int ;for _dgg < len (_bfd ){_afg ,_dgg =_ddaa (_bfd ,_affb ,_dgg );_bcc ,_edb =_eea (_bcc ,_edb ,_afg ,_affb );_affb =!_affb ;};return _bcc ,_edb %8;};func (_eff *Decoder )decodeRowType6 ()error {if _eff ._bbb {_eff ._fd .Align ();
};if _eff ._caf {_eff ._fd .Mark ();_ded ,_fcc :=_eff .tryFetchEOL ();if _fcc !=nil {return _fcc ;};if _ded {_ded ,_fcc =_eff .tryFetchEOL ();if _fcc !=nil {return _fcc ;};if _ded {return _c .EOF ;};};_eff ._fd .Reset ();};return _eff .decode2D ();};func _fcae (_dcd int ,_bafe bool )(code ,int ,bool ){if _dcd < 64{if _bafe {return _gb [_dcd ],0,true ;
};return _ga [_dcd ],0,true ;};_decc :=_dcd /64;if _decc > 40{return _bdc [2560],_dcd -2560,false ;};if _decc > 27{return _bdc [_decc *64],_dcd -_decc *64,false ;};if _bafe {return _fcd [_decc *64],_dcd -_decc *64,false ;};return _af [_decc *64],_dcd -_decc *64,false ;
};func (_bda *Decoder )Read (in []byte )(int ,error ){if _bda ._gaf !=nil {return 0,_bda ._gaf ;};_fee :=len (in );var (_ecge int ;_fgd int ;);for _fee !=0{if _bda ._edf >=_bda ._eaf {if _bfc :=_bda .fetch ();_bfc !=nil {_bda ._gaf =_bfc ;return 0,_bfc ;
};};if _bda ._eaf ==-1{return _ecge ,_c .EOF ;};switch {case _fee <=_bda ._eaf -_bda ._edf :_agg :=_bda ._ecc [_bda ._edf :_bda ._edf +_fee ];for _ ,_geb :=range _agg {if !_bda ._fag {_geb =^_geb ;};in [_fgd ]=_geb ;_fgd ++;};_ecge +=len (_agg );_bda ._edf +=len (_agg );
return _ecge ,nil ;default:_aae :=_bda ._ecc [_bda ._edf :];for _ ,_geba :=range _aae {if !_bda ._fag {_geba =^_geba ;};in [_fgd ]=_geba ;_fgd ++;};_ecge +=len (_aae );_bda ._edf +=len (_aae );_fee -=len (_aae );};};return _ecge ,nil ;};func (_cac *Decoder )decodeRowType4 ()error {if !_cac ._gg {return _cac .decoderRowType41D ();
};if _cac ._bbb {_cac ._fd .Align ();};_cac ._fd .Mark ();_fda ,_bfcb :=_cac .tryFetchEOL ();if _bfcb !=nil {return _bfcb ;};if !_fda &&_cac ._bag {_cac ._cb ++;if _cac ._cb > _cac ._fcf {return _dg ;};_cac ._fd .Reset ();};if !_fda {_cac ._fd .Reset ();
};_bfa ,_bfcb :=_cac ._fd .ReadBool ();if _bfcb !=nil {return _bfcb ;};if _bfa {if _fda &&_cac ._caf {if _bfcb =_cac .tryFetchRTC2D ();_bfcb !=nil {return _bfcb ;};};_bfcb =_cac .decode1D ();}else {_bfcb =_cac .decode2D ();};if _bfcb !=nil {return _bfcb ;
};return nil ;};func _aga (_deb ,_bcdg []byte ,_dcc int ,_aebc bool )int {_dbcb :=_beg (_bcdg ,_dcc );if _dbcb < len (_bcdg )&&(_dcc ==-1&&_bcdg [_dbcb ]==_cbe ||_dcc >=0&&_dcc < len (_deb )&&_deb [_dcc ]==_bcdg [_dbcb ]||_dcc >=len (_deb )&&_aebc &&_bcdg [_dbcb ]==_cbe ||_dcc >=len (_deb )&&!_aebc &&_bcdg [_dbcb ]==_acda ){_dbcb =_beg (_bcdg ,_dbcb );
};return _dbcb ;};func (_ead *Decoder )decodeRow ()(_edg error ){if !_ead ._caf &&_ead ._efa > 0&&_ead ._efa ==_ead ._gca {return _c .EOF ;};switch _ead ._bf {case _cgc :_edg =_ead .decodeRowType2 ();case _aacc :_edg =_ead .decodeRowType4 ();case _bde :_edg =_ead .decodeRowType6 ();
};if _edg !=nil {return _edg ;};_cga :=0;_aggb :=true ;_ead ._fed =0;for _ccc :=0;_ccc < _ead ._aaca ;_ccc ++{_gab :=_ead ._ecg ;if _ccc !=_ead ._aaca {_gab =_ead ._ced [_ccc ];};if _gab > _ead ._ecg {_gab =_ead ._ecg ;};_cad :=_cga /8;for _cga %8!=0&&_gab -_cga > 0{var _bcd byte ;
if !_aggb {_bcd =1<<uint (7-(_cga %8));};_ead ._ecc [_cad ]|=_bcd ;_cga ++;};if _cga %8==0{_cad =_cga /8;var _bab byte ;if !_aggb {_bab =0xff;};for _gab -_cga > 7{_ead ._ecc [_cad ]=_bab ;_cga +=8;_cad ++;};};for _gab -_cga > 0{if _cga %8==0{_ead ._ecc [_cad ]=0;
};var _edfe byte ;if !_aggb {_edfe =1<<uint (7-(_cga %8));};_ead ._ecc [_cad ]|=_edfe ;_cga ++;};_aggb =!_aggb ;};if _cga !=_ead ._ecg {return _f .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_ead ._eaf =(_cga +7)/8;_ead ._gca ++;return nil ;};const (_ tiffType =iota ;_cgc ;_aacc ;_bde ;);func _fgb (_gebf int )([]byte ,int ){var _dda []byte ;for _dgaf :=0;_dgaf < 2;_dgaf ++{_dda ,_gebf =_eadf (_dda ,_gebf ,_ab );};return _dda ,_gebf %8;};
