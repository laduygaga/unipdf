//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_bb "errors";_c "fmt";_b "github.com/laduygaga/unipdf/v3/internal/bitwise";_f "github.com/laduygaga/unipdf/v3/internal/jbig2/internal";_dd "math";_bc "strings";);func _ece (_ecg ,_bf int32 )int32 {if _ecg > _bf {return _ecg ;};return _bf ;
};func _da (_bca *Code )*OutOfBandNode {return &OutOfBandNode {}};func (_aa *StandardTable )RootNode ()*InternalNode {return _aa ._de };func (_dca *FixedSizeTable )String ()string {return _dca ._cg .String ()+"\u000a"};func (_ebg *FixedSizeTable )InitTree (codeTable []*Code )error {_ed (codeTable );
for _ ,_fe :=range codeTable {_ag :=_ebg ._cg .append (_fe );if _ag !=nil {return _ag ;};};return nil ;};func (_bab *EncodedTable )String ()string {return _bab ._gg .String ()+"\u000a"};var _ Node =&ValueNode {};func (_bbg *FixedSizeTable )RootNode ()*InternalNode {return _bbg ._cg };
func (_bae *StandardTable )String ()string {return _bae ._de .String ()+"\u000a"};func (_a *EncodedTable )Decode (r *_b .Reader )(int64 ,error ){return _a ._gg .Decode (r )};func (_eee *StandardTable )Decode (r *_b .Reader )(int64 ,error ){return _eee ._de .Decode (r )};
type Node interface{Decode (_ea *_b .Reader )(int64 ,error );String ()string ;};type Tabler interface{Decode (_cb *_b .Reader )(int64 ,error );InitTree (_bdc []*Code )error ;String ()string ;RootNode ()*InternalNode ;};func (_cf *FixedSizeTable )Decode (r *_b .Reader )(int64 ,error ){return _cf ._cg .Decode (r )};
type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_b .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func (_ga *EncodedTable )RootNode ()*InternalNode {return _ga ._gg };var _ Tabler =&EncodedTable {};type EncodedTable struct{BasicTabler ;
_gg *InternalNode ;};func _fbe (_dcd int32 )*InternalNode {return &InternalNode {_fbb :_dcd }};func (_cfa *InternalNode )Decode (r *_b .Reader )(int64 ,error ){_bbff ,_aed :=r .ReadBit ();if _aed !=nil {return 0,_aed ;};if _bbff ==0{return _cfa ._ec .Decode (r );
};return _cfa ._acag .Decode (r );};func (_gac *Code )String ()string {var _fag string ;if _gac ._ffa !=-1{_fag =_aff (_gac ._ffa ,_gac ._dea );}else {_fag ="\u003f";};return _c .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_fag ,_gac ._dea ,_gac ._gaaf ,_gac ._be );
};func (_af *ValueNode )Decode (r *_b .Reader )(int64 ,error ){_gf ,_ggc :=r .ReadBits (byte (_af ._agf ));if _ggc !=nil {return 0,_ggc ;};if _af ._ae {_gf =-_gf ;};return int64 (_af ._ggd )+int64 (_gf ),nil ;};var _ Node =&InternalNode {};var _acb =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func _gge (_bce [][]int32 )(*StandardTable ,error ){var _ce []*Code ;for _dce :=0;_dce < len (_bce );_dce ++{_fgg :=_bce [_dce ][0];_dae :=_bce [_dce ][1];_ge :=_bce [_dce ][2];var _fdb bool ;if len (_bce [_dce ])> 3{_fdb =true ;};_ce =append (_ce ,NewCode (_fgg ,_dae ,_ge ,_fdb ));
};_fde :=&StandardTable {_de :_fbe (0)};if _dcg :=_fde .InitTree (_ce );_dcg !=nil {return nil ,_dcg ;};return _fde ,nil ;};func (_daf *InternalNode )append (_eae *Code )(_ddf error ){if _eae ._dea ==0{return nil ;};_cd :=_eae ._dea -1-_daf ._fbb ;if _cd < 0{return _bb .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_gd :=(_eae ._ffa >>uint (_cd ))&0x1;if _cd ==0{if _eae ._gaaf ==-1{if _gd ==1{if _daf ._acag !=nil {return _c .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_eae );
};_daf ._acag =_da (_eae );}else {if _daf ._ec !=nil {return _c .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_eae );};_daf ._ec =_da (_eae );};}else {if _gd ==1{if _daf ._acag !=nil {return _c .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_eae );
};_daf ._acag =_gaa (_eae );}else {if _daf ._ec !=nil {return _c .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_eae );
};_daf ._ec =_gaa (_eae );};};}else {if _gd ==1{if _daf ._acag ==nil {_daf ._acag =_fbe (_daf ._fbb +1);};if _ddf =_daf ._acag .(*InternalNode ).append (_eae );_ddf !=nil {return _ddf ;};}else {if _daf ._ec ==nil {_daf ._ec =_fbe (_daf ._fbb +1);};if _ddf =_daf ._ec .(*InternalNode ).append (_eae );
_ddf !=nil {return _ddf ;};};};return nil ;};func _aff (_bcc ,_fc int32 )string {var _gee int32 ;_fge :=make ([]rune ,_fc );for _afa :=int32 (1);_afa <=_fc ;_afa ++{_gee =_bcc >>uint (_fc -_afa )&1;if _gee !=0{_fge [_afa -1]='1';}else {_fge [_afa -1]='0';
};};return string (_fge );};var _bd =make ([]Tabler ,len (_acb ));func (_fd *StandardTable )InitTree (codeTable []*Code )error {_ed (codeTable );for _ ,_ggg :=range codeTable {if _ddfb :=_fd ._de .append (_ggg );_ddfb !=nil {return _ddfb ;};};return nil ;
};type Code struct{_dea int32 ;_gaaf int32 ;_be int32 ;_bg bool ;_ffa int32 ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_cc :=&EncodedTable {_gg :&InternalNode {},BasicTabler :table };if _dg :=_cc .parseTable ();_dg !=nil {return nil ,_dg ;
};return _cc ,nil ;};type FixedSizeTable struct{_cg *InternalNode };func (_aca *OutOfBandNode )String ()string {return _c .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_dd .MaxInt64 ));};type OutOfBandNode struct{};type ValueNode struct{_agf int32 ;_ggd int32 ;
_ae bool ;};func _ed (_bbd []*Code ){var _ecb int32 ;for _ ,_aebd :=range _bbd {_ecb =_ece (_ecb ,_aebd ._dea );};_cgg :=make ([]int32 ,_ecb +1);for _ ,_aaf :=range _bbd {_cgg [_aaf ._dea ]++;};var _afb int32 ;_db :=make ([]int32 ,len (_cgg )+1);_cgg [0]=0;
for _dac :=int32 (1);_dac <=int32 (len (_cgg ));_dac ++{_db [_dac ]=(_db [_dac -1]+(_cgg [_dac -1]))<<1;_afb =_db [_dac ];for _ ,_bcf :=range _bbd {if _bcf ._dea ==_dac {_bcf ._ffa =_afb ;_afb ++;};};};};var _ Node =&OutOfBandNode {};func (_faa *OutOfBandNode )Decode (r *_b .Reader )(int64 ,error ){return 0,_f .ErrOOB };
func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bd ){return nil ,_bb .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_fg :=_bd [number -1];if _fg ==nil {var _aee error ;
_fg ,_aee =_gge (_acb [number -1]);if _aee !=nil {return nil ,_aee ;};_bd [number -1]=_fg ;};return _fg ,nil ;};func (_aeb *ValueNode )String ()string {return _c .Sprintf ("\u0025\u0064\u002f%\u0064",_aeb ._agf ,_aeb ._ggd );};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_dea :prefixLength ,_gaaf :rangeLength ,_be :rangeLow ,_bg :isLowerRange ,_ffa :-1};
};func _gaa (_agc *Code )*ValueNode {return &ValueNode {_agf :_agc ._gaaf ,_ggd :_agc ._be ,_ae :_agc ._bg }};type InternalNode struct{_fbb int32 ;_ec Node ;_acag Node ;};func (_e *EncodedTable )parseTable ()error {var (_fa []*Code ;_ad ,_ac ,_eb int32 ;
_bbc uint64 ;_ab error ;);_ee :=_e .StreamReader ();_bbf :=_e .HtLow ();for _bbf < _e .HtHigh (){_bbc ,_ab =_ee .ReadBits (byte (_e .HtPS ()));if _ab !=nil {return _ab ;};_ad =int32 (_bbc );_bbc ,_ab =_ee .ReadBits (byte (_e .HtRS ()));if _ab !=nil {return _ab ;
};_ac =int32 (_bbc );_fa =append (_fa ,NewCode (_ad ,_ac ,_eb ,false ));_bbf +=1<<uint (_ac );};_bbc ,_ab =_ee .ReadBits (byte (_e .HtPS ()));if _ab !=nil {return _ab ;};_ad =int32 (_bbc );_ac =32;_eb =_e .HtLow ()-1;_fa =append (_fa ,NewCode (_ad ,_ac ,_eb ,true ));
_bbc ,_ab =_ee .ReadBits (byte (_e .HtPS ()));if _ab !=nil {return _ab ;};_ad =int32 (_bbc );_ac =32;_eb =_e .HtHigh ();_fa =append (_fa ,NewCode (_ad ,_ac ,_eb ,false ));if _e .HtOOB ()==1{_bbc ,_ab =_ee .ReadBits (byte (_e .HtPS ()));if _ab !=nil {return _ab ;
};_ad =int32 (_bbc );_fa =append (_fa ,NewCode (_ad ,-1,-1,false ));};if _ab =_e .InitTree (_fa );_ab !=nil {return _ab ;};return nil ;};func (_ba *EncodedTable )InitTree (codeTable []*Code )error {_ed (codeTable );for _ ,_fb :=range codeTable {if _dc :=_ba ._gg .append (_fb );
_dc !=nil {return _dc ;};};return nil ;};type StandardTable struct{_de *InternalNode };func (_cfb *InternalNode )pad (_cdb *_bc .Builder ){for _df :=int32 (0);_df < _cfb ._fbb ;_df ++{_cdb .WriteString ("\u0020\u0020\u0020");};};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_eg :=&FixedSizeTable {_cg :&InternalNode {}};
if _bac :=_eg .InitTree (codeTable );_bac !=nil {return nil ,_bac ;};return _eg ,nil ;};func (_feg *InternalNode )String ()string {_dag :=&_bc .Builder {};_dag .WriteString ("\u000a");_feg .pad (_dag );_dag .WriteString ("\u0030\u003a\u0020");_dag .WriteString (_feg ._ec .String ()+"\u000a");
_feg .pad (_dag );_dag .WriteString ("\u0031\u003a\u0020");_dag .WriteString (_feg ._acag .String ()+"\u000a");return _dag .String ();};