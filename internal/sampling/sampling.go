//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package sampling ;import (_dd "github.com/laduygaga/unipdf/v3/internal/bitwise";_a "github.com/laduygaga/unipdf/v3/internal/imageutil";_e "io";);func ResampleBytes (data []byte ,bitsPerSample int )[]uint32 {var _da []uint32 ;_daf :=bitsPerSample ;var _ff uint32 ;
var _fb byte ;_de :=0;_df :=0;_daa :=0;for _daa < len (data ){if _de > 0{_ae :=_de ;if _daf < _ae {_ae =_daf ;};_ff =(_ff <<uint (_ae ))|uint32 (_fb >>uint (8-_ae ));_de -=_ae ;if _de > 0{_fb =_fb <<uint (_ae );}else {_fb =0;};_daf -=_ae ;if _daf ==0{_da =append (_da ,_ff );
_daf =bitsPerSample ;_ff =0;_df ++;};}else {_ed :=data [_daa ];_daa ++;_gab :=8;if _daf < _gab {_gab =_daf ;};_de =8-_gab ;_ff =(_ff <<uint (_gab ))|uint32 (_ed >>uint (_de ));if _gab < 8{_fb =_ed <<uint (_gab );};_daf -=_gab ;if _daf ==0{_da =append (_da ,_ff );
_daf =bitsPerSample ;_ff =0;_df ++;};};};for _de >=bitsPerSample {_fg :=_de ;if _daf < _fg {_fg =_daf ;};_ff =(_ff <<uint (_fg ))|uint32 (_fb >>uint (8-_fg ));_de -=_fg ;if _de > 0{_fb =_fb <<uint (_fg );}else {_fb =0;};_daf -=_fg ;if _daf ==0{_da =append (_da ,_ff );
_daf =bitsPerSample ;_ff =0;_df ++;};};return _da ;};func (_ef *Reader )ReadSamples (samples []uint32 )(_ga error ){for _fe :=0;_fe < len (samples );_fe ++{samples [_fe ],_ga =_ef .ReadSample ();if _ga !=nil {return _ga ;};};return nil ;};func ResampleUint32 (data []uint32 ,bitsPerInputSample int ,bitsPerOutputSample int )[]uint32 {var _agf []uint32 ;
_dfc :=bitsPerOutputSample ;var _ac uint32 ;var _fd uint32 ;_b :=0;_ad :=0;_agb :=0;for _agb < len (data ){if _b > 0{_egg :=_b ;if _dfc < _egg {_egg =_dfc ;};_ac =(_ac <<uint (_egg ))|(_fd >>uint (bitsPerInputSample -_egg ));_b -=_egg ;if _b > 0{_fd =_fd <<uint (_egg );
}else {_fd =0;};_dfc -=_egg ;if _dfc ==0{_agf =append (_agf ,_ac );_dfc =bitsPerOutputSample ;_ac =0;_ad ++;};}else {_eff :=data [_agb ];_agb ++;_dc :=bitsPerInputSample ;if _dfc < _dc {_dc =_dfc ;};_b =bitsPerInputSample -_dc ;_ac =(_ac <<uint (_dc ))|(_eff >>uint (_b ));
if _dc < bitsPerInputSample {_fd =_eff <<uint (_dc );};_dfc -=_dc ;if _dfc ==0{_agf =append (_agf ,_ac );_dfc =bitsPerOutputSample ;_ac =0;_ad ++;};};};for _b >=bitsPerOutputSample {_ab :=_b ;if _dfc < _ab {_ab =_dfc ;};_ac =(_ac <<uint (_ab ))|(_fd >>uint (bitsPerInputSample -_ab ));
_b -=_ab ;if _b > 0{_fd =_fd <<uint (_ab );}else {_fd =0;};_dfc -=_ab ;if _dfc ==0{_agf =append (_agf ,_ac );_dfc =bitsPerOutputSample ;_ac =0;_ad ++;};};if _dfc > 0&&_dfc < bitsPerOutputSample {_ac <<=uint (_dfc );_agf =append (_agf ,_ac );};return _agf ;
};type Writer struct{_cf _a .ImageBase ;_eca *_dd .Writer ;_gg ,_gc int ;_ade bool ;};func NewWriter (img _a .ImageBase )*Writer {return &Writer {_eca :_dd .NewWriterMSB (img .Data ),_cf :img ,_gc :img .ColorComponents ,_ade :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };
};type Reader struct{_ag _a .ImageBase ;_eg *_dd .Reader ;_egd ,_g ,_af int ;_ee bool ;};type SampleWriter interface{WriteSample (_ecb uint32 )error ;WriteSamples (_c []uint32 )error ;};func (_fa *Reader )ReadSample ()(uint32 ,error ){if _fa ._g ==_fa ._ag .Height {return 0,_e .EOF ;
};_ec ,_ecc :=_fa ._eg .ReadBits (byte (_fa ._ag .BitsPerComponent ));if _ecc !=nil {return 0,_ecc ;};_fa ._af --;if _fa ._af ==0{_fa ._af =_fa ._ag .ColorComponents ;_fa ._egd ++;};if _fa ._egd ==_fa ._ag .Width {if _fa ._ee {_fa ._eg .ConsumeRemainingBits ();
};_fa ._egd =0;_fa ._g ++;};return uint32 (_ec ),nil ;};type SampleReader interface{ReadSample ()(uint32 ,error );ReadSamples (_f []uint32 )error ;};func (_eef *Writer )WriteSamples (samples []uint32 )error {for _ce :=0;_ce < len (samples );_ce ++{if _fbb :=_eef .WriteSample (samples [_ce ]);
_fbb !=nil {return _fbb ;};};return nil ;};func (_ea *Writer )WriteSample (sample uint32 )error {if _ ,_eda :=_ea ._eca .WriteBits (uint64 (sample ),_ea ._cf .BitsPerComponent );_eda !=nil {return _eda ;};_ea ._gc --;if _ea ._gc ==0{_ea ._gc =_ea ._cf .ColorComponents ;
_ea ._gg ++;};if _ea ._gg ==_ea ._cf .Width {if _ea ._ade {_ea ._eca .FinishByte ();};_ea ._gg =0;};return nil ;};func NewReader (img _a .ImageBase )*Reader {return &Reader {_eg :_dd .NewReader (img .Data ),_ag :img ,_af :img .ColorComponents ,_ee :img .BytesPerLine *8!=img .ColorComponents *img .BitsPerComponent *img .Width };
};