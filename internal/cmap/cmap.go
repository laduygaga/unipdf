//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_eg "bufio";_d "bytes";_c "encoding/hex";_b "errors";_e "fmt";_a "github.com/laduygaga/unipdf/v3/common";_fb "github.com/laduygaga/unipdf/v3/core";_aa "github.com/laduygaga/unipdf/v3/internal/cmap/bcmaps";_gc "io";_be "sort";_fd "strconv";
_ca "strings";_f "unicode/utf16";);func (cmap *CMap )parseBfrange ()error {for {var _dggd CharCode ;_agd ,_adbd :=cmap .parseObject ();if _adbd !=nil {if _adbd ==_gc .EOF {break ;};return _adbd ;};switch _bgb :=_agd .(type ){case cmapOperand :if _bgb .Operand ==_ddbb {return nil ;
};return _b .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_dggd =_cee (_bgb );default:return _b .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _gdd CharCode ;_agd ,_adbd =cmap .parseObject ();if _adbd !=nil {if _adbd ==_gc .EOF {break ;};return _adbd ;};switch _baab :=_agd .(type ){case cmapOperand :_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_gdd =_cee (_baab );if _gdd > 0xffff{_gdd =0xffff;};default:_a .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_agd );return ErrBadCMap ;
};_agd ,_adbd =cmap .parseObject ();if _adbd !=nil {if _adbd ==_gc .EOF {break ;};return _adbd ;};switch _gae :=_agd .(type ){case cmapArray :if len (_gae .Array )!=int (_gdd -_dggd )+1{_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _ccb :=_dggd ;_ccb <=_gdd ;_ccb ++{_fbde :=_gae .Array [_ccb -_dggd ];_cbbe ,_faab :=_fbde .(cmapHexString );if !_faab {return _b .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_bfe :=_ggea (_cbbe );cmap ._bee [_ccb ]=string (_bfe );};case cmapHexString :_ecdg :=_ggea (_gae );_dfcg :=len (_ecdg );for _feb :=_dggd ;_feb <=_gdd ;_feb ++{cmap ._bee [_feb ]=string (_ecdg );if _dfcg > 0{_ecdg [_dfcg -1]++;}else {_a .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_feb );
};if _feb ==1<<32-1{break ;};};default:_a .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_agd );return ErrBadCMap ;};};return nil ;};func (cmap *CMap )Name ()string {return cmap ._ef };
func (_efgg *cMapParser )parseObject ()(cmapObject ,error ){_efgg .skipSpaces ();for {_adec ,_cfb :=_efgg ._ggbc .Peek (2);if _cfb !=nil {return nil ,_cfb ;};if _adec [0]=='%'{_efgg .parseComment ();_efgg .skipSpaces ();continue ;}else if _adec [0]=='/'{_ced ,_dce :=_efgg .parseName ();
return _ced ,_dce ;}else if _adec [0]=='('{_dfab ,_bdf :=_efgg .parseString ();return _dfab ,_bdf ;}else if _adec [0]=='['{_gaf ,_fee :=_efgg .parseArray ();return _gaf ,_fee ;}else if (_adec [0]=='<')&&(_adec [1]=='<'){_gefc ,_edd :=_efgg .parseDict ();
return _gefc ,_edd ;}else if _adec [0]=='<'{_ddga ,_gec :=_efgg .parseHexString ();return _ddga ,_gec ;}else if _fb .IsDecimalDigit (_adec [0])||(_adec [0]=='-'&&_fb .IsDecimalDigit (_adec [1])){_baca ,_acb :=_efgg .parseNumber ();if _acb !=nil {return nil ,_acb ;
};return _baca ,nil ;}else {_gabb ,_feeb :=_efgg .parseOperand ();if _feeb !=nil {return nil ,_feeb ;};return _gabb ,nil ;};};};type CMap struct{*cMapParser ;_ef string ;_cgd int ;_gd int ;_ee string ;_cbc string ;_gde CIDSystemInfo ;_cd []Codespace ;_dd map[CharCode ]CharCode ;
_gdg map[CharCode ]CharCode ;_bee map[CharCode ]string ;_dc map[string ]CharCode ;_ff []byte ;_fbc *_fb .PdfObjectStream ;_def integer ;};const (_cb =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (_fg *CIDSystemInfo )String ()string {return _e .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_fg .Registry ,_fg .Ordering ,_fg .Supplement );
};func (cmap *CMap )parseCodespaceRange ()error {for {_ece ,_bdde :=cmap .parseObject ();if _bdde !=nil {if _bdde ==_gc .EOF {break ;};return _bdde ;};_cdg ,_egc :=_ece .(cmapHexString );if !_egc {if _bcbf ,_eedc :=_ece .(cmapOperand );_eedc {if _bcbf .Operand ==_fea {return nil ;
};return _b .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_ece ,_bdde =cmap .parseObject ();if _bdde !=nil {if _bdde ==_gc .EOF {break ;};return _bdde ;};_gcb ,_egc :=_ece .(cmapHexString );if !_egc {return _b .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");
};if len (_cdg ._bgf )!=len (_gcb ._bgf ){return _b .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_ggbb :=_cee (_cdg );
_gac :=_cee (_gcb );if _gac < _ggbb {_a .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_ggbb ,_gac );
return ErrBadCMap ;};_dcbc :=_gcb ._gfgc ;_debg :=Codespace {NumBytes :_dcbc ,Low :_ggbb ,High :_gac };cmap ._cd =append (cmap ._cd ,_debg );_a .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_ggbb ,_gac );
};if len (cmap ._cd )==0{_a .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};type charRange struct{_de CharCode ;
_fbg CharCode ;};func _df (_ag bool )*CMap {_fdf :=16;if _ag {_fdf =8;};return &CMap {_cgd :_fdf ,_dd :make (map[CharCode ]CharCode ),_gdg :make (map[CharCode ]CharCode ),_bee :make (map[CharCode ]string ),_dc :make (map[string ]CharCode )};};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_gga :=make (map[CharCode ]string ,len (codeToRune ));
for _bg ,_edb :=range codeToRune {_gga [_bg ]=string (_edb );};cmap :=&CMap {_ef :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_gd :2,_cgd :16,_gde :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_cd :[]Codespace {{Low :0,High :0xffff}},_bee :_gga ,_dc :make (map[string ]CharCode ,len (codeToRune )),_dd :make (map[CharCode ]CharCode ,len (codeToRune )),_gdg :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_gfe ,_fce :=cmap ._dd [code ];return _gfe ,_fce ;};type cmapObject interface{};func _daa (_fccd string )string {_gbfc :=[]rune (_fccd );_fbbe :=make ([]string ,len (_gbfc ));
for _abf ,_add :=range _gbfc {_fbbe [_abf ]=_e .Sprintf ("\u0025\u0030\u0034\u0078",_add );};return _e .Sprintf ("\u003c\u0025\u0073\u003e",_ca .Join (_fbbe ,""));};func (cmap *CMap )parseVersion ()error {_adbf :="";_ecgc :=false ;for _egag :=0;_egag < 3&&!_ecgc ;
_egag ++{_dcb ,_cbd :=cmap .parseObject ();if _cbd !=nil {return _cbd ;};switch _deb :=_dcb .(type ){case cmapOperand :switch _deb .Operand {case "\u0064\u0065\u0066":_ecgc =true ;default:_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_dcb );
return ErrBadCMap ;};case cmapInt :_adbf =_e .Sprintf ("\u0025\u0064",_deb ._feaa );case cmapFloat :_adbf =_e .Sprintf ("\u0025\u0066",_deb ._abd );case cmapString :_adbf =_deb .String ;default:_a .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_dcb );
};};cmap ._ee =_adbf ;return nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _ccf []CharCode ;if cmap ._cgd ==8{for _ ,_ccfe :=range data {_ccf =append (_ccf ,CharCode (_ccfe ));};return _ccf ,true ;};for _ded :=0;_ded < len (data );
{_ggf ,_gbd ,_fcde :=cmap .matchCode (data [_ded :]);if !_fcde {_a .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_ded ,data ,string (data ));
return _ccf ,false ;};_ccf =append (_ccf ,_ggf );_ded +=_gbd ;};return _ccf ,true ;};type cmapArray struct{Array []cmapObject ;};func (_cac *cMapParser )parseHexString ()(cmapHexString ,error ){_cac ._ggbc .ReadByte ();_fgf :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_bfec :=_d .Buffer {};for {_cac .skipSpaces ();_afge ,_ggbcc :=_cac ._ggbc .Peek (1);if _ggbcc !=nil {return cmapHexString {},_ggbcc ;};if _afge [0]=='>'{_cac ._ggbc .ReadByte ();break ;};_afe ,_ :=_cac ._ggbc .ReadByte ();if _d .IndexByte (_fgf ,_afe )>=0{_bfec .WriteByte (_afe );
};};if _bfec .Len ()%2==1{_a .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_bfec .String ());_bfec .WriteByte ('0');};_gcc :=_bfec .Len ()/2;
_edda ,_ :=_c .DecodeString (_bfec .String ());return cmapHexString {_gfgc :_gcc ,_bgf :_edda },nil ;};type cmapDict struct{Dict map[string ]cmapObject ;};func (cmap *CMap )matchCode (_agf []byte )(_bac CharCode ,_ce int ,_gab bool ){for _bbe :=0;_bbe < _cb ;
_bbe ++{if _bbe < len (_agf ){_bac =_bac <<8|CharCode (_agf [_bbe ]);_ce ++;};_gab =cmap .inCodespace (_bac ,_bbe +1);if _gab {return _bac ,_ce ,true ;};};_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_agf ,string (_agf ),cmap );
return 0,0,false ;};func (cmap *CMap )parseType ()error {_bgc :=0;_abb :=false ;for _aaca :=0;_aaca < 3&&!_abb ;_aaca ++{_bdc ,_bed :=cmap .parseObject ();if _bed !=nil {return _bed ;};switch _bbace :=_bdc .(type ){case cmapOperand :switch _bbace .Operand {case "\u0064\u0065\u0066":_abb =true ;
default:_a .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_bdc );return ErrBadCMap ;};case cmapInt :_bgc =int (_bbace ._feaa );
};};cmap ._gd =_bgc ;return nil ;};func (cmap *CMap )Type ()int {return cmap ._gd };const (_eacd ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_ccg ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_dfb ="\u0065n\u0064\u0063\u006d\u0061\u0070";
_cdag ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_fea ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_feg ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";
_bebf ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_adca ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_ddbb ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_bcc ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";
_efc ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bab ="\u0075s\u0065\u0063\u006d\u0061\u0070";_eacb ="\u0057\u004d\u006fd\u0065";_efg ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_bcd ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";
_afg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )inCodespace (_aaa CharCode ,_aea int )bool {for _ ,_eab :=range cmap ._cd {if _eab .Low <=_aaa &&_aaa <=_eab .High &&_aea ==_eab .NumBytes {return true ;};};return false ;
};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._gde };func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_daf :=_ac (name );if _daf !=nil {return nil ,_daf ;};if cmap ._cbc ==""{cmap .computeInverseMappings ();return cmap ,nil ;
};_ge ,_daf :=_ac (cmap ._cbc );if _daf !=nil {return nil ,_daf ;};for _ad ,_db :=range _ge ._dd {if _ ,_adf :=cmap ._dd [_ad ];!_adf {cmap ._dd [_ad ]=_db ;};};cmap ._cd =append (cmap ._cd ,_ge ._cd ...);cmap .computeInverseMappings ();return cmap ,nil ;
};func _cda (_ab string )rune {_fba :=[]rune (_ab );return _fba [len (_fba )-1]};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_a .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_df (isSimple );cmap .cMapParser =_bge (data );_bd :=cmap .parse ();if _bd !=nil {return nil ,_bd ;};if len (cmap ._cd )==0{if cmap ._cbc !=""{return cmap ,nil ;};_a .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};type CharCode uint32 ;type integer struct{_bbba bool ;_cga int ;};func (cmap *CMap )parseName ()error {_bbec :="";_ega :=false ;for _cabb :=0;_cabb < 20&&!_ega ;_cabb ++{_fgc ,_ebg :=cmap .parseObject ();
if _ebg !=nil {return _ebg ;};switch _gee :=_fgc .(type ){case cmapOperand :switch _gee .Operand {case "\u0064\u0065\u0066":_ega =true ;default:_a .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_fgc ,_bbec );
if _bbec !=""{_bbec =_e .Sprintf ("\u0025\u0073\u0020%\u0073",_bbec ,_gee .Operand );};_a .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_bbec );
};case cmapName :_bbec =_gee .Name ;};};if !_ega {_a .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._ef =_bbec ;return nil ;};type cmapInt struct{_feaa int64 };
func (_ggd *cMapParser )parseOperand ()(cmapOperand ,error ){_dfcf :=cmapOperand {};_egdb :=_d .Buffer {};for {_agfc ,_ggae :=_ggd ._ggbc .Peek (1);if _ggae !=nil {if _ggae ==_gc .EOF {break ;};return _dfcf ,_ggae ;};if _fb .IsDelimiter (_agfc [0]){break ;
};if _fb .IsWhiteSpace (_agfc [0]){break ;};_caca ,_ :=_ggd ._ggbc .ReadByte ();_egdb .WriteByte (_caca );};if _egdb .Len ()==0{return _dfcf ,_e .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_dfcf .Operand =_egdb .String ();return _dfcf ,nil ;};var (ErrBadCMap =_b .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");ErrBadCMapComment =_b .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");
ErrBadCMapDict =_b .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074"););func _efcc (_dbcf cmapHexString )rune {_bffg :=_ggea (_dbcf );if _abda :=len (_bffg );_abda ==0{_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_dbcf );
return MissingCodeRune ;};if len (_bffg )> 1{_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_dbcf ,_bffg );
};return _bffg [0];};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )Bytes ()[]byte {_a .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._ff )> 0{return cmap ._ff ;};cmap ._ff =[]byte (_ca .Join ([]string {_aff ,cmap .toBfData (),_dadb },"\u000a"));return cmap ._ff ;};func _bge (_cbfe []byte )*cMapParser {_badc :=cMapParser {};_dcd :=_d .NewBuffer (_cbfe );_badc ._ggbc =_eg .NewReader (_dcd );
return &_badc ;};func (cmap *CMap )String ()string {_eae :=cmap ._gde ;_dad :=[]string {_e .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._cgd ),_e .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._gd )};if cmap ._ee !=""{_dad =append (_dad ,_e .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._ee ));
};if cmap ._cbc !=""{_dad =append (_dad ,_e .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._cbc ));};_dad =append (_dad ,_e .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_eae .String ()));
if len (cmap ._cd )> 0{_dad =append (_dad ,_e .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._cd )));};if len (cmap ._bee )> 0{_dad =append (_dad ,_e .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._bee )));
};return _e .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._ef ,_ca .Join (_dad ,"\u0020"));};func _ggea (_edff cmapHexString )[]rune {if len (_edff ._bgf )==1{return []rune {rune (_edff ._bgf [0])};};_ffba :=_edff ._bgf ;
if len (_ffba )%2!=0{_ffba =append (_ffba ,0);_a .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_edff ,_ffba );
};_bgcd :=len (_ffba )>>1;_abbc :=make ([]uint16 ,_bgcd );for _bdafb :=0;_bdafb < _bgcd ;_bdafb ++{_abbc [_bdafb ]=uint16 (_ffba [_bdafb <<1])<<8+uint16 (_ffba [_bdafb <<1+1]);};_agc :=_f .Decode (_abbc );return _agc ;};func (_bae *cMapParser )parseDict ()(cmapDict ,error ){_a .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_gea :=_fca ();_gbdd ,_ :=_bae ._ggbc .ReadByte ();if _gbdd !='<'{return _gea ,ErrBadCMapDict ;};_gbdd ,_ =_bae ._ggbc .ReadByte ();if _gbdd !='<'{return _gea ,ErrBadCMapDict ;};for {_bae .skipSpaces ();_edf ,_ceg :=_bae ._ggbc .Peek (2);if _ceg !=nil {return _gea ,_ceg ;
};if (_edf [0]=='>')&&(_edf [1]=='>'){_bae ._ggbc .ReadByte ();_bae ._ggbc .ReadByte ();break ;};_abc ,_ceg :=_bae .parseName ();_a .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_abc .Name );if _ceg !=nil {_a .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_ceg );
return _gea ,_ceg ;};_bae .skipSpaces ();_ceb ,_ceg :=_bae .parseObject ();if _ceg !=nil {return _gea ,_ceg ;};_gea .Dict [_abc .Name ]=_ceb ;_bae .skipSpaces ();_edf ,_ceg =_bae ._ggbc .Peek (3);if _ceg !=nil {return _gea ,_ceg ;};if string (_edf )=="\u0064\u0065\u0066"{_bae ._ggbc .Discard (3);
};};return _gea ,nil ;};func (cmap *CMap )parseSystemInfo ()error {_bcf :=false ;_ebf :=false ;_abba :="";_aab :=false ;_egg :=CIDSystemInfo {};for _fbd :=0;_fbd < 50&&!_aab ;_fbd ++{_dfc ,_fae :=cmap .parseObject ();if _fae !=nil {return _fae ;};switch _eff :=_dfc .(type ){case cmapDict :_aaac :=_eff .Dict ;
_bff ,_bcb :=_aaac ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_bcb {_a .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ddg ,_bcb :=_bff .(cmapString );
if !_bcb {_a .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_egg .Registry =_ddg .String ;_bff ,_bcb =_aaac ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];
if !_bcb {_a .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ddg ,_bcb =_bff .(cmapString );if !_bcb {_a .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_egg .Ordering =_ddg .String ;_gca ,_bcb :=_aaac ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_bcb {_a .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_bad ,_bcb :=_gca .(cmapInt );if !_bcb {_a .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_egg .Supplement =int (_bad ._feaa );
_aab =true ;case cmapOperand :switch _eff .Operand {case "\u0062\u0065\u0067i\u006e":_bcf =true ;case "\u0065\u006e\u0064":_aab =true ;case "\u0064\u0065\u0066":_ebf =false ;};case cmapName :if _bcf {_abba =_eff .Name ;_ebf =true ;};case cmapString :if _ebf {switch _abba {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_egg .Registry =_eff .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_egg .Ordering =_eff .String ;};};case cmapInt :if _ebf {switch _abba {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_egg .Supplement =int (_eff ._feaa );};};};};if !_aab {_a .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._gde =_egg ;return nil ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _aag ,_beb :=cmap ._bee [code ];_beb {return _aag ,true ;};return MissingCodeString ,false ;};type cmapOperand struct{Operand string ;
};type cMapParser struct{_ggbc *_eg .Reader };func (cmap *CMap )WMode ()(int ,bool ){return cmap ._def ._cga ,cmap ._def ._bbba };type cmapFloat struct{_abd float64 };const (_fdc =100;_aff ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_dadb ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func _ac (_eef string )(*CMap ,error ){_bbc ,_gb :=_aa .Asset (_eef );if _gb !=nil {return nil ,_gb ;};return LoadCmapFromDataCID (_bbc );};func (cmap *CMap )toBfData ()string {if len (cmap ._bee )==0{return "";};_gcec :=make ([]CharCode ,0,len (cmap ._bee ));
for _dca :=range cmap ._bee {_gcec =append (_gcec ,_dca );};_be .Slice (_gcec ,func (_fe ,_ffg int )bool {return _gcec [_fe ]< _gcec [_ffg ]});var _bag []charRange ;_aeg :=charRange {_gcec [0],_gcec [0]};_fcc :=cmap ._bee [_gcec [0]];for _ ,_cab :=range _gcec [1:]{_aae :=cmap ._bee [_cab ];
if _cab ==_aeg ._fbg +1&&_cda (_aae )==_cda (_fcc )+1{_aeg ._fbg =_cab ;}else {_bag =append (_bag ,_aeg );_aeg ._de ,_aeg ._fbg =_cab ,_cab ;};_fcc =_aae ;};_bag =append (_bag ,_aeg );var _dgg []CharCode ;var _ecc []fbRange ;for _ ,_gdge :=range _bag {if _gdge ._de ==_gdge ._fbg {_dgg =append (_dgg ,_gdge ._de );
}else {_ecc =append (_ecc ,fbRange {_bc :_gdge ._de ,_gg :_gdge ._fbg ,_cc :cmap ._bee [_gdge ._de ]});};};_a .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_bag ),len (_dgg ),len (_ecc ));
var _fbb []string ;if len (_dgg )> 0{_eag :=(len (_dgg )+_fdc -1)/_fdc ;for _dag :=0;_dag < _eag ;_dag ++{_acc :=_ggfac (len (_dgg )-_dag *_fdc ,_fdc );_fbb =append (_fbb ,_e .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_acc ));
for _ccda :=0;_ccda < _acc ;_ccda ++{_fcdc :=_dgg [_dag *_fdc +_ccda ];_fcg :=cmap ._bee [_fcdc ];_fbb =append (_fbb ,_e .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_fcdc ,_daa (_fcg )));};_fbb =append (_fbb ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_ecc )> 0{_dac :=(len (_ecc )+_fdc -1)/_fdc ;for _baa :=0;_baa < _dac ;_baa ++{_gbf :=_ggfac (len (_ecc )-_baa *_fdc ,_fdc );_fbb =append (_fbb ,_e .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_gbf ));
for _egd :=0;_egd < _gbf ;_egd ++{_dff :=_ecc [_baa *_fdc +_egd ];_fbb =append (_fbb ,_e .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_dff ._bc ,_dff ._gg ,_daa (_dff ._cc )));};_fbb =append (_fbb ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _ca .Join (_fbb ,"\u000a");};func (_bdg *cMapParser )parseArray ()(cmapArray ,error ){_cdd :=cmapArray {};_cdd .Array =[]cmapObject {};_bdg ._ggbc .ReadByte ();for {_bdg .skipSpaces ();_efcd ,_dbg :=_bdg ._ggbc .Peek (1);if _dbg !=nil {return _cdd ,_dbg ;
};if _efcd [0]==']'{_bdg ._ggbc .ReadByte ();break ;};_bfeg ,_dbg :=_bdg .parseObject ();if _dbg !=nil {return _cdd ,_dbg ;};_cdd .Array =append (_cdd .Array ,_bfeg );};return _cdd ,nil ;};func (_fef *cMapParser )parseString ()(cmapString ,error ){_fef ._ggbc .ReadByte ();
_dga :=_d .Buffer {};_dged :=1;for {_ggfg ,_bcfe :=_fef ._ggbc .Peek (1);if _bcfe !=nil {return cmapString {_dga .String ()},_bcfe ;};if _ggfg [0]=='\\'{_fef ._ggbc .ReadByte ();_dea ,_dedd :=_fef ._ggbc .ReadByte ();if _dedd !=nil {return cmapString {_dga .String ()},_dedd ;
};if _fb .IsOctalDigit (_dea ){_bcfb ,_ffed :=_fef ._ggbc .Peek (2);if _ffed !=nil {return cmapString {_dga .String ()},_ffed ;};var _bbg []byte ;_bbg =append (_bbg ,_dea );for _ ,_bde :=range _bcfb {if _fb .IsOctalDigit (_bde ){_bbg =append (_bbg ,_bde );
}else {break ;};};_fef ._ggbc .Discard (len (_bbg )-1);_a .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_bbg );_gbfg ,_ffed :=_fd .ParseUint (string (_bbg ),8,32);if _ffed !=nil {return cmapString {_dga .String ()},_ffed ;
};_dga .WriteByte (byte (_gbfg ));continue ;};switch _dea {case 'n':_dga .WriteByte ('\n');case 'r':_dga .WriteByte ('\r');case 't':_dga .WriteByte ('\t');case 'b':_dga .WriteByte ('\b');case 'f':_dga .WriteByte ('\f');case '(':_dga .WriteByte ('(');case ')':_dga .WriteByte (')');
case '\\':_dga .WriteByte ('\\');};continue ;}else if _ggfg [0]=='('{_dged ++;}else if _ggfg [0]==')'{_dged --;if _dged ==0{_fef ._ggbc .ReadByte ();break ;};};_bcfc ,_ :=_fef ._ggbc .ReadByte ();_dga .WriteByte (_bcfc );};return cmapString {_dga .String ()},nil ;
};func (_dfe *cMapParser )skipSpaces ()(int ,error ){_aeb :=0;for {_febe ,_bffa :=_dfe ._ggbc .Peek (1);if _bffa !=nil {return 0,_bffa ;};if _fb .IsWhiteSpace (_febe [0]){_dfe ._ggbc .ReadByte ();_aeb ++;}else {break ;};};return _aeb ,nil ;};func (_caa *cMapParser )parseComment ()(string ,error ){var _eead _d .Buffer ;
_ ,_dgf :=_caa .skipSpaces ();if _dgf !=nil {return _eead .String (),_dgf ;};_dge :=true ;for {_dgd ,_aec :=_caa ._ggbc .Peek (1);if _aec !=nil {_a .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_aec );
return _eead .String (),_aec ;};if _dge &&_dgd [0]!='%'{return _eead .String (),ErrBadCMapComment ;};_dge =false ;if (_dgd [0]!='\r')&&(_dgd [0]!='\n'){_gefcd ,_ :=_caa ._ggbc .ReadByte ();_eead .WriteByte (_gefcd );}else {break ;};};return _eead .String (),nil ;
};func IsPredefinedCMap (name string )bool {return _aa .AssetExists (name )};func _cee (_bce cmapHexString )CharCode {_ggfa :=CharCode (0);for _ ,_egca :=range _bce ._bgf {_ggfa <<=8;_ggfa |=CharCode (_egca );};return _ggfa ;};type fbRange struct{_bc CharCode ;
_gg CharCode ;_cc string ;};func (cmap *CMap )computeInverseMappings (){for _gbb ,_fc :=range cmap ._dd {if _fbcf ,_ga :=cmap ._gdg [_fc ];!_ga ||(_ga &&_fbcf > _gbb ){cmap ._gdg [_fc ]=_gbb ;};};for _cbe ,_ae :=range cmap ._bee {if _fbgb ,_dcf :=cmap ._dc [_ae ];
!_dcf ||(_dcf &&_fbgb > _cbe ){cmap ._dc [_ae ]=_cbe ;};};_be .Slice (cmap ._cd ,func (_ebe ,_bf int )bool {return cmap ._cd [_ebe ].Low < cmap ._cd [_bf ].Low });};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_afa ,_ccd :=cmap ._gdg [cid ];
return _afa ,_ccd ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_gge ,_bdd :=cmap ._dc [s ];return _gge ,_bdd ;};func (_bgg *cMapParser )parseName ()(cmapName ,error ){_ffd :="";_gaca :=false ;for {_dgfd ,_bdb :=_bgg ._ggbc .Peek (1);if _bdb ==_gc .EOF {break ;
};if _bdb !=nil {return cmapName {_ffd },_bdb ;};if !_gaca {if _dgfd [0]=='/'{_gaca =true ;_bgg ._ggbc .ReadByte ();}else {_a .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_dgfd ,_dgfd );
return cmapName {_ffd },_e .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_dgfd [0]);};}else {if _fb .IsWhiteSpace (_dgfd [0]){break ;}else if (_dgfd [0]=='/')||(_dgfd [0]=='[')||(_dgfd [0]=='(')||(_dgfd [0]==']')||(_dgfd [0]=='<')||(_dgfd [0]=='>'){break ;
}else if _dgfd [0]=='#'{_eeff ,_ggee :=_bgg ._ggbc .Peek (3);if _ggee !=nil {return cmapName {_ffd },_ggee ;};_bgg ._ggbc .Discard (3);_aabg ,_ggee :=_c .DecodeString (string (_eeff [1:3]));if _ggee !=nil {return cmapName {_ffd },_ggee ;};_ffd +=string (_aabg );
}else {_ecdgf ,_ :=_bgg ._ggbc .ReadByte ();_ffd +=string (_ecdgf );};};};return cmapName {_ffd },nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (cmap *CMap )NBits ()int {return cmap ._cgd };type cmapName struct{Name string ;
};func _fca ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func _ggfac (_aegc ,_cccg int )int {if _aegc < _cccg {return _aegc ;};return _cccg ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (cmap *CMap )Stream ()(*_fb .PdfObjectStream ,error ){if cmap ._fbc !=nil {return cmap ._fbc ,nil ;
};_degc ,_agbf :=_fb .MakeStream (cmap .Bytes (),_fb .NewFlateEncoder ());if _agbf !=nil {return nil ,_agbf ;};cmap ._fbc =_degc ;return cmap ._fbc ,nil ;};func (_dcgg *cMapParser )parseNumber ()(cmapObject ,error ){_fcga ,_ffdf :=_fb .ParseNumber (_dcgg ._ggbc );
if _ffdf !=nil {return nil ,_ffdf ;};switch _ebc :=_fcga .(type ){case *_fb .PdfObjectFloat :return cmapFloat {float64 (*_ebc )},nil ;case *_fb .PdfObjectInteger :return cmapInt {int64 (*_ebc )},nil ;};return nil ,_e .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_fcga );
};func (cmap *CMap )parseCIDRange ()error {for {_fgg ,_adbb :=cmap .parseObject ();if _adbb !=nil {if _adbb ==_gc .EOF {break ;};return _adbb ;};_ggbd ,_ecb :=_fgg .(cmapHexString );if !_ecb {if _ffe ,_geba :=_fgg .(cmapOperand );_geba {if _ffe .Operand ==_efc {return nil ;
};return _b .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_abgc :=_cee (_ggbd );
_fgg ,_adbb =cmap .parseObject ();if _adbb !=nil {if _adbb ==_gc .EOF {break ;};return _adbb ;};_fccc ,_ecb :=_fgg .(cmapHexString );if !_ecb {return _b .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_ggbd ._bgf )!=len (_fccc ._bgf ){return _b .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_fcf :=_cee (_fccc );
if _abgc > _fcf {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_abgc ,_fcf );
return ErrBadCMap ;};_fgg ,_adbb =cmap .parseObject ();if _adbb !=nil {if _adbb ==_gc .EOF {break ;};return _adbb ;};_bdaf ,_ecb :=_fgg .(cmapInt );if !_ecb {return _b .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _bdaf ._feaa < 0{return _b .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_ecgb :=_bdaf ._feaa ;for _cba :=_abgc ;_cba <=_fcf ;_cba ++{cmap ._dd [_cba ]=CharCode (_ecgb );
_ecgb ++;};_a .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_abgc ,_fcf ,_bdaf ._feaa );};return nil ;};type cmapString struct{String string ;};func NewCIDSystemInfo (obj _fb .PdfObject )(_cg CIDSystemInfo ,_cgg error ){_bb ,_af :=_fb .GetDict (obj );
if !_af {return CIDSystemInfo {},_fb .ErrTypeError ;};_da ,_af :=_fb .GetStringVal (_bb .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_af {return CIDSystemInfo {},_fb .ErrTypeError ;};_ed ,_af :=_fb .GetStringVal (_bb .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_af {return CIDSystemInfo {},_fb .ErrTypeError ;};_eb ,_af :=_fb .GetIntVal (_bb .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_af {return CIDSystemInfo {},_fb .ErrTypeError ;};return CIDSystemInfo {Registry :_da ,Ordering :_ed ,Supplement :_eb },nil ;
};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_dfd ,_ba :=cmap .BytesToCharcodes (data );if !_ba {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_ea :=make ([]string ,len (_dfd ));var _bba []CharCode ;for _gf ,_ffb :=range _dfd {_ggb ,_gce :=cmap ._bee [_ffb ];if !_gce {_bba =append (_bba ,_ffb );_ggb =MissingCodeString ;};_ea [_gf ]=_ggb ;};_gfg :=_ca .Join (_ea ,"");if len (_bba )> 0{_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_dfd ,len (_bba ),_bba ,_gfg ,cmap );
};return _gfg ,len (_bba );};func (cmap *CMap )parse ()error {var _adb cmapObject ;for {_adc ,_cec :=cmap .parseObject ();if _cec !=nil {if _cec ==_gc .EOF {break ;};_a .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_cec );
return _cec ;};switch _ade :=_adc .(type ){case cmapOperand :_acf :=_ade ;switch _acf .Operand {case _cdag :_ecd :=cmap .parseCodespaceRange ();if _ecd !=nil {return _ecd ;};case _bcc :_aac :=cmap .parseCIDRange ();if _aac !=nil {return _aac ;};case _feg :_baad :=cmap .parseBfchar ();
if _baad !=nil {return _baad ;};case _adca :_eed :=cmap .parseBfrange ();if _eed !=nil {return _eed ;};case _bab :if _adb ==nil {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_ecg ,_abg :=_adb .(cmapName );if !_abg {_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_adb );
return ErrBadCMap ;};cmap ._cbc =_ecg .Name ;case _eacd :_baaf :=cmap .parseSystemInfo ();if _baaf !=nil {return _baaf ;};};case cmapName :_cfa :=_ade ;switch _cfa .Name {case _eacd :_dec :=cmap .parseSystemInfo ();if _dec !=nil {return _dec ;};case _efg :_cfaf :=cmap .parseName ();
if _cfaf !=nil {return _cfaf ;};case _bcd :_gef :=cmap .parseType ();if _gef !=nil {return _gef ;};case _afg :_gede :=cmap .parseVersion ();if _gede !=nil {return _gede ;};case _eacb :if _cec =cmap .parseWMode ();_cec !=nil {return _cec ;};};};_adb =_adc ;
};return nil ;};func (cmap *CMap )parseBfchar ()error {for {_age ,_dagg :=cmap .parseObject ();if _dagg !=nil {if _dagg ==_gc .EOF {break ;};return _dagg ;};var _aaad CharCode ;switch _ddb :=_age .(type ){case cmapOperand :if _ddb .Operand ==_bebf {return nil ;
};return _b .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_aaad =_cee (_ddb );default:return _b .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};_age ,_dagg =cmap .parseObject ();if _dagg !=nil {if _dagg ==_gc .EOF {break ;};return _dagg ;};var _dega []rune ;switch _gbfca :=_age .(type ){case cmapOperand :if _gbfca .Operand ==_bebf {return nil ;};_a .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_gbfca );
return ErrBadCMap ;case cmapHexString :_dega =_ggea (_gbfca );case cmapName :_a .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_gbfca );_dega =[]rune {MissingCodeRune };
default:_a .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_age );return ErrBadCMap ;};cmap ._bee [_aaad ]=string (_dega );};return nil ;};type cmapHexString struct{_gfgc int ;
_bgf []byte ;};func (cmap *CMap )parseWMode ()error {var _eac int ;_cff :=false ;for _eeae :=0;_eeae < 3&&!_cff ;_eeae ++{_cbb ,_ffff :=cmap .parseObject ();if _ffff !=nil {return _ffff ;};switch _edc :=_cbb .(type ){case cmapOperand :switch _edc .Operand {case "\u0064\u0065\u0066":_cff =true ;
default:_a .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_cbb );return ErrBadCMap ;};case cmapInt :_eac =int (_edc ._feaa );
};};cmap ._def =integer {_bbba :true ,_cga :_eac };return nil ;};