//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package license

import (
	_fdd "bytes"
	_b "compress/gzip"
	_fa "crypto"
	_ad "crypto/aes"
	_af "crypto/cipher"
	_bb "crypto/hmac"
	_ff "crypto/rand"
	_eg "crypto/rsa"
	_cf "crypto/sha256"
	_ed "crypto/sha512"
	_dg "crypto/x509"
	_fc "encoding/base64"
	_de "encoding/hex"
	_ac "encoding/json"
	_gf "encoding/pem"
	_bg "errors"
	_dd "fmt"
	_dc "github.com/laduygaga/unipdf/v3/common"
	_g "io"
	_e "io/ioutil"
	_ba "net"
	_c "net/http"
	_fd "os"
	_a "path/filepath"
	_ga "sort"
	_gc "strings"
	_d "sync"
	_bc "time"
)

var _cbg map[string]struct{}

func _efe(_fggd, _gfg []byte) ([]byte, error) {
	_caf := make([]byte, _fc.URLEncoding.DecodedLen(len(_gfg)))
	_aac, _afge := _fc.URLEncoding.Decode(_caf, _gfg)
	if _afge != nil {
		return nil, _afge
	}
	_caf = _caf[:_aac]
	_fgee, _afge := _ad.NewCipher(_fggd)
	if _afge != nil {
		return nil, _afge
	}
	if len(_caf) < _ad.BlockSize {
		return nil, _bg.New("c\u0069p\u0068\u0065\u0072\u0074\u0065\u0078\u0074\u0020t\u006f\u006f\u0020\u0073ho\u0072\u0074")
	}
	_adbf := _caf[:_ad.BlockSize]
	_caf = _caf[_ad.BlockSize:]
	_fbga := _af.NewCFBDecrypter(_fgee, _adbf)
	_fbga.XORKeyStream(_caf, _caf)
	return _caf, nil
}
func Track(docKey string, useKey string) error { return _fgf(docKey, useKey, !_ecf._bfb) }

type meteredClient struct {
	_ffe string
	_ega string
	_ead *_c.Client
}

func _fff() string {
	_dfbd := _fd.Getenv("\u0048\u004f\u004d\u0045")
	if len(_dfbd) == 0 {
		_dfbd, _ = _fd.UserHomeDir()
	}
	return _dfbd
}

var _agd = _bc.Date(2010, 1, 1, 0, 0, 0, 0, _bc.UTC)

type stateLoader interface {
	loadState(_gdd string) (reportState, error)
	updateState(_eda, _gdf, _bfc string, _eab int, _deaf bool, _ce int, _fbg int, _cac _bc.Time, _fag map[string]int) error
}

func _bcf(_ace string) (LicenseKey, error) {
	var _ea LicenseKey
	_efb, _ebef := _cg(_fdg, _fe, _ace)
	if _ebef != nil {
		return _ea, _ebef
	}
	_cd, _ebef := _da(_afd, _efb)
	if _ebef != nil {
		return _ea, _ebef
	}
	_ebef = _ac.Unmarshal(_cd, &_ea)
	if _ebef != nil {
		return _ea, _ebef
	}
	_ea.CreatedAt = _bc.Unix(_ea.CreatedAtInt, 0)
	if _ea.ExpiresAtInt > 0 {
		_be := _bc.Unix(_ea.ExpiresAtInt, 0)
		_ea.ExpiresAt = &_be
	}
	return _ea, nil
}

type reportState struct {
	Instance      string         `json:"inst"`
	Next          string         `json:"n"`
	Docs          int64          `json:"d"`
	NumErrors     int64          `json:"e"`
	LimitDocs     bool           `json:"ld"`
	RemainingDocs int64          `json:"rd"`
	LastReported  _bc.Time       `json:"lr"`
	LastWritten   _bc.Time       `json:"lw"`
	Usage         map[string]int `json:"u"`
}

func (_bcc defaultStateHolder) loadState(_abb string) (reportState, error) {
	_gg := _fff()
	if len(_gg) == 0 {
		return reportState{}, _bg.New("\u0068\u006fm\u0065\u0020\u0064i\u0072\u0020\u006e\u006f\u0074\u0020\u0073\u0065\u0074")
	}
	_egg := _a.Join(_gg, "\u002eu\u006e\u0069\u0064\u006f\u0063")
	_fca := _fd.MkdirAll(_egg, 0777)
	if _fca != nil {
		return reportState{}, _fca
	}
	if len(_abb) < 20 {
		return reportState{}, _bg.New("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006b\u0065\u0079")
	}
	_fbc := []byte(_abb)
	_gfbg := _ed.Sum512_256(_fbc[:20])
	_cca := _de.EncodeToString(_gfbg[:])
	_fdb := _a.Join(_egg, _cca)
	_dad, _fca := _e.ReadFile(_fdb)
	if _fca != nil {
		if _fd.IsNotExist(_fca) {
			return reportState{}, nil
		}
		_dc.Log.Debug("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _fca)
		return reportState{}, _bg.New("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061")
	}
	const _cff = "\u0068\u00619\u004e\u004b\u0038]\u0052\u0062\u004c\u002a\u006d\u0034\u004c\u004b\u0057"
	_dad, _fca = _efe([]byte(_cff), _dad)
	if _fca != nil {
		return reportState{}, _fca
	}
	var _eff reportState
	_fca = _ac.Unmarshal(_dad, &_eff)
	if _fca != nil {
		_dc.Log.Debug("\u0045\u0052\u0052OR\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u003a\u0020\u0025\u0076", _fca)
		return reportState{}, _bg.New("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061")
	}
	return _eff, nil
}

var _gcg = _bc.Date(2019, 6, 6, 0, 0, 0, 0, _bc.UTC)

type meteredStatusForm struct{}

func (_fcf *LicenseKey) Validate() error {
	if _fcf._cde {
		return nil
	}
	if len(_fcf.LicenseId) < 10 {
		return _dd.Errorf("i\u006e\u0076\u0061\u006c\u0069\u0064 \u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020L\u0069\u0063\u0065n\u0073e\u0020\u0049\u0064")
	}
	if len(_fcf.CustomerId) < 10 {
		return _dd.Errorf("\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065:\u0020C\u0075\u0073\u0074\u006f\u006d\u0065\u0072 \u0049\u0064")
	}
	if len(_fcf.CustomerName) < 1 {
		return _dd.Errorf("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069c\u0065\u006e\u0073\u0065\u003a\u0020\u0043u\u0073\u0074\u006f\u006d\u0065\u0072\u0020\u004e\u0061\u006d\u0065")
	}
	if _agd.After(_fcf.CreatedAt) {
		return _dd.Errorf("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020\u0043\u0072\u0065\u0061\u0074\u0065\u0064 \u0041\u0074\u0020\u0069\u0073 \u0069\u006ev\u0061\u006c\u0069\u0064")
	}
	if _fcf.ExpiresAt == nil {
		_dbc := _fcf.CreatedAt.AddDate(1, 0, 0)
		if _bda.After(_dbc) {
			_dbc = _bda
		}
		_fcf.ExpiresAt = &_dbc
	}
	if _fcf.CreatedAt.After(*_fcf.ExpiresAt) {
		return _dd.Errorf("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020\u0043\u0072\u0065\u0061\u0074\u0065\u0064\u0020\u0041\u0074 \u0063a\u006e\u006e\u006f\u0074 \u0062\u0065 \u0047\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0045\u0078\u0070\u0069\u0072\u0065\u0073\u0020\u0041\u0074")
	}
	if _fcf.isExpired() {
		_cge := "\u0054\u0068\u0065\u0020\u006c\u0069c\u0065\u006e\u0073\u0065\u0020\u0068\u0061\u0073\u0020\u0061\u006c\u0072\u0065a\u0064\u0079\u0020\u0065\u0078\u0070\u0069r\u0065\u0064\u002e\u000a" + "\u0059o\u0075\u0020\u006d\u0061y\u0020n\u0065\u0065\u0064\u0020\u0074\u006f\u0020\u0075\u0070d\u0061\u0074\u0065\u0020\u0074\u0068\u0065\u0020l\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006b\u0065\u0079\u0020t\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0065\u0077\u0065s\u0074\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006b\u0065\u0079\u0020\u0066\u006f\u0072\u0020\u0079o\u0075\u0072\u0020\u006f\u0072\u0067\u0061\u006e\u0069\u007a\u0061\u0074i\u006fn\u002e\u000a" + "\u0054o\u0020\u0066\u0069\u006ed y\u006f\u0075\u0072\u0020n\u0065\u0077\u0065\u0073\u0074\u0020\u006c\u0069\u0063\u0065n\u0073\u0065\u0020\u006b\u0065\u0079\u002c\u0020\u0067\u006f\u0020\u0074\u006f\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002f\u0063l\u006f\u0075\u0064\u002e\u0075\u006e\u0069\u0064oc\u002e\u0069\u006f \u0061\u006e\u0064\u0020\u0067o\u0020t\u006f\u0020\u0074\u0068\u0065\u0020\u006c\u0069\u0063e\u006e\u0073\u0065\u0020\u006d\u0065\u006e\u0075\u002e"
		return _dd.Errorf("\u0069\u006e\u0076\u0061li\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020\u0025\u0073", _cge)
	}
	if len(_fcf.CreatorName) < 1 {
		return _dd.Errorf("\u0069\u006ev\u0061\u006c\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u003a\u0020\u0043\u0072\u0065\u0061\u0074\u006f\u0072\u0020na\u006d\u0065")
	}
	if len(_fcf.CreatorEmail) < 1 {
		return _dd.Errorf("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069c\u0065\u006e\u0073\u0065\u003a\u0020\u0043r\u0065\u0061\u0074\u006f\u0072\u0020\u0065\u006d\u0061\u0069\u006c")
	}
	if _fcf.CreatedAt.After(_gcg) {
		if !_fcf.UniPDF {
			return _dd.Errorf("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065:\u0020\u0054\u0068\u0069\u0073\u0020\u0055\u006e\u0069\u0044\u006f\u0063\u0020k\u0065\u0079\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069d \u0066\u006f\u0072\u0020\u0055\u006e\u0069\u0050\u0044\u0046")
		}
	}
	return nil
}
func SetMeteredKeyPersistentCache(val bool) { _ecf._bfb = val }
func _gcd() *meteredClient {
	_degg := meteredClient{_ffe: "h\u0074\u0074\u0070\u0073\u003a\u002f/\u0063\u006c\u006f\u0075\u0064\u002e\u0075\u006e\u0069d\u006f\u0063\u002ei\u006f/\u0061\u0070\u0069", _ead: &_c.Client{Timeout: 30 * _bc.Second}}
	if _ee := _fd.Getenv("\u0055N\u0049\u0044\u004f\u0043_\u004c\u0049\u0043\u0045\u004eS\u0045_\u0053E\u0052\u0056\u0045\u0052\u005f\u0055\u0052L"); _gc.HasPrefix(_ee, "\u0068\u0074\u0074\u0070") {
		_degg._ffe = _ee
	}
	return &_degg
}
func _dfeb(_dbb []byte) (_g.Reader, error) {
	_bcff := new(_fdd.Buffer)
	_abbg := _b.NewWriter(_bcff)
	_abbg.Write(_dbb)
	_beg := _abbg.Close()
	if _beg != nil {
		return nil, _beg
	}
	return _bcff, nil
}
func GetLicenseKey() *LicenseKey {
	if _ecf == nil {
		return nil
	}
	_fgac := *_ecf
	return &_fgac
}
func (_cee defaultStateHolder) updateState(_ece, _eed, _aef string, _ccb int, _gea bool, _def int, _fcg int, _cfe _bc.Time, _baf map[string]int) error {
	_gfa := _fff()
	if len(_gfa) == 0 {
		return _bg.New("\u0068\u006fm\u0065\u0020\u0064i\u0072\u0020\u006e\u006f\u0074\u0020\u0073\u0065\u0074")
	}
	_adce := _a.Join(_gfa, "\u002eu\u006e\u0069\u0064\u006f\u0063")
	_dfe := _fd.MkdirAll(_adce, 0777)
	if _dfe != nil {
		return _dfe
	}
	if len(_ece) < 20 {
		return _bg.New("i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006b\u0065\u0079")
	}
	_bag := []byte(_ece)
	_bdbe := _ed.Sum512_256(_bag[:20])
	_fge := _de.EncodeToString(_bdbe[:])
	_ddg := _a.Join(_adce, _fge)
	var _cae reportState
	_cae.Docs = int64(_ccb)
	_cae.NumErrors = int64(_fcg)
	_cae.LimitDocs = _gea
	_cae.RemainingDocs = int64(_def)
	_cae.LastWritten = _bc.Now().UTC()
	_cae.LastReported = _cfe
	_cae.Instance = _eed
	_cae.Next = _aef
	_cae.Usage = _baf
	_cgc, _dfe := _ac.Marshal(_cae)
	if _dfe != nil {
		return _dfe
	}
	const _acg = "\u0068\u00619\u004e\u004b\u0038]\u0052\u0062\u004c\u002a\u006d\u0034\u004c\u004b\u0057"
	_cgc, _dfe = _fgfc([]byte(_acg), _cgc)
	if _dfe != nil {
		return _dfe
	}
	_dfe = _e.WriteFile(_ddg, _cgc, 0600)
	if _dfe != nil {
		return _dfe
	}
	return nil
}
func (_fgd *LicenseKey) TypeToString() string {
	if _fgd._cde {
		return "M\u0065t\u0065\u0072\u0065\u0064\u0020\u0073\u0075\u0062s\u0063\u0072\u0069\u0070ti\u006f\u006e"
	}
	if _fgd.Tier == LicenseTierUnlicensed {
		return "\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064"
	}
	if _fgd.Tier == LicenseTierCommunity {
		return "\u0041\u0047PL\u0076\u0033\u0020O\u0070\u0065\u006e\u0020Sou\u0072ce\u0020\u0043\u006f\u006d\u006d\u0075\u006eit\u0079\u0020\u004c\u0069\u0063\u0065\u006es\u0065"
	}
	if _fgd.Tier == LicenseTierIndividual || _fgd.Tier == "\u0069\u006e\u0064i\u0065" {
		return "\u0043\u006f\u006dm\u0065\u0072\u0063\u0069a\u006c\u0020\u004c\u0069\u0063\u0065\u006es\u0065\u0020\u002d\u0020\u0049\u006e\u0064\u0069\u0076\u0069\u0064\u0075\u0061\u006c"
	}
	return "\u0043\u006fm\u006d\u0065\u0072\u0063\u0069\u0061\u006c\u0020\u004c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u002d\u0020\u0042\u0075\u0073\u0069ne\u0073\u0073"
}
func _gd(_dea string, _adc []byte) (string, error) {
	_gfb, _ := _gf.Decode([]byte(_dea))
	if _gfb == nil {
		return "", _dd.Errorf("\u0050\u0072\u0069\u0076\u004b\u0065\u0079\u0020\u0066a\u0069\u006c\u0065\u0064")
	}
	_acd, _bd := _dg.ParsePKCS1PrivateKey(_gfb.Bytes)
	if _bd != nil {
		return "", _bd
	}
	_gad := _ed.New()
	_gad.Write(_adc)
	_cc := _gad.Sum(nil)
	_ef, _bd := _eg.SignPKCS1v15(_ff.Reader, _acd, _fa.SHA512, _cc)
	if _bd != nil {
		return "", _bd
	}
	_eb := _fc.StdEncoding.EncodeToString(_adc)
	_eb += "\u000a\u002b\u000a"
	_eb += _fc.StdEncoding.EncodeToString(_ef)
	return _eb, nil
}
func (_bdf *LicenseKey) IsLicensed() bool { return _bdf.Tier != LicenseTierUnlicensed || _bdf._cde }

type meteredUsageCheckinForm struct {
	Instance          string         `json:"inst"`
	Next              string         `json:"next"`
	UsageNumber       int            `json:"usage_number"`
	NumFailed         int64          `json:"num_failed"`
	Hostname          string         `json:"hostname"`
	LocalIP           string         `json:"local_ip"`
	MacAddress        string         `json:"mac_address"`
	Package           string         `json:"package"`
	PackageVersion    string         `json:"package_version"`
	Usage             map[string]int `json:"u"`
	IsPersistentCache bool           `json:"is_persistent_cache"`
	Timestamp         int64          `json:"timestamp"`
}

func (_ae *meteredClient) getStatus() (meteredStatusResp, error) {
	var _ca meteredStatusResp
	_gfe := _ae._ffe + "\u002fm\u0065t\u0065\u0072\u0065\u0064\u002f\u0073\u0074\u0061\u0074\u0075\u0073"
	var _bfg meteredStatusForm
	_bce, _bbb := _ac.Marshal(_bfg)
	if _bbb != nil {
		return _ca, _bbb
	}
	_dgg, _bbb := _dfeb(_bce)
	if _bbb != nil {
		return _ca, _bbb
	}
	_gbc, _bbb := _c.NewRequest("\u0050\u004f\u0053\u0054", _gfe, _dgg)
	if _bbb != nil {
		return _ca, _bbb
	}
	_gbc.Header.Add("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065", "\u0061\u0070p\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002f\u006a\u0073\u006f\u006e")
	_gbc.Header.Add("\u0043\u006fn\u0074\u0065\u006et\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0067\u007a\u0069\u0070")
	_gbc.Header.Add("\u0041c\u0063e\u0070\u0074\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0067\u007a\u0069\u0070")
	_gbc.Header.Add("\u0058-\u0041\u0050\u0049\u002d\u004b\u0045Y", _ae._ega)
	_agb, _bbb := _ae._ead.Do(_gbc)
	if _bbb != nil {
		return _ca, _bbb
	}
	defer _agb.Body.Close()
	if _agb.StatusCode != 200 {
		return _ca, _dd.Errorf("\u0066\u0061i\u006c\u0065\u0064\u0020t\u006f\u0020c\u0068\u0065\u0063\u006b\u0069\u006e\u002c\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u0020\u0069s\u003a\u0020\u0025\u0064", _agb.StatusCode)
	}
	_bcd, _bbb := _ffea(_agb)
	if _bbb != nil {
		return _ca, _bbb
	}
	_bbb = _ac.Unmarshal(_bcd, &_ca)
	if _bbb != nil {
		return _ca, _bbb
	}
	return _ca, nil
}
func _cg(_bff string, _adg string, _bdb string) (string, error) {
	_bggc := _gc.Index(_bdb, _bff)
	if _bggc == -1 {
		return "", _dd.Errorf("\u0068\u0065a\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
	}
	_fg := _gc.Index(_bdb, _adg)
	if _fg == -1 {
		return "", _dd.Errorf("\u0066\u006fo\u0074\u0065\u0072 \u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064")
	}
	_ebe := _bggc + len(_bff) + 1
	return _bdb[_ebe : _fg-1], nil
}
func TrackUse(useKey string) {
	if _ecf == nil {
		return
	}
	if !_ecf._cde || len(_ecf._ddd) == 0 {
		return
	}
	if len(useKey) == 0 {
		return
	}
	_ddf.Lock()
	defer _ddf.Unlock()
	if _acgf == nil {
		_acgf = map[string]int{}
	}
	_acgf[useKey]++
}

const _gcc = "U\u004eI\u0050\u0044\u0046\u005f\u0043\u0055\u0053\u0054O\u004d\u0045\u0052\u005fNA\u004d\u0045"

func _eea() (_ba.IP, error) {
	_cad, _effc := _ba.Dial("\u0075\u0064\u0070", "\u0038\u002e\u0038\u002e\u0038\u002e\u0038\u003a\u0038\u0030")
	if _effc != nil {
		return nil, _effc
	}
	defer _cad.Close()
	_bfe := _cad.LocalAddr().(*_ba.UDPAddr)
	return _bfe.IP, nil
}
func _cgb(_ceed *_c.Response) (_g.ReadCloser, error) {
	var _eac error
	var _dff _g.ReadCloser
	switch _gc.ToLower(_ceed.Header.Get("\u0043\u006fn\u0074\u0065\u006et\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067")) {
	case "\u0067\u007a\u0069\u0070":
		_dff, _eac = _b.NewReader(_ceed.Body)
		if _eac != nil {
			return _dff, _eac
		}
		defer _dff.Close()
	default:
		_dff = _ceed.Body
	}
	return _dff, nil
}

type LicenseKey struct {
	LicenseId    string    `json:"license_id"`
	CustomerId   string    `json:"customer_id"`
	CustomerName string    `json:"customer_name"`
	Tier         string    `json:"tier"`
	CreatedAt    _bc.Time  `json:"-"`
	CreatedAtInt int64     `json:"created_at"`
	ExpiresAt    *_bc.Time `json:"-"`
	ExpiresAtInt int64     `json:"expires_at"`
	CreatedBy    string    `json:"created_by"`
	CreatorName  string    `json:"creator_name"`
	CreatorEmail string    `json:"creator_email"`
	UniPDF       bool      `json:"unipdf"`
	UniOffice    bool      `json:"unioffice"`
	UniHTML      bool      `json:"unihtml"`
	Trial        bool      `json:"trial"`
	_cde         bool
	_ddd         string
	_bfb         bool
}

func _da(_ag string, _dae string) ([]byte, error) {
	var (
		_bbg int
		_deg string
	)
	for _, _deg = range []string{"\u000a\u002b\u000a", "\u000d\u000a\u002b\r\u000a", "\u0020\u002b\u0020"} {
		if _bbg = _gc.Index(_dae, _deg); _bbg != -1 {
			break
		}
	}
	if _bbg == -1 {
		return nil, _dd.Errorf("\u0069\u006e\u0076al\u0069\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u002c \u0073i\u0067n\u0061t\u0075\u0072\u0065\u0020\u0073\u0065\u0070\u0061\u0072\u0061\u0074\u006f\u0072")
	}
	_ege := _dae[:_bbg]
	_gb := _bbg + len(_deg)
	_db := _dae[_gb:]
	if _ege == "" || _db == "" {
		return nil, _dd.Errorf("\u0069n\u0076\u0061l\u0069\u0064\u0020\u0069n\u0070\u0075\u0074,\u0020\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u0020or\u0069\u0067\u0069n\u0061\u006c \u006f\u0072\u0020\u0073\u0069\u0067n\u0061\u0074u\u0072\u0065")
	}
	_fcb, _adf := _fc.StdEncoding.DecodeString(_ege)
	if _adf != nil {
		return nil, _dd.Errorf("\u0069\u006e\u0076\u0061li\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u006f\u0072\u0069\u0067\u0069\u006ea\u006c")
	}
	_bac, _adf := _fc.StdEncoding.DecodeString(_db)
	if _adf != nil {
		return nil, _dd.Errorf("\u0069\u006e\u0076al\u0069\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065")
	}
	_bacb, _ := _gf.Decode([]byte(_ag))
	if _bacb == nil {
		return nil, _dd.Errorf("\u0050\u0075\u0062\u004b\u0065\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064")
	}
	_gcb, _adf := _dg.ParsePKIXPublicKey(_bacb.Bytes)
	if _adf != nil {
		return nil, _adf
	}
	_dcf := _gcb.(*_eg.PublicKey)
	if _dcf == nil {
		return nil, _dd.Errorf("\u0050u\u0062\u004b\u0065\u0079\u0020\u0063\u006f\u006e\u0076\u0065\u0072s\u0069\u006f\u006e\u0020\u0066\u0061\u0069\u006c\u0065\u0064")
	}
	_bfa := _ed.New()
	_bfa.Write(_fcb)
	_bgg := _bfa.Sum(nil)
	_adf = _eg.VerifyPKCS1v15(_dcf, _fa.SHA512, _bgg, _bac)
	if _adf != nil {
		return nil, _adf
	}
	return _fcb, nil
}
func _efaf() ([]string, []string, error) {
	_dcd, _ceb := _ba.Interfaces()
	if _ceb != nil {
		return nil, nil, _ceb
	}
	var _ebaf []string
	var _aad []string
	for _, _agc := range _dcd {
		if _agc.Flags&_ba.FlagUp == 0 || _fdd.Equal(_agc.HardwareAddr, nil) {
			continue
		}
		_bbgd, _baa := _agc.Addrs()
		if _baa != nil {
			return nil, nil, _baa
		}
		_agbf := 0
		for _, _edg := range _bbgd {
			var _cea _ba.IP
			switch _eedb := _edg.(type) {
			case *_ba.IPNet:
				_cea = _eedb.IP
			case *_ba.IPAddr:
				_cea = _eedb.IP
			}
			if _cea.IsLoopback() {
				continue
			}
			if _cea.To4() == nil {
				continue
			}
			_aad = append(_aad, _cea.String())
			_agbf++
		}
		_gae := _agc.HardwareAddr.String()
		if _gae != "" && _agbf > 0 {
			_ebaf = append(_ebaf, _gae)
		}
	}
	return _ebaf, _aad, nil
}
func (_ab *meteredClient) checkinUsage(_cb meteredUsageCheckinForm) (meteredUsageCheckinResp, error) {
	_cb.Package = "\u0075\u006e\u0069\u0070\u0064\u0066"
	_cb.PackageVersion = _dc.Version
	var _ffeg meteredUsageCheckinResp
	_adb := _ab._ffe + "\u002f\u006d\u0065\u0074er\u0065\u0064\u002f\u0075\u0073\u0061\u0067\u0065\u005f\u0063\u0068\u0065\u0063\u006bi\u006e"
	_efa, _deab := _ac.Marshal(_cb)
	if _deab != nil {
		return _ffeg, _deab
	}
	_ge, _deab := _dfeb(_efa)
	if _deab != nil {
		return _ffeg, _deab
	}
	_dfb, _deab := _c.NewRequest("\u0050\u004f\u0053\u0054", _adb, _ge)
	if _deab != nil {
		return _ffeg, _deab
	}
	_dfb.Header.Add("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065", "\u0061\u0070p\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002f\u006a\u0073\u006f\u006e")
	_dfb.Header.Add("\u0043\u006fn\u0074\u0065\u006et\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0067\u007a\u0069\u0070")
	_dfb.Header.Add("\u0041c\u0063e\u0070\u0074\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067", "\u0067\u007a\u0069\u0070")
	_dfb.Header.Add("\u0058-\u0041\u0050\u0049\u002d\u004b\u0045Y", _ab._ega)
	_cdg, _deab := _ab._ead.Do(_dfb)
	if _deab != nil {
		return _ffeg, _deab
	}
	defer _cdg.Body.Close()
	if _cdg.StatusCode != 200 {
		_ffg, _ec := _ffea(_cdg)
		if _ec != nil {
			return _ffeg, _ec
		}
		_ec = _ac.Unmarshal(_ffg, &_ffeg)
		if _ec != nil {
			return _ffeg, _ec
		}
		return _ffeg, _dd.Errorf("\u0066\u0061i\u006c\u0065\u0064\u0020t\u006f\u0020c\u0068\u0065\u0063\u006b\u0069\u006e\u002c\u0020s\u0074\u0061\u0074\u0075\u0073\u0020\u0063\u006f\u0064\u0065\u0020\u0069s\u003a\u0020\u0025\u0064", _cdg.StatusCode)
	}
	_fb := _cdg.Header.Get("\u0058\u002d\u0055\u0043\u002d\u0053\u0069\u0067\u006ea\u0074\u0075\u0072\u0065")
	_ecg := _gebd(_cb.MacAddress, string(_efa))
	if _ecg != _fb {
		_dc.Log.Error("I\u006e\u0076\u0061l\u0069\u0064\u0020\u0072\u0065\u0073\u0070\u006f\u006e\u0073\u0065\u0020\u0073\u0069\u0067\u006e\u0061\u0074\u0075\u0072\u0065\u002c\u0020\u0073\u0065t\u0020\u0074\u0068e\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u0073\u0065\u0072\u0076e\u0072\u0020\u0074\u006f \u0068\u0074\u0074\u0070s\u003a\u002f\u002f\u0063\u006c\u006f\u0075\u0064\u002e\u0075\u006e\u0069\u0064\u006f\u0063\u002e\u0069o\u002f\u0061\u0070\u0069")
		return _ffeg, _bg.New("\u0066\u0061\u0069l\u0065\u0064\u0020\u0074\u006f\u0020\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u002c\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0065\u0072\u0076\u0065\u0072 \u0072\u0065\u0073\u0070\u006f\u006e\u0073\u0065")
	}
	_ade, _deab := _ffea(_cdg)
	if _deab != nil {
		return _ffeg, _deab
	}
	_deab = _ac.Unmarshal(_ade, &_ffeg)
	if _deab != nil {
		return _ffeg, _deab
	}
	return _ffeg, nil
}

var _acgf map[string]int
var _bda = _bc.Date(2020, 1, 1, 0, 0, 0, 0, _bc.UTC)

func (_eba *LicenseKey) isExpired() bool { return _eba.getExpiryDateToCompare().After(*_eba.ExpiresAt) }

const (
	LicenseTierUnlicensed = "\u0075\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064"
	LicenseTierCommunity  = "\u0063o\u006d\u006d\u0075\u006e\u0069\u0074y"
	LicenseTierIndividual = "\u0069\u006e\u0064\u0069\u0076\u0069\u0064\u0075\u0061\u006c"
	LicenseTierBusiness   = "\u0062\u0075\u0073\u0069\u006e\u0065\u0073\u0073"
)

var _ecf = MakeUnlicensedKey()

func _fgfc(_cgg, _fbgf []byte) ([]byte, error) {
	_aaa, _gba := _ad.NewCipher(_cgg)
	if _gba != nil {
		return nil, _gba
	}
	_baaf := make([]byte, _ad.BlockSize+len(_fbgf))
	_gde := _baaf[:_ad.BlockSize]
	if _, _bcde := _g.ReadFull(_ff.Reader, _gde); _bcde != nil {
		return nil, _bcde
	}
	_edfa := _af.NewCFBEncrypter(_aaa, _gde)
	_edfa.XORKeyStream(_baaf[_ad.BlockSize:], _fbgf)
	_afg := make([]byte, _fc.URLEncoding.EncodedLen(len(_baaf)))
	_fc.URLEncoding.Encode(_afg, _baaf)
	return _afg, nil
}
func MakeUnlicensedKey() *LicenseKey {
	_df := LicenseKey{}
	_df.CustomerName = "\u0055\u006e\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0064"
	_df.Tier = LicenseTierUnlicensed
	_df.CreatedAt = _bc.Now().UTC()
	_df.CreatedAtInt = _df.CreatedAt.Unix()
	return &_df
}

type meteredStatusResp struct {
	Valid        bool  `json:"valid"`
	OrgCredits   int64 `json:"org_credits"`
	OrgUsed      int64 `json:"org_used"`
	OrgRemaining int64 `json:"org_remaining"`
}

func (_egf *LicenseKey) getExpiryDateToCompare() _bc.Time {
	if _egf.Trial {
		return _bc.Now().UTC()
	}
	return _dc.ReleasedAt
}

var _cgd stateLoader = defaultStateHolder{}

type meteredUsageCheckinResp struct {
	Instance      string `json:"inst"`
	Next          string `json:"next"`
	Success       bool   `json:"success"`
	Message       string `json:"message"`
	RemainingDocs int    `json:"rd"`
	LimitDocs     bool   `json:"ld"`
}

const _cgf = "\u0055\u004e\u0049\u0050DF\u005f\u004c\u0049\u0043\u0045\u004e\u0053\u0045\u005f\u0050\u0041\u0054\u0048"

func _ffea(_cacg *_c.Response) ([]byte, error) {
	var _adgc []byte
	_egbb, _cba := _cgb(_cacg)
	if _cba != nil {
		return _adgc, _cba
	}
	return _e.ReadAll(_egbb)
}
func SetMeteredKey(apiKey string) error {
	if len(apiKey) == 0 {
		_dc.Log.Error("\u004d\u0065\u0074\u0065\u0072e\u0064\u0020\u004c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u0041\u0050\u0049 \u004b\u0065\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0065\u006d\u0070\u0074\u0079")
		_dc.Log.Error("\u002d\u0020\u0047\u0072\u0061\u0062\u0020\u006f\u006e\u0065\u0020\u0069\u006e\u0020\u0074h\u0065\u0020\u0046\u0072\u0065\u0065\u0020\u0054\u0069\u0065\u0072\u0020\u0061t\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002f\u0063\u006c\u006fud\u002e\u0075\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f")
		return _dd.Errorf("\u006de\u0074\u0065\u0072e\u0064\u0020\u006ci\u0063en\u0073\u0065\u0020\u0061\u0070\u0069\u0020k\u0065\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0065\u006d\u0070\u0074\u0079\u003a\u0020\u0063\u0072\u0065\u0061\u0074\u0065 o\u006ee\u0020\u0061\u0074\u0020\u0068\u0074t\u0070\u0073\u003a\u002f\u002fc\u006c\u006f\u0075\u0064\u002e\u0075\u006e\u0069\u0064\u006f\u0063.\u0069\u006f")
	}
	// if _ecf != nil && (_ecf._cde || _ecf.Tier != LicenseTierUnlicensed) {
	// 	_dc.Log.Error("\u0045\u0052\u0052\u004f\u0052:\u0020\u0043\u0061\u006e\u006eo\u0074 \u0073\u0065\u0074\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006b\u0065\u0079\u0020\u0074\u0077\u0069c\u0065\u0020\u002d\u0020\u0053\u0068\u006f\u0075\u006c\u0064\u0020\u006a\u0075\u0073\u0074\u0020\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069z\u0065\u0020\u006f\u006e\u0063\u0065")
	// 	return _bg.New("\u006c\u0069\u0063en\u0073\u0065\u0020\u006b\u0065\u0079\u0020\u0061\u006c\u0072\u0065\u0061\u0064\u0079\u0020\u0073\u0065\u0074")
	// }
	_dcg := _gcd()
	_dcg._ega = apiKey
	_dfg, _fga := _dcg.getStatus()
	if _fga != nil {
		return _fga
	}
	if !_dfg.Valid {
		return _bg.New("\u006b\u0065\u0079\u0020\u006e\u006f\u0074\u0020\u0076\u0061\u006c\u0069\u0064")
	}
	_cga := &LicenseKey{_cde: true, _ddd: apiKey, _bfb: true}
	_ecf = _cga
	return nil
}

type MeteredStatus struct {
	OK      bool
	Credits int64
	Used    int64
}

func _gebd(_cdga, _efc string) string {
	_dgb := []byte(_cdga)
	_gade := _bb.New(_cf.New, _dgb)
	_gade.Write([]byte(_efc))
	return _fc.StdEncoding.EncodeToString(_gade.Sum(nil))
}
func init() {
	_dca := _fd.Getenv(_cgf)
	_cbd := _fd.Getenv(_gcc)
	if len(_dca) == 0 || len(_cbd) == 0 {
		return
	}
	_egbc, _dggf := _e.ReadFile(_dca)
	if _dggf != nil {
		_dc.Log.Error("\u0055\u006eab\u006c\u0065\u0020t\u006f\u0020\u0072\u0065ad \u006cic\u0065\u006e\u0073\u0065\u0020\u0063\u006fde\u0020\u0066\u0069\u006c\u0065\u003a\u0020%\u0076", _dggf)
		return
	}
	_dggf = SetLicenseKey(string(_egbc), _cbd)
	if _dggf != nil {
		_dc.Log.Error("\u0055\u006e\u0061b\u006c\u0065\u0020\u0074o\u0020\u006c\u006f\u0061\u0064\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0063\u006f\u0064\u0065\u003a\u0020\u0025\u0076", _dggf)
		return
	}
}

const (
	_fdg = "\u002d\u002d\u002d--\u0042\u0045\u0047\u0049\u004e\u0020\u0055\u004e\u0049D\u004fC\u0020L\u0049C\u0045\u004e\u0053\u0045\u0020\u004b\u0045\u0059\u002d\u002d\u002d\u002d\u002d"
	_fe  = "\u002d\u002d\u002d\u002d\u002d\u0045\u004e\u0044\u0020\u0055\u004e\u0049\u0044\u004f\u0043 \u004cI\u0043\u0045\u004e\u0053\u0045\u0020\u004b\u0045\u0059\u002d\u002d\u002d\u002d\u002d"
)

func SetLicenseKey(content string, customerName string) error {
	_acdc, _eef := _bcf(content)
	if _eef != nil {
		_dc.Log.Error("\u004c\u0069c\u0065\u006e\u0073\u0065\u0020\u0063\u006f\u0064\u0065\u0020\u0064\u0065\u0063\u006f\u0064\u0065\u0020\u0065\u0072\u0072\u006f\u0072: \u0025\u0076", _eef)
		return _eef
	}
	if !_gc.EqualFold(_acdc.CustomerName, customerName) {
		_dc.Log.Error("L\u0069ce\u006es\u0065 \u0063\u006f\u0064\u0065\u0020i\u0073\u0073\u0075e\u0020\u002d\u0020\u0043\u0075s\u0074\u006f\u006de\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u006d\u0069\u0073\u006da\u0074\u0063\u0068, e\u0078\u0070\u0065\u0063\u0074\u0065d\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u0062\u0075\u0074\u0020\u0067o\u0074 \u0027\u0025\u0073\u0027", _acdc.CustomerName, customerName)
		return _dd.Errorf("\u0063\u0075\u0073\u0074\u006fm\u0065\u0072\u0020\u006e\u0061\u006d\u0065\u0020\u006d\u0069\u0073\u006d\u0061t\u0063\u0068\u002c\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u0062\u0075\u0074\u0020\u0067\u006f\u0074\u0020\u0027\u0025\u0073'", _acdc.CustomerName, customerName)
	}
	_eef = _acdc.Validate()
	if _eef != nil {
		_dc.Log.Error("\u004c\u0069\u0063\u0065\u006e\u0073e\u0020\u0063\u006f\u0064\u0065\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074i\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u003a\u0020\u0025\u0076", _eef)
		return _eef
	}
	_ecf = &_acdc
	return nil
}

var _ddf = &_d.Mutex{}

func (_aa *LicenseKey) ToString() string {
	if _aa._cde {
		return "M\u0065t\u0065\u0072\u0065\u0064\u0020\u0073\u0075\u0062s\u0063\u0072\u0069\u0070ti\u006f\u006e"
	}
	_fdf := _dd.Sprintf("\u004ci\u0063e\u006e\u0073\u0065\u0020\u0049\u0064\u003a\u0020\u0025\u0073\u000a", _aa.LicenseId)
	_fdf += _dd.Sprintf("\u0043\u0075s\u0074\u006f\u006de\u0072\u0020\u0049\u0064\u003a\u0020\u0025\u0073\u000a", _aa.CustomerId)
	_fdf += _dd.Sprintf("\u0043u\u0073t\u006f\u006d\u0065\u0072\u0020N\u0061\u006de\u003a\u0020\u0025\u0073\u000a", _aa.CustomerName)
	_fdf += _dd.Sprintf("\u0054i\u0065\u0072\u003a\u0020\u0025\u0073\n", _aa.Tier)
	_fdf += _dd.Sprintf("\u0043r\u0065a\u0074\u0065\u0064\u0020\u0041\u0074\u003a\u0020\u0025\u0073\u000a", _dc.UtcTimeFormat(_aa.CreatedAt))
	if _aa.ExpiresAt == nil {
		_fdf += "\u0045x\u0070i\u0072\u0065\u0073\u0020\u0041t\u003a\u0020N\u0065\u0076\u0065\u0072\u000a"
	} else {
		_fdf += _dd.Sprintf("\u0045x\u0070i\u0072\u0065\u0073\u0020\u0041\u0074\u003a\u0020\u0025\u0073\u000a", _dc.UtcTimeFormat(*_aa.ExpiresAt))
	}
	_fdf += _dd.Sprintf("\u0043\u0072\u0065\u0061\u0074\u006f\u0072\u003a\u0020\u0025\u0073\u0020<\u0025\u0073\u003e\u000a", _aa.CreatorName, _aa.CreatorEmail)
	return _fdf
}
func _fgf(_fgg string, _gee string, _bdg bool) error {
	if _ecf == nil {
		return _bg.New("\u006e\u006f\u0020\u006c\u0069\u0063\u0065\u006e\u0073e\u0020\u006b\u0065\u0079")
	}
	if !_ecf._cde || len(_ecf._ddd) == 0 {
		return nil
	}
	if len(_fgg) == 0 && !_bdg {
		return _bg.New("\u0064\u006f\u0063\u004b\u0065\u0079\u0020\u006e\u006ft\u0020\u0073\u0065\u0074")
	}
	_ddf.Lock()
	defer _ddf.Unlock()
	if _cbg == nil {
		_cbg = map[string]struct{}{}
	}
	if _acgf == nil {
		_acgf = map[string]int{}
	}
	_fcgd := 0
	_, _gbf := _cbg[_fgg]
	if !_gbf {
		_cbg[_fgg] = struct{}{}
		_fcgd++
	}
	if _fcgd == 0 {
		return nil
	}
	_acgf[_gee]++
	_dcfc := _bc.Now()
	_ggb, _geeb := _cgd.loadState(_ecf._ddd)
	if _geeb != nil {
		_dc.Log.Debug("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _geeb)
		return _geeb
	}
	if _ggb.Usage == nil {
		_ggb.Usage = map[string]int{}
	}
	for _bde, _cdb := range _acgf {
		_ggb.Usage[_bde] += _cdb
	}
	_acgf = nil
	const _eadf = 24 * _bc.Hour
	const _acf = 3 * 24 * _bc.Hour
	if len(_ggb.Instance) == 0 || _dcfc.Sub(_ggb.LastReported) > _eadf || (_ggb.LimitDocs && _ggb.RemainingDocs <= _ggb.Docs+int64(_fcgd)) || _bdg {
		_ddb, _gebf := _fd.Hostname()
		if _gebf != nil {
			return _gebf
		}
		_bfbd := _ggb.Docs
		_egd, _dgc, _gebf := _efaf()
		if _gebf != nil {
			_dc.Log.Debug("\u0055\u006e\u0061b\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u006c\u006fc\u0061\u006c\u0020\u0061\u0064\u0064\u0072\u0065\u0073\u0073\u003a\u0020\u0025\u0073", _gebf.Error())
			_egd = append(_egd, "\u0069n\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0020n\u006ft\u0020a\u0076\u0061\u0069\u006c\u0061\u0062\u006ce")
			_dgc = append(_dgc, "\u0069n\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0020n\u006ft\u0020a\u0076\u0061\u0069\u006c\u0061\u0062\u006ce")
		} else {
			_ga.Strings(_dgc)
			_ga.Strings(_egd)
			_bdd, _ccf := _eea()
			if _ccf != nil {
				return _ccf
			}
			_dab := false
			for _, _bed := range _dgc {
				if _bed == _bdd.String() {
					_dab = true
				}
			}
			if !_dab {
				_dgc = append(_dgc, _bdd.String())
			}
		}
		_ebf := _gcd()
		_ebf._ega = _ecf._ddd
		_bfbd += int64(_fcgd)
		_ecdb := meteredUsageCheckinForm{Instance: _ggb.Instance, Next: _ggb.Next, UsageNumber: int(_bfbd), NumFailed: _ggb.NumErrors, Hostname: _ddb, LocalIP: _gc.Join(_dgc, "\u002c\u0020"), MacAddress: _gc.Join(_egd, "\u002c\u0020"), Package: "\u0075\u006e\u0069\u0070\u0064\u0066", PackageVersion: _dc.Version, Usage: _ggb.Usage, IsPersistentCache: _ecf._bfb, Timestamp: _dcfc.Unix()}
		if len(_egd) == 0 {
			_ecdb.MacAddress = "\u006e\u006f\u006e\u0065"
		}
		_edf := int64(0)
		_ded := _ggb.NumErrors
		_faa := _dcfc
		_egb := 0
		_fgag := _ggb.LimitDocs
		_gge, _gebf := _ebf.checkinUsage(_ecdb)
		if _gebf != nil {
			if _dcfc.Sub(_ggb.LastReported) > _acf {
				if !_gge.Success {
					return _bg.New(_gge.Message)
				}
				return _bg.New("\u0074\u006f\u006f\u0020\u006c\u006f\u006e\u0067\u0020\u0073\u0069\u006e\u0063\u0065\u0020\u006c\u0061\u0073\u0074\u0020\u0073\u0075\u0063\u0063e\u0073\u0073\u0066\u0075\u006c \u0063\u0068e\u0063\u006b\u0069\u006e")
			}
			_edf = _bfbd
			_ded++
			_faa = _ggb.LastReported
		} else {
			_fgag = _gge.LimitDocs
			_egb = _gge.RemainingDocs
			_ded = 0
		}
		if len(_gge.Instance) == 0 {
			_gge.Instance = _ecdb.Instance
		}
		if len(_gge.Next) == 0 {
			_gge.Next = _ecdb.Next
		}
		_gebf = _cgd.updateState(_ebf._ega, _gge.Instance, _gge.Next, int(_edf), _fgag, _egb, int(_ded), _faa, nil)
		if _gebf != nil {
			return _gebf
		}
		if !_gge.Success {
			return _dd.Errorf("\u0065r\u0072\u006f\u0072\u003a\u0020\u0025s", _gge.Message)
		}
	} else {
		_geeb = _cgd.updateState(_ecf._ddd, _ggb.Instance, _ggb.Next, int(_ggb.Docs)+_fcgd, _ggb.LimitDocs, int(_ggb.RemainingDocs), int(_ggb.NumErrors), _ggb.LastReported, _ggb.Usage)
		if _geeb != nil {
			return _geeb
		}
	}
	return nil
}

type defaultStateHolder struct{}

func GetMeteredState() (MeteredStatus, error) {
	if _ecf == nil {
		return MeteredStatus{}, _bg.New("\u006c\u0069\u0063\u0065ns\u0065\u0020\u006b\u0065\u0079\u0020\u006e\u006f\u0074\u0020\u0073\u0065\u0074")
	}
	if !_ecf._cde || len(_ecf._ddd) == 0 {
		return MeteredStatus{}, _bg.New("\u0061p\u0069 \u006b\u0065\u0079\u0020\u006e\u006f\u0074\u0020\u0073\u0065\u0074")
	}
	_fdc, _bee := _cgd.loadState(_ecf._ddd)
	if _bee != nil {
		_dc.Log.Debug("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v", _bee)
		return MeteredStatus{}, _bee
	}
	if _fdc.Docs > 0 {
		_ebg := _fgf("", "", true)
		if _ebg != nil {
			return MeteredStatus{}, _ebg
		}
	}
	_ddf.Lock()
	defer _ddf.Unlock()
	_geb := _gcd()
	_geb._ega = _ecf._ddd
	_ecd, _bee := _geb.getStatus()
	if _bee != nil {
		return MeteredStatus{}, _bee
	}
	if !_ecd.Valid {
		return MeteredStatus{}, _bg.New("\u006b\u0065\u0079\u0020\u006e\u006f\u0074\u0020\u0076\u0061\u006c\u0069\u0064")
	}
	_bbe := MeteredStatus{OK: true, Credits: _ecd.OrgCredits, Used: _ecd.OrgUsed}
	return _bbe, nil
}

const _afd = "\u000a\u002d\u002d\u002d\u002d\u002d\u0042\u0045\u0047\u0049\u004e \u0050\u0055\u0042\u004c\u0049\u0043\u0020\u004b\u0045Y\u002d\u002d\u002d\u002d\u002d\u000a\u004d\u0049I\u0042\u0049\u006a\u0041NB\u0067\u006b\u0071\u0068\u006b\u0069G\u0039\u0077\u0030\u0042\u0041\u0051\u0045\u0046A\u0041\u004f\u0043\u0041\u0051\u0038\u0041\u004d\u0049\u0049\u0042\u0043\u0067\u004b\u0043\u0041\u0051\u0045A\u006dF\u0055\u0069\u0079\u0064\u0037\u0062\u0035\u0058\u006a\u0070\u006b\u0050\u0035\u0052\u0061\u0070\u0034\u0077\u000a\u0044\u0063\u0031d\u0079\u007a\u0049\u0051\u0034\u004c\u0065\u006b\u0078\u0072\u0076\u0079\u0074\u006e\u0045\u004d\u0070\u004e\u0055\u0062\u006f\u0036i\u0041\u0037\u0034\u0056\u0038\u0072\u0075\u005a\u004f\u0076\u0072\u0053\u0063\u0073\u0066\u0032\u0051\u0065\u004e9\u002f\u0071r\u0055\u0047\u0038\u0071\u0045\u0062\u0055\u0057\u0064\u006f\u0045\u0059\u0071+\u000a\u006f\u0074\u0046\u004e\u0041\u0046N\u0078\u006c\u0047\u0062\u0078\u0062\u0044\u0048\u0063\u0064\u0047\u0056\u0061\u004d\u0030\u004f\u0058\u0064\u0058g\u0044y\u004c5\u0061\u0049\u0045\u0061\u0067\u004c\u0030\u0063\u0035\u0070\u0077\u006a\u0049\u0064\u0050G\u0049\u006e\u0034\u0036\u0066\u0037\u0038\u0065\u004d\u004a\u002b\u004a\u006b\u0064\u0063\u0070\u0044\n\u0044\u004a\u0061\u0071\u0059\u0058d\u0072\u007a5\u004b\u0065\u0073\u0068\u006aS\u0069\u0049\u0061\u0061\u0037\u006d\u0065\u006e\u0042\u0049\u0041\u0058\u0053\u0034\u0055\u0046\u0078N\u0066H\u0068\u004e\u0030\u0048\u0043\u0059\u005a\u0059\u0071\u0051\u0047\u0037\u0062K+\u0073\u0035\u0072R\u0048\u006f\u006e\u0079\u0064\u004eW\u0045\u0047\u000a\u0048\u0038M\u0079\u0076\u00722\u0070\u0079\u0061\u0032K\u0072\u004d\u0075m\u0066\u006d\u0041\u0078\u0055\u0042\u0036\u0066\u0065\u006e\u0043\u002f4\u004f\u0030\u0057\u00728\u0067\u0066\u0050\u004f\u0055\u0038R\u0069\u0074\u006d\u0062\u0044\u0076\u0051\u0050\u0049\u0052\u0058\u004fL\u0034\u0076\u0054B\u0072\u0042\u0064\u0062a\u0041\u000a9\u006e\u0077\u004e\u0050\u002b\u0069\u002f\u002f\u0032\u0030\u004d\u00542\u0062\u0078\u006d\u0065\u0057\u0042\u002b\u0067\u0070\u0063\u0045\u0068G\u0070\u0058\u005a7\u0033\u0033\u0061\u007a\u0051\u0078\u0072\u0043\u0033\u004a\u0034\u0076\u0033C\u005a\u006d\u0045\u004eS\u0074\u0044\u004b\u002f\u004b\u0044\u0053\u0050\u004b\u0055\u0047\u0066\u00756\u000a\u0066\u0077I\u0044\u0041\u0051\u0041\u0042\u000a\u002d\u002d\u002d\u002d\u002dE\u004e\u0044\u0020\u0050\u0055\u0042\u004c\u0049\u0043 \u004b\u0045Y\u002d\u002d\u002d\u002d\u002d\n"
