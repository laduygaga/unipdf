//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package security ;import (_ce "bytes";_a "crypto/aes";_cb "crypto/cipher";_fg "crypto/md5";_fbc "crypto/rand";_g "crypto/rc4";_bg "crypto/sha256";_d "crypto/sha512";_fb "encoding/binary";_f "errors";_ac "fmt";_fa "github.com/laduygaga/unipdf/v3/common";_bc "hash";
_b "io";_bga "math";);func (_cea stdHandlerR4 )alg6 (_dcc *StdEncryptDict ,_dcdc []byte )([]byte ,error ){var (_eb []byte ;_caa error ;);_ggdc :=_cea .alg2 (_dcc ,_dcdc );if _dcc .R ==2{_eb ,_caa =_cea .alg4 (_ggdc ,_dcdc );}else if _dcc .R >=3{_eb ,_caa =_cea .alg5 (_ggdc ,_dcdc );
}else {return nil ,_f .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};if _caa !=nil {return nil ,_caa ;};_fa .Log .Trace ("\u0063\u0068\u0065\u0063k:\u0020\u0025\u0020\u0078\u0020\u003d\u003d\u0020\u0025\u0020\u0078\u0020\u003f",string (_eb ),string (_dcc .U ));
_eba :=_eb ;_ee :=_dcc .U ;if _dcc .R >=3{if len (_eba )> 16{_eba =_eba [0:16];};if len (_ee )> 16{_ee =_ee [0:16];};};if !_ce .Equal (_eba ,_ee ){return nil ,nil ;};return _ggdc ,nil ;};func (_eaeg stdHandlerR4 )alg3Key (R int ,_gbc []byte )[]byte {_cgc :=_fg .New ();
_gf :=_eaeg .paddedPass (_gbc );_cgc .Write (_gf );if R >=3{for _gg :=0;_gg < 50;_gg ++{_fba :=_cgc .Sum (nil );_cgc =_fg .New ();_cgc .Write (_fba );};};_gd :=_cgc .Sum (nil );if R ==2{_gd =_gd [0:5];}else {_gd =_gd [0:_eaeg .Length /8];};return _gd ;
};func (_bcb stdHandlerR6 )alg11 (_bcg *StdEncryptDict ,_ccfb []byte )([]byte ,error ){if _faf :=_dc ("\u0061\u006c\u00671\u0031","\u0055",48,_bcg .U );_faf !=nil {return nil ,_faf ;};_gfd :=make ([]byte ,len (_ccfb )+8);_egaf :=copy (_gfd ,_ccfb );_egaf +=copy (_gfd [_egaf :],_bcg .U [32:40]);
_cddc ,_eff :=_bcb .alg2b (_bcg .R ,_gfd ,_ccfb ,nil );if _eff !=nil {return nil ,_eff ;};_cddc =_cddc [:32];if !_ce .Equal (_cddc ,_bcg .U [:32]){return nil ,nil ;};return _cddc ,nil ;};type errInvalidField struct{Func string ;Field string ;Exp int ;Got int ;
};

// Permissions is a bitmask of access permissions for a PDF file.
type Permissions uint32 ;func _ebe (_gae []byte ,_fd int ){_ddd :=_fd ;for _ddd < len (_gae ){copy (_gae [_ddd :],_gae [:_ddd ]);_ddd *=2;};};func (_dfa stdHandlerR6 )alg8 (_gef *StdEncryptDict ,_ddf []byte ,_gea []byte )error {if _gac :=_dc ("\u0061\u006c\u0067\u0038","\u004b\u0065\u0079",32,_ddf );
_gac !=nil {return _gac ;};var _dac [16]byte ;if _ ,_aaf :=_b .ReadFull (_fbc .Reader ,_dac [:]);_aaf !=nil {return _aaf ;};_fda :=_dac [0:8];_gfe :=_dac [8:16];_dfge :=make ([]byte ,len (_gea )+len (_fda ));_dcf :=copy (_dfge ,_gea );copy (_dfge [_dcf :],_fda );
_bdd ,_cggc :=_dfa .alg2b (_gef .R ,_dfge ,_gea ,nil );if _cggc !=nil {return _cggc ;};U :=make ([]byte ,len (_bdd )+len (_fda )+len (_gfe ));_dcf =copy (U ,_bdd [:32]);_dcf +=copy (U [_dcf :],_fda );copy (U [_dcf :],_gfe );_gef .U =U ;_dcf =len (_gea );
copy (_dfge [_dcf :],_gfe );_bdd ,_cggc =_dfa .alg2b (_gef .R ,_dfge ,_gea ,nil );if _cggc !=nil {return _cggc ;};_adgg ,_cggc :=_fea (_bdd [:32]);if _cggc !=nil {return _cggc ;};_gcg :=make ([]byte ,_a .BlockSize );_cefc :=_cb .NewCBCEncrypter (_adgg ,_gcg );
UE :=make ([]byte ,32);_cefc .CryptBlocks (UE ,_ddf [:32]);_gef .UE =UE ;return nil ;};func _bf (_be _cb .Block )_cb .BlockMode {return (*ecbEncrypter )(_gb (_be ))};func (stdHandlerR4 )paddedPass (_fbb []byte )[]byte {_ffe :=make ([]byte ,32);_fe :=copy (_ffe ,_fbb );
for ;_fe < 32;_fe ++{_ffe [_fe ]=_ffg [_fe -len (_fbb )];};return _ffe ;};const _ffg ="\x28\277\116\136\x4e\x75\x8a\x41\x64\000\x4e\x56\377"+"\xfa\001\010\056\x2e\x00\xb6\xd0\x68\076\x80\x2f\014"+"\251\xfe\x64\x53\x69\172";func (_eg stdHandlerR6 )alg2a (_deb *StdEncryptDict ,_aaa []byte )([]byte ,Permissions ,error ){if _dfd :=_dc ("\u0061\u006c\u00672\u0061","\u004f",48,_deb .O );
_dfd !=nil {return nil ,0,_dfd ;};if _gad :=_dc ("\u0061\u006c\u00672\u0061","\u0055",48,_deb .U );_gad !=nil {return nil ,0,_gad ;};if len (_aaa )> 127{_aaa =_aaa [:127];};_adc ,_ccf :=_eg .alg12 (_deb ,_aaa );if _ccf !=nil {return nil ,0,_ccf ;};var (_baf []byte ;
_gadb []byte ;_beg []byte ;);var _dd Permissions ;if len (_adc )!=0{_dd =PermOwner ;_ebf :=make ([]byte ,len (_aaa )+8+48);_dadf :=copy (_ebf ,_aaa );_dadf +=copy (_ebf [_dadf :],_deb .O [40:48]);copy (_ebf [_dadf :],_deb .U [0:48]);_baf =_ebf ;_gadb =_deb .OE ;
_beg =_deb .U [0:48];}else {_adc ,_ccf =_eg .alg11 (_deb ,_aaa );if _ccf ==nil &&len (_adc )==0{_adc ,_ccf =_eg .alg11 (_deb ,[]byte (""));};if _ccf !=nil {return nil ,0,_ccf ;}else if len (_adc )==0{return nil ,0,nil ;};_dd =_deb .P ;_baa :=make ([]byte ,len (_aaa )+8);
_gfgb :=copy (_baa ,_aaa );copy (_baa [_gfgb :],_deb .U [40:48]);_baf =_baa ;_gadb =_deb .UE ;_beg =nil ;};if _gbga :=_dc ("\u0061\u006c\u00672\u0061","\u004b\u0065\u0079",32,_gadb );_gbga !=nil {return nil ,0,_gbga ;};_gadb =_gadb [:32];_aca ,_ccf :=_eg .alg2b (_deb .R ,_baf ,_aaa ,_beg );
if _ccf !=nil {return nil ,0,_ccf ;};_gcc ,_ccf :=_a .NewCipher (_aca [:32]);if _ccf !=nil {return nil ,0,_ccf ;};_gfgd :=make ([]byte ,_a .BlockSize );_ddb :=_cb .NewCBCDecrypter (_gcc ,_gfgd );_beb :=make ([]byte ,32);_ddb .CryptBlocks (_beb ,_gadb );
if _deb .R ==5{return _beb ,_dd ,nil ;};_ccf =_eg .alg13 (_deb ,_beb );if _ccf !=nil {return nil ,0,_ccf ;};return _beb ,_dd ,nil ;};

// NewHandlerR6 creates a new standard security handler for R=5 and R=6.
func NewHandlerR6 ()StdHandler {return stdHandlerR6 {}};

// Authenticate implements StdHandler interface.
func (_ebc stdHandlerR4 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){_fa .Log .Trace ("\u0044\u0065b\u0075\u0067\u0067\u0069n\u0067\u0020a\u0075\u0074\u0068\u0065\u006e\u0074\u0069\u0063a\u0074\u0069\u006f\u006e\u0020\u002d\u0020\u006f\u0077\u006e\u0065\u0072 \u0070\u0061\u0073\u0073");
_gbbb ,_daf :=_ebc .alg7 (d ,pass );if _daf !=nil {return nil ,0,_daf ;};if _gbbb !=nil {_fa .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _gbbb ,PermOwner ,nil ;
};_fa .Log .Trace ("\u0044\u0065bu\u0067\u0067\u0069n\u0067\u0020\u0061\u0075the\u006eti\u0063\u0061\u0074\u0069\u006f\u006e\u0020- \u0075\u0073\u0065\u0072\u0020\u0070\u0061s\u0073");_gbbb ,_daf =_ebc .alg6 (d ,pass );if _daf !=nil {return nil ,0,_daf ;
};if _gbbb !=nil {_fa .Log .Trace ("\u0074h\u0069\u0073\u002e\u0061u\u0074\u0068\u0065\u006e\u0074i\u0063a\u0074e\u0064\u0020\u003d\u0020\u0054\u0072\u0075e");return _gbbb ,d .P ,nil ;};return nil ,0,nil ;};func (_cde stdHandlerR4 )alg7 (_fc *StdEncryptDict ,_edb []byte )([]byte ,error ){_gfg :=_cde .alg3Key (_fc .R ,_edb );
_db :=make ([]byte ,len (_fc .O ));if _fc .R ==2{_cdec ,_cgff :=_g .NewCipher (_gfg );if _cgff !=nil {return nil ,_f .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");};_cdec .XORKeyStream (_db ,_fc .O );}else if _fc .R >=3{_ab :=append ([]byte {},_fc .O ...);
for _cef :=0;_cef < 20;_cef ++{_ef :=append ([]byte {},_gfg ...);for _ccd :=0;_ccd < len (_gfg );_ccd ++{_ef [_ccd ]^=byte (19-_cef );};_cdad ,_aa :=_g .NewCipher (_ef );if _aa !=nil {return nil ,_f .New ("\u0066\u0061\u0069\u006c\u0065\u0064\u0020\u0063\u0069\u0070\u0068\u0065\u0072");
};_cdad .XORKeyStream (_db ,_ab );_ab =append ([]byte {},_db ...);};}else {return nil ,_f .New ("\u0069n\u0076\u0061\u006c\u0069\u0064\u0020R");};_cbg ,_ece :=_cde .alg6 (_fc ,_db );if _ece !=nil {return nil ,nil ;};return _cbg ,nil ;};type stdHandlerR4 struct{Length int ;
ID0 string ;};func (_dcd stdHandlerR4 )alg3 (R int ,_gdd ,_acb []byte )([]byte ,error ){var _cdd []byte ;if len (_acb )> 0{_cdd =_dcd .alg3Key (R ,_acb );}else {_cdd =_dcd .alg3Key (R ,_gdd );};_gbf ,_cgg :=_g .NewCipher (_cdd );if _cgg !=nil {return nil ,_f .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_bd :=_dcd .paddedPass (_gdd );_edc :=make ([]byte ,len (_bd ));_gbf .XORKeyStream (_edc ,_bd );if R >=3{_gee :=make ([]byte ,len (_cdd ));for _ae :=0;_ae < 19;_ae ++{for _gca :=0;_gca < len (_cdd );_gca ++{_gee [_gca ]=_cdd [_gca ]^byte (_ae +1);};_ba ,_gfc :=_g .NewCipher (_gee );
if _gfc !=nil {return nil ,_f .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");};_ba .XORKeyStream (_edc ,_edc );};};return _edc ,nil ;};const (EventDocOpen =AuthEvent ("\u0044o\u0063\u004f\u0070\u0065\u006e");EventEFOpen =AuthEvent ("\u0045\u0046\u004f\u0070\u0065\u006e");
);func _ed (_bcc _cb .Block )_cb .BlockMode {return (*ecbDecrypter )(_gb (_bcc ))};func (_acg stdHandlerR6 )alg13 (_bgaf *StdEncryptDict ,_acd []byte )error {if _fgc :=_dc ("\u0061\u006c\u00671\u0033","\u004b\u0065\u0079",32,_acd );_fgc !=nil {return _fgc ;
};if _gfcf :=_dc ("\u0061\u006c\u00671\u0033","\u0050\u0065\u0072m\u0073",16,_bgaf .Perms );_gfcf !=nil {return _gfcf ;};_dbe :=make ([]byte ,16);copy (_dbe ,_bgaf .Perms [:16]);_ecf ,_fad :=_a .NewCipher (_acd [:32]);if _fad !=nil {return _fad ;};_af :=_ed (_ecf );
_af .CryptBlocks (_dbe ,_dbe );if !_ce .Equal (_dbe [9:12],[]byte ("\u0061\u0064\u0062")){return _f .New ("\u0064\u0065\u0063o\u0064\u0065\u0064\u0020p\u0065\u0072\u006d\u0069\u0073\u0073\u0069o\u006e\u0073\u0020\u0061\u0072\u0065\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};_fcg :=Permissions (_fb .LittleEndian .Uint32 (_dbe [0:4]));if _fcg !=_bgaf .P {return _f .New ("\u0070\u0065r\u006d\u0069\u0073\u0073\u0069\u006f\u006e\u0073\u0020\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0061il\u0065\u0064");
};var _fbd bool ;if _dbe [8]=='T'{_fbd =true ;}else if _dbe [8]=='F'{_fbd =false ;}else {return _f .New ("\u0064\u0065\u0063\u006f\u0064\u0065\u0064 \u006d\u0065\u0074a\u0064\u0061\u0074\u0061 \u0065\u006e\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e\u0020\u0066\u006c\u0061\u0067\u0020\u0069\u0073\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064");
};if _fbd !=_bgaf .EncryptMetadata {return _f .New ("\u006d\u0065t\u0061\u0064\u0061\u0074a\u0020\u0065n\u0063\u0072\u0079\u0070\u0074\u0069\u006f\u006e \u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0066a\u0069\u006c\u0065\u0064");
};return nil ;};var _ StdHandler =stdHandlerR4 {};

// NewHandlerR4 creates a new standard security handler for R<=4.
func NewHandlerR4 (id0 string ,length int )StdHandler {return stdHandlerR4 {ID0 :id0 ,Length :length }};

// StdEncryptDict is a set of additional fields used in standard encryption dictionary.
type StdEncryptDict struct{R int ;P Permissions ;EncryptMetadata bool ;O ,U []byte ;OE ,UE []byte ;Perms []byte ;};func (_cge stdHandlerR4 )alg4 (_bfg []byte ,_dfb []byte )([]byte ,error ){_gbb ,_gcb :=_g .NewCipher (_bfg );if _gcb !=nil {return nil ,_f .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_dfbc :=[]byte (_ffg );_bae :=make ([]byte ,len (_dfbc ));_gbb .XORKeyStream (_bae ,_dfbc );return _bae ,nil ;};type stdHandlerR6 struct{};const (PermOwner =Permissions (_bga .MaxUint32 );PermPrinting =Permissions (1<<2);PermModify =Permissions (1<<3);
PermExtractGraphics =Permissions (1<<4);PermAnnotate =Permissions (1<<5);PermFillForms =Permissions (1<<8);PermDisabilityExtract =Permissions (1<<9);PermRotateInsert =Permissions (1<<10);PermFullPrintQuality =Permissions (1<<11););func (_cff errInvalidField )Error ()string {return _ac .Sprintf ("\u0025s\u003a\u0020e\u0078\u0070\u0065\u0063t\u0065\u0064\u0020%\u0073\u0020\u0066\u0069\u0065\u006c\u0064\u0020\u0074o \u0062\u0065\u0020%\u0064\u0020b\u0079\u0074\u0065\u0073\u002c\u0020g\u006f\u0074 \u0025\u0064",_cff .Func ,_cff .Field ,_cff .Exp ,_cff .Got );
};var _ StdHandler =stdHandlerR6 {};

// StdHandler is an interface for standard security handlers.
type StdHandler interface{

// GenerateParams uses owner and user passwords to set encryption parameters and generate an encryption key.
// It assumes that R, P and EncryptMetadata are already set.
GenerateParams (_bff *StdEncryptDict ,_cd ,_ca []byte )([]byte ,error );

// Authenticate uses encryption dictionary parameters and the password to calculate
// the document encryption key. It also returns permissions that should be granted to a user.
// In case of failed authentication, it returns empty key and zero permissions with no error.
Authenticate (_dfg *StdEncryptDict ,_gc []byte )([]byte ,Permissions ,error );};type ecb struct{_ge _cb .Block ;_e int ;};

// Allowed checks if a set of permissions can be granted.
func (_ad Permissions )Allowed (p2 Permissions )bool {return _ad &p2 ==p2 };

// GenerateParams generates and sets O and U parameters for the encryption dictionary.
// It expects R, P and EncryptMetadata fields to be set.
func (_ccb stdHandlerR4 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){O ,_cec :=_ccb .alg3 (d .R ,upass ,opass );if _cec !=nil {_fa .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_cec );
return nil ,_cec ;};d .O =O ;_fa .Log .Trace ("\u0067\u0065\u006e\u0020\u004f\u003a\u0020\u0025\u0020\u0078",O );_ace :=_ccb .alg2 (d ,upass );U ,_cec :=_ccb .alg5 (_ace ,upass );if _cec !=nil {_fa .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0045r\u0072\u006f\u0072\u0020\u0067\u0065\u006ee\u0072\u0061\u0074\u0069\u006e\u0067 \u004f\u0020\u0066\u006f\u0072\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u0069\u006f\u006e\u0020\u0028\u0025\u0073\u0029",_cec );
return nil ,_cec ;};d .U =U ;_fa .Log .Trace ("\u0067\u0065\u006e\u0020\u0055\u003a\u0020\u0025\u0020\u0078",U );return _ace ,nil ;};

// AuthEvent is an event type that triggers authentication.
type AuthEvent string ;func _fea (_ceg []byte )(_cb .Block ,error ){_dad ,_ga :=_a .NewCipher (_ceg );if _ga !=nil {_fa .Log .Error ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020A\u0045\u0053\u0020\u0063\u0069p\u0068\u0065r\u003a\u0020\u0025\u0076",_ga );
return nil ,_ga ;};return _dad ,nil ;};type ecbEncrypter ecb ;func (_gbg stdHandlerR4 )alg2 (_adg *StdEncryptDict ,_cdf []byte )[]byte {_fa .Log .Trace ("\u0061\u006c\u0067\u0032");_cdfb :=_gbg .paddedPass (_cdf );_fff :=_fg .New ();_fff .Write (_cdfb );
_fff .Write (_adg .O );var _cbc [4]byte ;_fb .LittleEndian .PutUint32 (_cbc [:],uint32 (_adg .P ));_fff .Write (_cbc [:]);_fa .Log .Trace ("\u0067o\u0020\u0050\u003a\u0020\u0025\u0020x",_cbc );_fff .Write ([]byte (_gbg .ID0 ));_fa .Log .Trace ("\u0074\u0068\u0069\u0073\u002e\u0052\u0020\u003d\u0020\u0025d\u0020\u0065\u006e\u0063\u0072\u0079\u0070t\u004d\u0065\u0074\u0061\u0064\u0061\u0074\u0061\u0020\u0025\u0076",_adg .R ,_adg .EncryptMetadata );
if (_adg .R >=4)&&!_adg .EncryptMetadata {_fff .Write ([]byte {0xff,0xff,0xff,0xff});};_ag :=_fff .Sum (nil );if _adg .R >=3{_fff =_fg .New ();for _cda :=0;_cda < 50;_cda ++{_fff .Reset ();_fff .Write (_ag [0:_gbg .Length /8]);_ag =_fff .Sum (nil );};};
if _adg .R >=3{return _ag [0:_gbg .Length /8];};return _ag [0:5];};func _bab (_caf ,_bdb ,_efa []byte )([]byte ,error ){var (_cfc ,_cdg ,_edd _bc .Hash ;);_cfc =_bg .New ();_cgd :=make ([]byte ,64);_gbca :=_cfc ;_gbca .Write (_caf );K :=_gbca .Sum (_cgd [:0]);
_gfga :=make ([]byte ,64*(127+64+48));_gbgf :=func (_ded int )([]byte ,error ){_ccab :=len (_bdb )+len (K )+len (_efa );_bda :=_gfga [:_ccab ];_dbg :=copy (_bda ,_bdb );_dbg +=copy (_bda [_dbg :],K [:]);_dbg +=copy (_bda [_dbg :],_efa );if _dbg !=_ccab {_fa .Log .Error ("E\u0052\u0052\u004f\u0052\u003a\u0020u\u006e\u0065\u0078\u0070\u0065\u0063t\u0065\u0064\u0020\u0072\u006f\u0075\u006ed\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0073\u0069\u007ae\u002e");
return nil ,_f .New ("\u0077\u0072\u006f\u006e\u0067\u0020\u0073\u0069\u007a\u0065");};K1 :=_gfga [:_ccab *64];_ebe (K1 ,_ccab );_ced ,_cdb :=_fea (K [0:16]);if _cdb !=nil {return nil ,_cdb ;};_egc :=_cb .NewCBCEncrypter (_ced ,K [16:32]);_egc .CryptBlocks (K1 ,K1 );
E :=K1 ;_eabe :=0;for _egce :=0;_egce < 16;_egce ++{_eabe +=int (E [_egce ]%3);};var _bfgd _bc .Hash ;switch _eabe %3{case 0:_bfgd =_cfc ;case 1:if _cdg ==nil {_cdg =_d .New384 ();};_bfgd =_cdg ;case 2:if _edd ==nil {_edd =_d .New ();};_bfgd =_edd ;};_bfgd .Reset ();
_bfgd .Write (E );K =_bfgd .Sum (_cgd [:0]);return E ,nil ;};for _aag :=0;;{E ,_dada :=_gbgf (_aag );if _dada !=nil {return nil ,_dada ;};_bfe :=E [len (E )-1];_aag ++;if _aag >=64&&_bfe <=uint8 (_aag -32){break ;};};return K [:32],nil ;};func (_aef stdHandlerR4 )alg5 (_de []byte ,_aee []byte )([]byte ,error ){_da :=_fg .New ();
_da .Write ([]byte (_ffg ));_da .Write ([]byte (_aef .ID0 ));_eab :=_da .Sum (nil );_fa .Log .Trace ("\u0061\u006c\u0067\u0035");_fa .Log .Trace ("\u0065k\u0065\u0079\u003a\u0020\u0025\u0020x",_de );_fa .Log .Trace ("\u0049D\u003a\u0020\u0025\u0020\u0078",_aef .ID0 );
if len (_eab )!=16{return nil ,_f .New ("\u0068a\u0073\u0068\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u006eo\u0074\u0020\u0031\u0036\u0020\u0062\u0079\u0074\u0065\u0073");};_fbf ,_cca :=_g .NewCipher (_de );if _cca !=nil {return nil ,_f .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_cad :=make ([]byte ,16);_fbf .XORKeyStream (_cad ,_eab );_cgf :=make ([]byte ,len (_de ));for _ffd :=0;_ffd < 19;_ffd ++{for _adgf :=0;_adgf < len (_de );_adgf ++{_cgf [_adgf ]=_de [_adgf ]^byte (_ffd +1);};_fbf ,_cca =_g .NewCipher (_cgf );if _cca !=nil {return nil ,_f .New ("\u0066a\u0069l\u0065\u0064\u0020\u0072\u0063\u0034\u0020\u0063\u0069\u0070\u0068");
};_fbf .XORKeyStream (_cad ,_cad );_fa .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u002c\u0020\u0065\u006b\u0065\u0079:\u0020\u0025\u0020\u0078",_ffd ,_cgf );_fa .Log .Trace ("\u0069\u0020\u003d\u0020\u0025\u0064\u0020\u002d\u003e\u0020\u0025\u0020\u0078",_ffd ,_cad );
};_ffc :=make ([]byte ,32);for _gbgb :=0;_gbgb < 16;_gbgb ++{_ffc [_gbgb ]=_cad [_gbgb ];};_ ,_cca =_fbc .Read (_ffc [16:32]);if _cca !=nil {return nil ,_f .New ("\u0066a\u0069\u006c\u0065\u0064 \u0074\u006f\u0020\u0067\u0065n\u0020r\u0061n\u0064\u0020\u006e\u0075\u006d\u0062\u0065r");
};return _ffc ,nil ;};func _fee (_bac []byte )([]byte ,error ){_fbbf :=_bg .New ();_fbbf .Write (_bac );return _fbbf .Sum (nil ),nil ;};func _dc (_dca ,_cc string ,_ec int ,_cbf []byte )error {if len (_cbf )< _ec {return errInvalidField {Func :_dca ,Field :_cc ,Exp :_ec ,Got :len (_cbf )};
};return nil ;};func (_ff *ecbDecrypter )BlockSize ()int {return _ff ._e };

// Authenticate implements StdHandler interface.
func (_geg stdHandlerR6 )Authenticate (d *StdEncryptDict ,pass []byte )([]byte ,Permissions ,error ){return _geg .alg2a (d ,pass );};type ecbDecrypter ecb ;

// GenerateParams is the algorithm opposite to alg2a (R>=5).
// It generates U,O,UE,OE,Perms fields using AESv3 encryption.
// There is no algorithm number assigned to this function in the spec.
// It expects R, P and EncryptMetadata fields to be set.
func (_ffdb stdHandlerR6 )GenerateParams (d *StdEncryptDict ,opass ,upass []byte )([]byte ,error ){_eed :=make ([]byte ,32);if _ ,_fffd :=_b .ReadFull (_fbc .Reader ,_eed );_fffd !=nil {return nil ,_fffd ;};d .U =nil ;d .O =nil ;d .UE =nil ;d .OE =nil ;
d .Perms =nil ;if len (upass )> 127{upass =upass [:127];};if len (opass )> 127{opass =opass [:127];};if _gaed :=_ffdb .alg8 (d ,_eed ,upass );_gaed !=nil {return nil ,_gaed ;};if _fcd :=_ffdb .alg9 (d ,_eed ,opass );_fcd !=nil {return nil ,_fcd ;};if d .R ==5{return _eed ,nil ;
};if _fdc :=_ffdb .alg10 (d ,_eed );_fdc !=nil {return nil ,_fdc ;};return _eed ,nil ;};func (_aeeb stdHandlerR6 )alg12 (_ecef *StdEncryptDict ,_egf []byte )([]byte ,error ){if _effc :=_dc ("\u0061\u006c\u00671\u0032","\u0055",48,_ecef .U );_effc !=nil {return nil ,_effc ;
};if _dg :=_dc ("\u0061\u006c\u00671\u0032","\u004f",48,_ecef .O );_dg !=nil {return nil ,_dg ;};_fec :=make ([]byte ,len (_egf )+8+48);_cgb :=copy (_fec ,_egf );_cgb +=copy (_fec [_cgb :],_ecef .O [32:40]);_cgb +=copy (_fec [_cgb :],_ecef .U [0:48]);_eabeb ,_ffca :=_aeeb .alg2b (_ecef .R ,_fec ,_egf ,_ecef .U [0:48]);
if _ffca !=nil {return nil ,_ffca ;};_eabeb =_eabeb [:32];if !_ce .Equal (_eabeb ,_ecef .O [:32]){return nil ,nil ;};return _eabeb ,nil ;};func (_bgd stdHandlerR6 )alg2b (R int ,_bb ,_eee ,_agf []byte )([]byte ,error ){if R ==5{return _fee (_bb );};return _bab (_bb ,_eee ,_agf );
};func (_df *ecbEncrypter )BlockSize ()int {return _df ._e };func (_dadc stdHandlerR6 )alg10 (_edbd *StdEncryptDict ,_bfgg []byte )error {if _ffeb :=_dc ("\u0061\u006c\u00671\u0030","\u004b\u0065\u0079",32,_bfgg );_ffeb !=nil {return _ffeb ;};_bffa :=uint64 (uint32 (_edbd .P ))|(_bga .MaxUint32 <<32);
Perms :=make ([]byte ,16);_fb .LittleEndian .PutUint64 (Perms [:8],_bffa );if _edbd .EncryptMetadata {Perms [8]='T';}else {Perms [8]='F';};copy (Perms [9:12],"\u0061\u0064\u0062");if _ ,_egcc :=_b .ReadFull (_fbc .Reader ,Perms [12:16]);_egcc !=nil {return _egcc ;
};_adgd ,_ege :=_fea (_bfgg [:32]);if _ege !=nil {return _ege ;};_add :=_bf (_adgd );_add .CryptBlocks (Perms ,Perms );_edbd .Perms =Perms [:16];return nil ;};func (_cf *ecbDecrypter )CryptBlocks (dst ,src []byte ){if len (src )%_cf ._e !=0{_fa .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0064\u0065\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_fa .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0064\u0065\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_cf ._ge .Decrypt (dst ,src [:_cf ._e ]);src =src [_cf ._e :];dst =dst [_cf ._e :];};};func _gb (_ea _cb .Block )*ecb {return &ecb {_ge :_ea ,_e :_ea .BlockSize ()}};func (_cg *ecbEncrypter )CryptBlocks (dst ,src []byte ){if len (src )%_cg ._e !=0{_fa .Log .Error ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0045\u0043\u0042\u0020\u0065\u006e\u0063\u0072\u0079\u0070\u0074\u003a \u0069\u006e\u0070\u0075\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u0075\u006c\u006c\u0020\u0062\u006c\u006f\u0063\u006b\u0073");
return ;};if len (dst )< len (src ){_fa .Log .Error ("\u0045R\u0052\u004fR\u003a\u0020\u0045C\u0042\u0020\u0065\u006e\u0063\u0072\u0079p\u0074\u003a\u0020\u006f\u0075\u0074p\u0075\u0074\u0020\u0073\u006d\u0061\u006c\u006c\u0065\u0072\u0020t\u0068\u0061\u006e\u0020\u0069\u006e\u0070\u0075\u0074");
return ;};for len (src )> 0{_cg ._ge .Encrypt (dst ,src [:_cg ._e ]);src =src [_cg ._e :];dst =dst [_cg ._e :];};};func (_abg stdHandlerR6 )alg9 (_cae *StdEncryptDict ,_baeb []byte ,_fgf []byte )error {if _gfca :=_dc ("\u0061\u006c\u0067\u0039","\u004b\u0065\u0079",32,_baeb );
_gfca !=nil {return _gfca ;};if _feg :=_dc ("\u0061\u006c\u0067\u0039","\u0055",48,_cae .U );_feg !=nil {return _feg ;};var _baad [16]byte ;if _ ,_gefa :=_b .ReadFull (_fbc .Reader ,_baad [:]);_gefa !=nil {return _gefa ;};_bcf :=_baad [0:8];_eea :=_baad [8:16];
_ffgd :=_cae .U [:48];_aeef :=make ([]byte ,len (_fgf )+len (_bcf )+len (_ffgd ));_agfc :=copy (_aeef ,_fgf );_agfc +=copy (_aeef [_agfc :],_bcf );_agfc +=copy (_aeef [_agfc :],_ffgd );_faa ,_aaag :=_abg .alg2b (_cae .R ,_aeef ,_fgf ,_ffgd );if _aaag !=nil {return _aaag ;
};O :=make ([]byte ,len (_faa )+len (_bcf )+len (_eea ));_agfc =copy (O ,_faa [:32]);_agfc +=copy (O [_agfc :],_bcf );_agfc +=copy (O [_agfc :],_eea );_cae .O =O ;_agfc =len (_fgf );_agfc +=copy (_aeef [_agfc :],_eea );_faa ,_aaag =_abg .alg2b (_cae .R ,_aeef ,_fgf ,_ffgd );
if _aaag !=nil {return _aaag ;};_eeaf ,_aaag :=_fea (_faa [:32]);if _aaag !=nil {return _aaag ;};_bad :=make ([]byte ,_a .BlockSize );_ega :=_cb .NewCBCEncrypter (_eeaf ,_bad );OE :=make ([]byte ,32);_ega .CryptBlocks (OE ,_baeb [:32]);_cae .OE =OE ;return nil ;
};